/*
** ALTERAÇÃO NA DATA FLUXO
*/

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_BU4
INACTIVE BEFORE UPDATE POSITION 400
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  IF (NEW.DATAFECHAMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAFECHAMENTO)
      RETURNING_VALUES
        NEW.FECHA_DATA_FLUXO,
        DIA_FLUXO,
        NEW.FECHA_SEMANA_FLUXO,
        NEW.FECHA_MES_FLUXO,
        NEW.FECHA_BIMESTRE_FLUXO,
        NEW.FECHA_TRIMESTRE_FLUXO,
        NEW.FECHA_QUADRIMESTRE_FLUXO,
        NEW.FECHA_SEMESTRE_FLUXO,
        NEW.FECHA_ANO_FLUXO,
        NEW.FECHA_STR_SEMANA_FLUXO,
        NEW.FECHA_STR_MES_FLUXO,
        NEW.FECHA_STR_BIMESTRE_FLUXO,
        NEW.FECHA_STR_TRIMESTRE_FLUXO,
        NEW.FECHA_STR_QUADRIMESTRE_FLUXO,
        NEW.FECHA_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER PAGAMENTOS_BI100
INACTIVE BEFORE INSERT POSITION 100
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  /* VALOR POR EXTENSO */
  EXECUTE PROCEDURE MOEDAEXTENSO NEW.TOTAL_PAGO, NEW.CODEMPRESA
    RETURNING_VALUES NEW.EXTENSO;

  /* ANALISE DE DATAS - CADASTRO */
  IF (NEW.DATACADAST IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATACADAST)
      RETURNING_VALUES
        NEW.CAD_DATA_FLUXO,
        DIA_FLUXO,
        NEW.CAD_SEMANA_FLUXO,
        NEW.CAD_MES_FLUXO,
        NEW.CAD_BIMESTRE_FLUXO,
        NEW.CAD_TRIMESTRE_FLUXO,
        NEW.CAD_QUADRIMESTRE_FLUXO,
        NEW.CAD_SEMESTRE_FLUXO,
        NEW.CAD_ANO_FLUXO,
        NEW.CAD_STR_SEMANA_FLUXO,
        NEW.CAD_STR_MES_FLUXO,
        NEW.CAD_STR_BIMESTRE_FLUXO,
        NEW.CAD_STR_TRIMESTRE_FLUXO,
        NEW.CAD_STR_QUADRIMESTRE_FLUXO,
        NEW.CAD_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - VENCIMENTO */
  IF (NEW.DATAVENCIMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAVENCIMENTO)
      RETURNING_VALUES
        NEW.VEN_DATA_FLUXO,
        DIA_FLUXO,
        NEW.VEN_SEMANA_FLUXO,
        NEW.VEN_MES_FLUXO,
        NEW.VEN_BIMESTRE_FLUXO,
        NEW.VEN_TRIMESTRE_FLUXO,
        NEW.VEN_QUADRIMESTRE_FLUXO,
        NEW.VEN_SEMESTRE_FLUXO,
        NEW.VEN_ANO_FLUXO,
        NEW.VEN_STR_SEMANA_FLUXO,
        NEW.VEN_STR_MES_FLUXO,
        NEW.VEN_STR_BIMESTRE_FLUXO,
        NEW.VEN_STR_TRIMESTRE_FLUXO,
        NEW.VEN_STR_QUADRIMESTRE_FLUXO,
        NEW.VEN_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - PAGAMENTO */
  IF (NEW.DATAPAGO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAPAGO)
      RETURNING_VALUES
        NEW.PAG_DATA_FLUXO,
        DIA_FLUXO,
        NEW.PAG_SEMANA_FLUXO,
        NEW.PAG_MES_FLUXO,
        NEW.PAG_BIMESTRE_FLUXO,
        NEW.PAG_TRIMESTRE_FLUXO,
        NEW.PAG_QUADRIMESTRE_FLUXO,
        NEW.PAG_SEMESTRE_FLUXO,
        NEW.PAG_ANO_FLUXO,
        NEW.PAG_STR_SEMANA_FLUXO,
        NEW.PAG_STR_MES_FLUXO,
        NEW.PAG_STR_BIMESTRE_FLUXO,
        NEW.PAG_STR_TRIMESTRE_FLUXO,
        NEW.PAG_STR_QUADRIMESTRE_FLUXO,
        NEW.PAG_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER PAGAMENTOS_BU100
INACTIVE BEFORE UPDATE POSITION 100
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  /* STATUS */
  IF (NEW.PAGO = 0) THEN
   BEGIN
     IF (NEW.ES IN (3, 4)) THEN
       NEW.STATUS = 'LIXEIRA';
     ELSE
       NEW.STATUS = 'ABERTO';
   END ELSE
     NEW.STATUS = 'PAGO';

  /* ANALISE DE VALORES */
  IF (NEW.ES = 1) THEN
    NEW.VALOR_FLUXO = (NEW.TOTAL_PAGO * -1);

  IF (NEW.ES = 2) THEN
    NEW.VALOR_FLUXO = NEW.TOTAL_PAGO;

  /* VALOR POR EXTENSO */
  EXECUTE PROCEDURE MOEDAEXTENSO NEW.TOTAL_PAGO, NEW.CODEMPRESA
    RETURNING_VALUES NEW.EXTENSO;

  /* ANALISE DE DATAS - CADASTRO */
  IF (NEW.DATACADAST IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATACADAST)
      RETURNING_VALUES
        NEW.CAD_DATA_FLUXO,
        DIA_FLUXO,
        NEW.CAD_SEMANA_FLUXO,
        NEW.CAD_MES_FLUXO,
        NEW.CAD_BIMESTRE_FLUXO,
        NEW.CAD_TRIMESTRE_FLUXO,
        NEW.CAD_QUADRIMESTRE_FLUXO,
        NEW.CAD_SEMESTRE_FLUXO,
        NEW.CAD_ANO_FLUXO,
        NEW.CAD_STR_SEMANA_FLUXO,
        NEW.CAD_STR_MES_FLUXO,
        NEW.CAD_STR_BIMESTRE_FLUXO,
        NEW.CAD_STR_TRIMESTRE_FLUXO,
        NEW.CAD_STR_QUADRIMESTRE_FLUXO,
        NEW.CAD_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - VENCIMENTO */
  IF (NEW.DATAVENCIMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAVENCIMENTO)
      RETURNING_VALUES
        NEW.VEN_DATA_FLUXO,
        DIA_FLUXO,
        NEW.VEN_SEMANA_FLUXO,
        NEW.VEN_MES_FLUXO,
        NEW.VEN_BIMESTRE_FLUXO,
        NEW.VEN_TRIMESTRE_FLUXO,
        NEW.VEN_QUADRIMESTRE_FLUXO,
        NEW.VEN_SEMESTRE_FLUXO,
        NEW.VEN_ANO_FLUXO,
        NEW.VEN_STR_SEMANA_FLUXO,
        NEW.VEN_STR_MES_FLUXO,
        NEW.VEN_STR_BIMESTRE_FLUXO,
        NEW.VEN_STR_TRIMESTRE_FLUXO,
        NEW.VEN_STR_QUADRIMESTRE_FLUXO,
        NEW.VEN_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - PAGAMENTO */
  IF (NEW.DATAPAGO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAPAGO)
      RETURNING_VALUES
        NEW.PAG_DATA_FLUXO,
        DIA_FLUXO,
        NEW.PAG_SEMANA_FLUXO,
        NEW.PAG_MES_FLUXO,
        NEW.PAG_BIMESTRE_FLUXO,
        NEW.PAG_TRIMESTRE_FLUXO,
        NEW.PAG_QUADRIMESTRE_FLUXO,
        NEW.PAG_SEMESTRE_FLUXO,
        NEW.PAG_ANO_FLUXO,
        NEW.PAG_STR_SEMANA_FLUXO,
        NEW.PAG_STR_MES_FLUXO,
        NEW.PAG_STR_BIMESTRE_FLUXO,
        NEW.PAG_STR_TRIMESTRE_FLUXO,
        NEW.PAG_STR_QUADRIMESTRE_FLUXO,
        NEW.PAG_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE ANALISE_DATA (
    DATA TIMESTAMP)
RETURNS (
    DATA_FLUXO DATE,
    DIA_FLUXO INTEGER,
    SEMANA_FLUXO INTEGER,
    MES_FLUXO INTEGER,
    BIMESTRE_FLUXO INTEGER,
    TRIMESTRE_FLUXO INTEGER,
    QUADRIMESTRE_FLUXO INTEGER,
    SEMESTRE_FLUXO INTEGER,
    ANO_FLUXO INTEGER,
    STR_SEMANA_FLUXO VARCHAR(30),
    STR_MES_FLUXO VARCHAR(20),
    STR_BIMESTRE_FLUXO VARCHAR(30),
    STR_TRIMESTRE_FLUXO VARCHAR(30),
    STR_QUADRIMESTRE_FLUXO VARCHAR(30),
    STR_SEMESTRE_FLUXO VARCHAR(30))
AS
DECLARE VARIABLE TEMP_SEMANA INTEGER;
DECLARE VARIABLE TEMP_DATA DATE;
BEGIN

  /* DATA FLUXO */
  DATA_FLUXO = CAST(DATA AS DATE);

  /* SE FOR SABADO, SOMO 1 DIA  */
  --IF (UDF_WEEKDAY(DATA_FLUXO) = 6) THEN
  --  DATA_FLUXO = DATA_FLUXO + 1;

  /* SE FOR DOMINGO, SOMO 1 DIA  PARA CAIR NA PROXIMA SEGUNDA */
  --IF (UDF_WEEKDAY(DATA_FLUXO) = 0) THEN
  --  DATA_FLUXO = DATA_FLUXO + 1;

  /* DIA FLUXO */
  DIA_FLUXO = EXTRACT(DAY FROM DATA_FLUXO);

  /* SEMANA FLUXO */
  /* DIA DA SEMANA DO PRIMEIRO DIA DO ANO */
  TEMP_DATA = UDF_ENCDATE(
      EXTRACT(YEAR FROM DATA_FLUXO),
      01,
      01);
  TEMP_SEMANA = UDF_WEEKDAY(TEMP_DATA);
  /* SE FOR DOMINGO OU SEGUNDA A SEMANA COMEÇA MAIS TARDE */
  IF (TEMP_SEMANA > 0) THEN
   BEGIN
     IF (TEMP_SEMANA = 6) THEN
       TEMP_DATA = TEMP_DATA + 1;
     ELSE
       TEMP_DATA = TEMP_DATA - TEMP_SEMANA;
   END
  /* DIFERENÇA ENTRE AS SEMANAS */
  SEMANA_FLUXO = CAST((DATA_FLUXO - TEMP_DATA) AS INTEGER) / 7;
  IF (SEMANA_FLUXO = 0) THEN
    SEMANA_FLUXO = 1;
  ELSE
    IF (UDF_MOD(CAST((DATA_FLUXO - TEMP_DATA) AS INTEGER), 7) > 0) THEN
      SEMANA_FLUXO = SEMANA_FLUXO + 1;

  /* MES */
  MES_FLUXO = EXTRACT(MONTH FROM DATA_FLUXO);

  /* BIMESTRE FLUXO */
  BIMESTRE_FLUXO = CAST((MES_FLUXO / 2) AS INTEGER);
  IF (BIMESTRE_FLUXO = 0) THEN
    BIMESTRE_FLUXO = 1;
  ELSE
    IF (UDF_MOD(MES_FLUXO, 2) > 0) THEN
      BIMESTRE_FLUXO = BIMESTRE_FLUXO + 1;

  /* TRIMESTRE FLUXO */
  TRIMESTRE_FLUXO = CAST((MES_FLUXO / 3) AS INTEGER);
  IF (TRIMESTRE_FLUXO = 0) THEN
    TRIMESTRE_FLUXO = 1;
  ELSE
    IF (UDF_MOD(MES_FLUXO, 3) > 0) THEN
      TRIMESTRE_FLUXO = TRIMESTRE_FLUXO + 1;

  /* QUADRIMESTRE FLUXO */
  QUADRIMESTRE_FLUXO = CAST((MES_FLUXO / 4) AS INTEGER);
  IF (QUADRIMESTRE_FLUXO = 0) THEN
    QUADRIMESTRE_FLUXO = 1;
  ELSE
    IF (UDF_MOD(MES_FLUXO, 4) > 0) THEN
      QUADRIMESTRE_FLUXO = QUADRIMESTRE_FLUXO + 1;

  /* SEMESTRE FLUXO */
  SEMESTRE_FLUXO = CAST((MES_FLUXO / 6) AS INTEGER);
  IF (SEMESTRE_FLUXO = 0) THEN
    QUADRIMESTRE_FLUXO = 1;
  ELSE
    IF (UDF_MOD(MES_FLUXO, 6) > 0) THEN
      SEMESTRE_FLUXO = SEMESTRE_FLUXO + 1;

  /* ANO FLUXO */
  ANO_FLUXO = EXTRACT(YEAR FROM DATA_FLUXO);

  /* STR SEMANA */
  TEMP_SEMANA = UDF_WEEKDAY(DATA_FLUXO);
  TEMP_DATA = DATA_FLUXO - TEMP_SEMANA;
  STR_SEMANA_FLUXO = UDF_PADL(EXTRACT(DAY FROM TEMP_DATA), '0', 2) || '/' ||
    UDF_PADL(EXTRACT(MONTH FROM TEMP_DATA), '0', 2) || '/' ||
    EXTRACT(YEAR FROM TEMP_DATA);
  TEMP_DATA = TEMP_DATA + 6;
  STR_SEMANA_FLUXO = STR_SEMANA_FLUXO || ' - ' ||
    UDF_PADL(EXTRACT(DAY FROM TEMP_DATA), '0', 2) || '/' ||
    UDF_PADL(EXTRACT(MONTH FROM TEMP_DATA), '0', 2) || '/' ||
    EXTRACT(YEAR FROM TEMP_DATA);

  /* STR MES */
  IF (MES_FLUXO = 1) THEN
    STR_MES_FLUXO = 'JANEIRO';
  ELSE IF (MES_FLUXO = 2) THEN
    STR_MES_FLUXO = 'FEVEREIRO';
  ELSE IF (MES_FLUXO = 3) THEN
    STR_MES_FLUXO = 'MARÇO';
  ELSE IF (MES_FLUXO = 4) THEN
    STR_MES_FLUXO = 'ABRIL';
  ELSE IF (MES_FLUXO = 5) THEN
    STR_MES_FLUXO = 'MAIO';
  ELSE IF (MES_FLUXO = 6) THEN
    STR_MES_FLUXO = 'JUNHO';
  ELSE IF (MES_FLUXO = 7) THEN
    STR_MES_FLUXO = 'JULHO';
  ELSE IF (MES_FLUXO = 8) THEN
    STR_MES_FLUXO = 'AGOSTO';
  ELSE IF (MES_FLUXO = 9) THEN
    STR_MES_FLUXO = 'SETEMBRO';
  ELSE IF (MES_FLUXO = 10) THEN
    STR_MES_FLUXO = 'OUTUBRO';
  ELSE IF (MES_FLUXO = 11) THEN
    STR_MES_FLUXO = 'NOVEMBRO';
  ELSE IF (MES_FLUXO = 12) THEN
    STR_MES_FLUXO = 'DEZEMBRO';

  /* STR BIMESTRE */
  IF (BIMESTRE_FLUXO = 1) THEN
    STR_BIMESTRE_FLUXO = 'JANEIRO - FEVEREIRO';
  ELSE IF (BIMESTRE_FLUXO = 2) THEN
    STR_BIMESTRE_FLUXO = 'MARÇO - ABRIL';
  ELSE IF (BIMESTRE_FLUXO = 3) THEN
    STR_BIMESTRE_FLUXO = 'MAIO - JUNHO';
  ELSE IF (BIMESTRE_FLUXO = 4) THEN
    STR_BIMESTRE_FLUXO = 'JULHO - AGOSTO';
  ELSE IF (BIMESTRE_FLUXO = 5) THEN
    STR_BIMESTRE_FLUXO = 'SETEMBRO - OUTUBRO';
  ELSE IF (BIMESTRE_FLUXO = 6) THEN
    STR_BIMESTRE_FLUXO = 'NOVEMBRO - DEZEMBRO';

  /* STR TRIMESTRE */
  IF (TRIMESTRE_FLUXO = 1) THEN
    STR_TRIMESTRE_FLUXO = 'JANEIRO - MARÇO';
  ELSE IF (TRIMESTRE_FLUXO = 2) THEN
    STR_TRIMESTRE_FLUXO = 'ABRIL - JUNHO';
  ELSE IF (TRIMESTRE_FLUXO = 3) THEN
    STR_TRIMESTRE_FLUXO = 'JULHO - SETEMBRO';
  ELSE IF (TRIMESTRE_FLUXO = 2) THEN
    STR_TRIMESTRE_FLUXO = 'OUTUBRO - DEZEMBRO';

  /* STR QUADRIMESTRE */
  IF (QUADRIMESTRE_FLUXO = 1) THEN
    STR_QUADRIMESTRE_FLUXO = 'JANEIRO - ABRIL';
  ELSE IF (QUADRIMESTRE_FLUXO = 2) THEN
    STR_QUADRIMESTRE_FLUXO = 'MAIO - AGOSTO';
  ELSE IF (QUADRIMESTRE_FLUXO = 3) THEN
    STR_QUADRIMESTRE_FLUXO = 'SETEMBRO - DEZEMBRO';

  /* STR SEMESTRE */
  IF (SEMESTRE_FLUXO = 1) THEN
    STR_SEMESTRE_FLUXO = 'JANEIRO - JUNHO';
  ELSE IF (SEMESTRE_FLUXO = 2) THEN
    STR_SEMESTRE_FLUXO = 'JULHO - DEZEMBRO';

  SUSPEND;

END
^

SET TERM ; ^

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DATADIA'
WHERE (RDB$FIELD_NAME = 'FECHA_DATA_FLUXO') AND
(RDB$RELATION_NAME = 'MOVIMENTOS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DATADIA'
WHERE (RDB$FIELD_NAME = 'CAD_DATA_FLUXO') AND
(RDB$RELATION_NAME = 'PAGAMENTOS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DATADIA'
WHERE (RDB$FIELD_NAME = 'VEN_DATA_FLUXO') AND
(RDB$RELATION_NAME = 'PAGAMENTOS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DATADIA'
WHERE (RDB$FIELD_NAME = 'PAG_DATA_FLUXO') AND
(RDB$RELATION_NAME = 'PAGAMENTOS');

COMMIT WORK;

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_BU4
ACTIVE BEFORE UPDATE POSITION 400
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  IF (NEW.DATAFECHAMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAFECHAMENTO)
      RETURNING_VALUES
        NEW.FECHA_DATA_FLUXO,
        DIA_FLUXO,
        NEW.FECHA_SEMANA_FLUXO,
        NEW.FECHA_MES_FLUXO,
        NEW.FECHA_BIMESTRE_FLUXO,
        NEW.FECHA_TRIMESTRE_FLUXO,
        NEW.FECHA_QUADRIMESTRE_FLUXO,
        NEW.FECHA_SEMESTRE_FLUXO,
        NEW.FECHA_ANO_FLUXO,
        NEW.FECHA_STR_SEMANA_FLUXO,
        NEW.FECHA_STR_MES_FLUXO,
        NEW.FECHA_STR_BIMESTRE_FLUXO,
        NEW.FECHA_STR_TRIMESTRE_FLUXO,
        NEW.FECHA_STR_QUADRIMESTRE_FLUXO,
        NEW.FECHA_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER PAGAMENTOS_BI100
ACTIVE BEFORE INSERT POSITION 100
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  /* VALOR POR EXTENSO */
  EXECUTE PROCEDURE MOEDAEXTENSO NEW.TOTAL_PAGO, NEW.CODEMPRESA
    RETURNING_VALUES NEW.EXTENSO;

  /* ANALISE DE DATAS - CADASTRO */
  IF (NEW.DATACADAST IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATACADAST)
      RETURNING_VALUES
        NEW.CAD_DATA_FLUXO,
        DIA_FLUXO,
        NEW.CAD_SEMANA_FLUXO,
        NEW.CAD_MES_FLUXO,
        NEW.CAD_BIMESTRE_FLUXO,
        NEW.CAD_TRIMESTRE_FLUXO,
        NEW.CAD_QUADRIMESTRE_FLUXO,
        NEW.CAD_SEMESTRE_FLUXO,
        NEW.CAD_ANO_FLUXO,
        NEW.CAD_STR_SEMANA_FLUXO,
        NEW.CAD_STR_MES_FLUXO,
        NEW.CAD_STR_BIMESTRE_FLUXO,
        NEW.CAD_STR_TRIMESTRE_FLUXO,
        NEW.CAD_STR_QUADRIMESTRE_FLUXO,
        NEW.CAD_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - VENCIMENTO */
  IF (NEW.DATAVENCIMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAVENCIMENTO)
      RETURNING_VALUES
        NEW.VEN_DATA_FLUXO,
        DIA_FLUXO,
        NEW.VEN_SEMANA_FLUXO,
        NEW.VEN_MES_FLUXO,
        NEW.VEN_BIMESTRE_FLUXO,
        NEW.VEN_TRIMESTRE_FLUXO,
        NEW.VEN_QUADRIMESTRE_FLUXO,
        NEW.VEN_SEMESTRE_FLUXO,
        NEW.VEN_ANO_FLUXO,
        NEW.VEN_STR_SEMANA_FLUXO,
        NEW.VEN_STR_MES_FLUXO,
        NEW.VEN_STR_BIMESTRE_FLUXO,
        NEW.VEN_STR_TRIMESTRE_FLUXO,
        NEW.VEN_STR_QUADRIMESTRE_FLUXO,
        NEW.VEN_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - PAGAMENTO */
  IF (NEW.DATAPAGO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAPAGO)
      RETURNING_VALUES
        NEW.PAG_DATA_FLUXO,
        DIA_FLUXO,
        NEW.PAG_SEMANA_FLUXO,
        NEW.PAG_MES_FLUXO,
        NEW.PAG_BIMESTRE_FLUXO,
        NEW.PAG_TRIMESTRE_FLUXO,
        NEW.PAG_QUADRIMESTRE_FLUXO,
        NEW.PAG_SEMESTRE_FLUXO,
        NEW.PAG_ANO_FLUXO,
        NEW.PAG_STR_SEMANA_FLUXO,
        NEW.PAG_STR_MES_FLUXO,
        NEW.PAG_STR_BIMESTRE_FLUXO,
        NEW.PAG_STR_TRIMESTRE_FLUXO,
        NEW.PAG_STR_QUADRIMESTRE_FLUXO,
        NEW.PAG_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER PAGAMENTOS_BU100
ACTIVE BEFORE UPDATE POSITION 100
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  /* STATUS */
  IF (NEW.PAGO = 0) THEN
   BEGIN
     IF (NEW.ES IN (3, 4)) THEN
       NEW.STATUS = 'LIXEIRA';
     ELSE
       NEW.STATUS = 'ABERTO';
   END ELSE
     NEW.STATUS = 'PAGO';

  /* ANALISE DE VALORES */
  IF (NEW.ES = 1) THEN
    NEW.VALOR_FLUXO = (NEW.TOTAL_PAGO * -1);

  IF (NEW.ES = 2) THEN
    NEW.VALOR_FLUXO = NEW.TOTAL_PAGO;

  /* VALOR POR EXTENSO */
  EXECUTE PROCEDURE MOEDAEXTENSO NEW.TOTAL_PAGO, NEW.CODEMPRESA
    RETURNING_VALUES NEW.EXTENSO;

  /* ANALISE DE DATAS - CADASTRO */
  IF (NEW.DATACADAST IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATACADAST)
      RETURNING_VALUES
        NEW.CAD_DATA_FLUXO,
        DIA_FLUXO,
        NEW.CAD_SEMANA_FLUXO,
        NEW.CAD_MES_FLUXO,
        NEW.CAD_BIMESTRE_FLUXO,
        NEW.CAD_TRIMESTRE_FLUXO,
        NEW.CAD_QUADRIMESTRE_FLUXO,
        NEW.CAD_SEMESTRE_FLUXO,
        NEW.CAD_ANO_FLUXO,
        NEW.CAD_STR_SEMANA_FLUXO,
        NEW.CAD_STR_MES_FLUXO,
        NEW.CAD_STR_BIMESTRE_FLUXO,
        NEW.CAD_STR_TRIMESTRE_FLUXO,
        NEW.CAD_STR_QUADRIMESTRE_FLUXO,
        NEW.CAD_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - VENCIMENTO */
  IF (NEW.DATAVENCIMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAVENCIMENTO)
      RETURNING_VALUES
        NEW.VEN_DATA_FLUXO,
        DIA_FLUXO,
        NEW.VEN_SEMANA_FLUXO,
        NEW.VEN_MES_FLUXO,
        NEW.VEN_BIMESTRE_FLUXO,
        NEW.VEN_TRIMESTRE_FLUXO,
        NEW.VEN_QUADRIMESTRE_FLUXO,
        NEW.VEN_SEMESTRE_FLUXO,
        NEW.VEN_ANO_FLUXO,
        NEW.VEN_STR_SEMANA_FLUXO,
        NEW.VEN_STR_MES_FLUXO,
        NEW.VEN_STR_BIMESTRE_FLUXO,
        NEW.VEN_STR_TRIMESTRE_FLUXO,
        NEW.VEN_STR_QUADRIMESTRE_FLUXO,
        NEW.VEN_STR_SEMESTRE_FLUXO;

  /* ANALISE DE DATAS - PAGAMENTO */
  IF (NEW.DATAPAGO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAPAGO)
      RETURNING_VALUES
        NEW.PAG_DATA_FLUXO,
        DIA_FLUXO,
        NEW.PAG_SEMANA_FLUXO,
        NEW.PAG_MES_FLUXO,
        NEW.PAG_BIMESTRE_FLUXO,
        NEW.PAG_TRIMESTRE_FLUXO,
        NEW.PAG_QUADRIMESTRE_FLUXO,
        NEW.PAG_SEMESTRE_FLUXO,
        NEW.PAG_ANO_FLUXO,
        NEW.PAG_STR_SEMANA_FLUXO,
        NEW.PAG_STR_MES_FLUXO,
        NEW.PAG_STR_BIMESTRE_FLUXO,
        NEW.PAG_STR_TRIMESTRE_FLUXO,
        NEW.PAG_STR_QUADRIMESTRE_FLUXO,
        NEW.PAG_STR_SEMESTRE_FLUXO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD
INACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;

  /* LINHA DO CLIENTE */
  SELECT
    CL.CODLINHA
  FROM
    CLIENTES CL
  WHERE
    CL.CODIGO = NEW.CODCLIENTE
  INTO
    NEW.CODLINHA;

  /* TERRITORIO DA OS */
  SELECT FIRST 1
    CE.TERRITORIO
  FROM
    CLI_EQUIP CE
  WHERE
    CE.CODCLIENTE = NEW.CODCLIENTE AND
    CE.CODMARCA = NEW.CODMARCA AND
    CE.CODMODELO = NEW.CODMODELO AND
    CE.SERIE = NEW.SERIE
  INTO
    NEW.TERRITORIO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
DECLARE VARIABLE TDATAINI TIMESTAMP;
DECLARE VARIABLE TDATAFIM TIMESTAMP;
BEGIN

   /* DATA DA ENTREGA */
   IF ((NEW.QUEM_RECEBEU IS NOT NULL) AND (OLD.QUEM_RECEBEU IS NULL)) THEN
     NEW.DATA_ENTREGA = CURRENT_TIMESTAMP;

   /* DATA DA AUTORIZAÇÃO */
   IF ((NEW.QUEM_AUTORIZOU IS NOT NULL) AND (OLD.QUEM_AUTORIZOU IS NULL)) THEN
     NEW.DATA_AUTORIZADO = CURRENT_TIMESTAMP;

   /* CONFIGURAÇÕES DO HISTÓRIO DE PAGAMENTOS */
   IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
    BEGIN
      SELECT
        CODNATUOPER
      FROM
        HISTORICOPAG
      WHERE
        CODIGO = NEW.CODHISTORICOPAG
      INTO
        NEW.NOTA_CODNATUOPER;
    END

   /* CONFIGURAÇÕES DA NATUREZA DE OPERAÇÃO */
   SELECT
     VENDA,
     ESTOQUE,
     ICMS,
     IPI
   FROM
     NATUOPER
   WHERE
     CODIGO = NEW.NOTA_CODNATUOPER
   INTO
     NEW.NO_VENDA,
     NEW.NO_ESTOQUE,
     NEW.NO_ICMS,
     NEW.NO_IPI;

   IF (NEW.TIPO = 1) THEN
    BEGIN

      IF (NEW.ES = 0) THEN
       BEGIN
         NEW.STATUS = 'ORC ABERTO';
         IF (NEW.AUTORIZADO = 'S') THEN
          BEGIN
            NEW.STATUS = 'ORC AUTORIZADO';
          END ELSE
          BEGIN
            IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
              NEW.STATUS = 'ORC NAO AUTO';
            IF ((NEW.RETORNO = 'S') AND (NEW.DATA_RETORNO IS NOT NULL)) THEN
              NEW.STATUS = 'ORC RETORNAR';
          END
       END

      IF (NEW.ES = 1) THEN
       BEGIN
         IF (NEW.FECHADO = 'S') THEN
            NEW.STATUS = 'COMPRA';
         ELSE
            NEW.STATUS = 'PED COMPRA';
       END

    END

   IF (NEW.TIPO = 2) THEN
    BEGIN
      NEW.STATUS = 'OS ABERTA';

      /* VERIFICO SE O TECNICO JÁ INICIOU */
      SELECT FIRST 1
        DATAINI,
        DATAFIM
      FROM
        OS_VENDER
      WHERE
        CODMOVIMENTO = NEW.CODIGO
      INTO
        :TDATAINI,
        :TDATAFIM;

      IF (TDATAINI IS NOT NULL) THEN
       BEGIN
         NEW.STATUS = 'OS INICIADA';

         IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
          BEGIN

            IF (NEW.AUTORIZADO = 'N') THEN
              NEW.STATUS = 'OS NAO AUTO';
            ELSE
              IF (TDATAFIM IS NULL) THEN
                NEW.STATUS = 'OS AUTORIZADA';
              ELSE
                NEW.STATUS = 'OS CONCLUIDA';
          END

         IF (NEW.DATA_ENTREGA IS NOT NULL) THEN
           NEW.STATUS = 'OS ENTREGUE';

       END
    END

   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÇÃO';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* VERIFICO O NUMERADOR */
   EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
     NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

   /* CALCULAR IMPOSTOS */
   IF ((NEW.ES = 2)                  AND
       (NEW.TIPO IN (3, 6))          AND
       (OLD.TIPO IN (2, 5)))         THEN
    BEGIN
      /* TOTAL ICMS */
      EXECUTE PROCEDURE CALC_ICMS(NEW.CODIGO)
        RETURNING_VALUES NEW.VALOR_ICMS, NEW.VALOR_IPI_PRODUTOS,
          NEW.NOTA_BASEICMS;
      IF (NEW.NO_ICMS = 'N') THEN
        NEW.VALOR_ICMS = 0;
      IF (NEW.NO_IPI = 'N') THEN
        NEW.VALOR_IPI_PRODUTOS = 0;
      IF (NEW.NOTA_BASEICMS IS NULL) THEN
        NEW.NOTA_BASEICMS = 0;
    END

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';

      NEW.FECHADO = 'S';

      IF ((UDF_TRIM(NEW.USUARIOFECHAMENTO) = '') OR (NEW.USUARIOFECHAMENTO IS NULL)) THEN
        NEW.USUARIOFECHAMENTO = USER;

      /* VINCULAR SERIAL NA VENDA FECHADA */
      IF (NEW.TIPO = 6) THEN
        EXECUTE PROCEDURE VINCULO_SERIE NEW.CODIGO
          RETURNING_VALUES NEW.SERIE;

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END
^

SET TERM ; ^


INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (372, CURRENT_TIMESTAMP);
COMMIT;

