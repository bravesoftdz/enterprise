/*
** BUG DO SUMISSO DO NUMERO DA NOTA NOS ESTORNOS DO FINANCEIRO
*/

SET TERM ^ ;

ALTER PROCEDURE FINANC_ESTORNO (
    CODIGO INTEGER,
    CODUSUARIO INTEGER)
AS
DECLARE VARIABLE PAGO INTEGER;
DECLARE VARIABLE TEMP_CODMOVIMENTO INTEGER;
DECLARE VARIABLE TEMP_NUMERO INTEGER;
DECLARE VARIABLE TEMP_DESCRICAO VARCHAR(40);
DECLARE VARIABLE TEMP_ES INTEGER;
DECLARE VARIABLE TEMP_VALOR NUMERIC(9,2);
DECLARE VARIABLE TEMP_CODDOCUMENTO INTEGER;
DECLARE VARIABLE TEMP_INFODOC VARCHAR(50);
DECLARE VARIABLE TEMP_ARQUIVO VARCHAR(50);
DECLARE VARIABLE TEMP_HISTORICO VARCHAR(1024);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_MULTA_JUROS NUMERIC(9,2);
DECLARE VARIABLE TEMP_DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE TEMP_STATUS VARCHAR(30);
DECLARE VARIABLE TEMP_CODCONTA INTEGER;
DECLARE VARIABLE TEMP_CODEMPRESA INTEGER;
DECLARE VARIABLE TEMP_TIPO_PAG CHAR(1);
DECLARE VARIABLE TEMP_TIPO_DOC CHAR(1);
DECLARE VARIABLE TEMP_CH_BANCO INTEGER;
DECLARE VARIABLE TEMP_CH_AGENCIA INTEGER;
DECLARE VARIABLE TEMP_CH_CONTA INTEGER;
DECLARE VARIABLE TEMP_CH_SERIE VARCHAR(10);
DECLARE VARIABLE TEMP_CH_NUMERO INTEGER;
DECLARE VARIABLE TEMP_CODCENTRO INTEGER;
DECLARE VARIABLE TEMP_CODCLIENTE INTEGER;
DECLARE VARIABLE TEMP_CODPLANO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_DESCRICAO2 VARCHAR(40);
DECLARE VARIABLE TEMP_CODESTORNO INTEGER;
DECLARE VARIABLE TEMP_CODRELANC INTEGER;
DECLARE VARIABLE TEMP_CODANTIGO INTEGER;
DECLARE VARIABLE TEMP_NOMEUSUARIO VARCHAR(30);
DECLARE VARIABLE TEMP_NUMDOC INTEGER;
DECLARE VARIABLE TEMP_TIPODOC CHAR(3);
DECLARE VARIABLE TEMP_DATADOC DATE;
DECLARE VARIABLE TIPOMOV INTEGER;
BEGIN

  /* VERIFICO SE A CONTA FOI PAGA */
  SELECT
    PA.PAGO,
    PA.ES,
    MO.TIPO
  FROM
    PAGAMENTOS PA
    JOIN MOVIMENTOS MO ON
      (MO.CODIGO = PA.CODMOVIMENTO)
  WHERE
    PA.CODIGO = :CODIGO
  INTO
    :PAGO,
    :TEMP_ES,
    :TIPOMOV;

  /* NOME DO USUARIO */
  SELECT
    NOMEUSER
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODUSUARIO
  INTO
    TEMP_NOMEUSUARIO;

  IF (TEMP_ES > 2) THEN
    EXIT;

  IF (PAGO = 1) THEN
   BEGIN

     /* POSSO ESTORNAR */
     SELECT
       CODMOVIMENTO,
       NUMERO,
       DESCRICAO,
       ES,
       VALOR,
       CODDOCUMENTO,
       INFODOC,
       ARQUIVO,
       HISTORICO,
       DESCONTO,
       MULTA_JUROS,
       DATAVENCIMENTO,
       STATUS,
       CODCONTA,
       CODEMPRESA,
       TIPO_PAG,
       TIPO_DOC,
       CH_BANCO,
       CH_AGENCIA,
       CH_CONTA,
       CH_SERIE,
       CH_NUMERO,
       CODCENTRO,
       CODCLIENTE,
       CODPLANO,
       CODANTIGO,
       NUMDOC,
       TIPODOC,
       DATADOC
     FROM
       PAGAMENTOS
     WHERE
       CODIGO = :CODIGO
     INTO
       :TEMP_CODMOVIMENTO,
       :TEMP_NUMERO,
       :TEMP_DESCRICAO,
       :TEMP_ES,
       :TEMP_VALOR,
       :TEMP_CODDOCUMENTO,
       :TEMP_INFODOC,
       :TEMP_ARQUIVO,
       :TEMP_HISTORICO,
       :TEMP_DESCONTO,
       :TEMP_MULTA_JUROS,
       :TEMP_DATAVENCIMENTO,
       :TEMP_STATUS,
       :TEMP_CODCONTA,
       :TEMP_CODEMPRESA,
       :TEMP_TIPO_PAG,
       :TEMP_TIPO_DOC,
       :TEMP_CH_BANCO,
       :TEMP_CH_AGENCIA,
       :TEMP_CH_CONTA,
       :TEMP_CH_SERIE,
       :TEMP_CH_NUMERO,
       :TEMP_CODCENTRO,
       :TEMP_CODCLIENTE,
       :TEMP_CODPLANO,
       :TEMP_CODANTIGO,
       :TEMP_NUMDOC, 
       :TEMP_TIPODOC, 
       :TEMP_DATADOC;

     /* LANCAMENTO CONTRA */
     IF (TEMP_ES = 1) THEN
       TEMP_ES = 2;
     ELSE
       TEMP_ES = 1;

     /* PEGO O CODIGO DO PROXIMO LANCAMENTO */
     EXECUTE PROCEDURE SEQ_OBTER('PAGAMENTOS')
       RETURNING_VALUES :TEMP_CODIGO;

     TEMP_CODESTORNO = TEMP_CODIGO;
     TEMP_DESCRICAO2 = 'EST ' || UDF_LEFT(TEMP_DESCRICAO, 36);

     INSERT INTO
       PAGAMENTOS(
         CODIGO,
         CODMOVIMENTO,
         NUMERO,
         DESCRICAO,
         ES,
         VALOR,
         CODDOCUMENTO,
         INFODOC,
         ARQUIVO,
         HISTORICO,
         DESCONTO,
         MULTA_JUROS,
         DATAVENCIMENTO,
         STATUS,
         CODCONTA,
         CODEMPRESA,
         TIPO_PAG,
         TIPO_DOC,
         CH_BANCO,
         CH_AGENCIA,
         CH_CONTA,
         CH_SERIE,
         CH_NUMERO,
         CODCENTRO,
         CODCLIENTE,
         CODPLANO,
         PAGO,
         CODORIGEM,
         CODANTIGO,
         NOMEUSUARIO,
         NUMDOC,
         TIPODOC,
         DATADOC)
       VALUES (
         :TEMP_CODIGO,
         :TEMP_CODMOVIMENTO,
         :TEMP_NUMERO,
         :TEMP_DESCRICAO2,
         :TEMP_ES,
         :TEMP_VALOR,
         :TEMP_CODDOCUMENTO,
         :TEMP_INFODOC,
         :TEMP_ARQUIVO,
         :TEMP_HISTORICO,
         :TEMP_DESCONTO,
         :TEMP_MULTA_JUROS,
         :TEMP_DATAVENCIMENTO,
         :TEMP_STATUS,
         :TEMP_CODCONTA,
         :TEMP_CODEMPRESA,
         :TEMP_TIPO_PAG,
         :TEMP_TIPO_DOC,
         :TEMP_CH_BANCO,
         :TEMP_CH_AGENCIA,
         :TEMP_CH_CONTA,
         :TEMP_CH_SERIE,
         :TEMP_CH_NUMERO,
         :TEMP_CODCENTRO,
         :TEMP_CODCLIENTE,
         :TEMP_CODPLANO,
         1,
         :CODIGO,
         :TEMP_CODANTIGO,
         :TEMP_NOMEUSUARIO,
         :TEMP_NUMDOC,
         :TEMP_TIPODOC,
         :TEMP_DATADOC);

     /* REABRO O LANÇAMENTO - EXCETO SE FOR ESTORNO */
     IF (TIPOMOV <> 9) THEN
      BEGIN

        /* LANCAMENTO RESSUCITADO */
        IF (TEMP_ES = 1) THEN
          TEMP_ES = 2;
        ELSE
          TEMP_ES = 1;

        /* PEGO O CODIGO DO PROXIMO LANCAMENTO */
        EXECUTE PROCEDURE SEQ_OBTER('PAGAMENTOS')
          RETURNING_VALUES :TEMP_CODIGO;

        TEMP_CODRELANC = TEMP_CODIGO;

        INSERT INTO
          PAGAMENTOS(
            CODIGO,
            CODMOVIMENTO,
            NUMERO,
            DESCRICAO,
            ES,
            VALOR,
            CODDOCUMENTO,
            INFODOC,
            ARQUIVO,
            HISTORICO,
            DESCONTO,
            MULTA_JUROS,
            DATAVENCIMENTO,
            STATUS,
            CODCONTA,
            CODEMPRESA,
            TIPO_PAG,
            TIPO_DOC,
            CH_BANCO,
            CH_AGENCIA,
            CH_CONTA,
            CH_SERIE,
            CH_NUMERO,
            CODCENTRO,
            CODCLIENTE,
            CODPLANO,
            PAGO,
            CODORIGEM,
            CODANTIGO,
            NUMDOC,
            TIPODOC,
            DATADOC)
          VALUES (
            :TEMP_CODIGO,
            :TEMP_CODMOVIMENTO,
            :TEMP_NUMERO,
            :TEMP_DESCRICAO,
            :TEMP_ES,
            :TEMP_VALOR,
            :TEMP_CODDOCUMENTO,
            :TEMP_INFODOC,
            :TEMP_ARQUIVO,
            :TEMP_HISTORICO,
            :TEMP_DESCONTO,
            :TEMP_MULTA_JUROS,
            :TEMP_DATAVENCIMENTO,
            :TEMP_STATUS,
            :TEMP_CODCONTA,
            :TEMP_CODEMPRESA,
            :TEMP_TIPO_PAG,
            :TEMP_TIPO_DOC,
            :TEMP_CH_BANCO,
            :TEMP_CH_AGENCIA,
            :TEMP_CH_CONTA,
            :TEMP_CH_SERIE,
            :TEMP_CH_NUMERO,
            :TEMP_CODCENTRO,
            :TEMP_CODCLIENTE,
            :TEMP_CODPLANO,
            0,
            :CODIGO,
            :TEMP_CODANTIGO,
            :TEMP_NUMDOC,
            :TEMP_TIPODOC,
            :TEMP_DATADOC);

      END

     /* GRAVO DADOS DO ESTORNO */
     UPDATE
       PAGAMENTOS
     SET
       ESTORNO_CODESTORNO = :TEMP_CODESTORNO,
       ESTORNO_CODRELANC  = :TEMP_CODRELANC,
       ESTORNO_CODUSUARIO = :CODUSUARIO,
       ESTORNO_DATA       = CURRENT_TIMESTAMP
     WHERE
       CODIGO = :CODIGO;

   END ELSE
   BEGIN

     /* ES */
     SELECT
       ES
     FROM
       PAGAMENTOS
     WHERE
       CODIGO = :CODIGO
     INTO
       :TEMP_ES;

     /* LANCAMENTO DE LIXEIRA */
     IF (TEMP_ES = 1) THEN
       TEMP_ES = 3;
     ELSE
       TEMP_ES = 4;

     /* GRAVO DADOS DO ESTORNO */
     UPDATE
       PAGAMENTOS
     SET
       ES = :TEMP_ES,
       ESTORNO_CODUSUARIO = :CODUSUARIO,
       ESTORNO_DATA       = CURRENT_TIMESTAMP
     WHERE
       CODIGO = :CODIGO;

   END

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     /* GERAÇÃO INTELIGENTE DAS PARCELAS */
     IF (NEW.TIPO IN (0, 1, 2, 5)) THEN
      BEGIN

        IF ((NEW.CODCLIENTE <> OLD.CODCLIENTE) OR
            (NEW.CONDICAO <> OLD.CONDICAO)) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
        ELSE IF (NEW.NOTA_VALOR_TOTAL <> OLD.NOTA_VALOR_TOTAL) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 1);

      END

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE COMISSAO_CALC(NEW.CODIGO);

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

        EXECUTE PROCEDURE CADASTRA_EQUIPAMENTO(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÇÃO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

           /* EXCLUO O ESTOQUE */
           DELETE FROM
             INDIVIDUAIS
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (431, CURRENT_TIMESTAMP);
COMMIT;
