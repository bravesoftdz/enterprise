/*
** BUG DA BAIXA EM BASES ANTIGAS
*/

SET TERM ^ ;

CREATE OR ALTER PROCEDURE PARSER_PAGAMENTOS (
    MOVCOM VARCHAR(254))
RETURNS (
    CODIGO INTEGER,
    CODMOVIMENTO INTEGER,
    NUMERO INTEGER)
AS
DECLARE VARIABLE TEMP VARCHAR(254);
DECLARE VARIABLE POS INTEGER;
BEGIN

  MOVCOM = UDF_TRIM(MOVCOM) || ' ';

  /* PROCESSAMENTO DAS BAIXAS MULTIPLAS */
  WHILE (UDF_POS(' ', MOVCOM) > 0) DO
   BEGIN

     /* POSIÇÃO DO ESPAÇO */
     POS = UDF_POS(' ', MOVCOM);

     /* PARTE DO TODO */
     TEMP = UDF_COPY(MOVCOM, 1, POS);
     TEMP = UDF_TRIM(TEMP);

     /* RESTANTE */
     MOVCOM = UDF_COPY(MOVCOM, POS + 1, UDF_LEN(MOVCOM) - POS);

     /* ZERO OS RESULTADOS */
     CODMOVIMENTO = NULL;
     NUMERO = NULL;
     CODIGO = NULL;

     /* CODIGO OU MOVIMENTO */
     IF (UDF_POS('/', TEMP) > 0) THEN
      BEGIN

        /* MOVIMENTO E NUMERO */
        POS = UDF_POS('/', TEMP);
        CODMOVIMENTO = CAST(UDF_COPY(TEMP, 1, POS - 1) AS INTEGER);
        NUMERO = CAST(UDF_COPY(TEMP, POS + 1, 2) AS INTEGER);

      END ELSE
      BEGIN

        /* SOMENTE O CODIGO DO PAGAMENTO */
        CODIGO = CAST(TEMP AS INTEGER);

      END

     SUSPEND;

   END
END
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE PARSER_PAGAMENTOS TO PUBLIC;

SET TERM ^ ;

CREATE OR ALTER PROCEDURE BAIXAMULT (
    CODCLIENTE INTEGER,
    MOVCOM VARCHAR(254),
    ACRESCIMOS NUMERIC(18,2),
    DESCONTOS NUMERIC(18,2),
    CODCONTA INTEGER,
    USUARIO VARCHAR(30))
AS
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE ACRESCIMO_PARCIAL INTEGER;
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE INFODOC VARCHAR(50);
DECLARE VARIABLE TOTAL_PAGO NUMERIC(9,2);
DECLARE VARIABLE CODDOCUMENTO INTEGER;
BEGIN

  /* USUARIO */
  IF ((USUARIO IS NULL) OR (USUARIO = '')) THEN
    USUARIO = USER;

  /* NUMERO DE BAIXAS */
  SELECT
    COUNT(*)
  FROM
    PARSER_PAGAMENTOS(:MOVCOM)
  INTO
    :N;

  /* SE HOUVER ACRESCIMOS */
  ACRESCIMO_PARCIAL = 0;
  IF (ACRESCIMOS > 0) THEN
    ACRESCIMO_PARCIAL = ACRESCIMOS / N;

  /* PROCESSO AS BAIXAS */
  FOR
  SELECT
    CODIGO,
    CODMOVIMENTO,
    NUMERO
  FROM
    PARSER_PAGAMENTOS(:MOVCOM)
  INTO
    :CODIGO,
    :CODMOVIMENTO,
    :NUMERO
  DO
  BEGIN

    IF (CODMOVIMENTO IS NULL) THEN
     BEGIN

       SELECT
         CODIGO,
         INFODOC,
         TOTAL_PAGO,
         CODDOCUMENTO
       FROM
         PAGAMENTOS
       WHERE
         CODIGO = :CODIGO AND
         PAGO = 0 AND
         ES IN (1, 2) AND
         CODCLIENTE = :CODCLIENTE
       INTO
         :CODPAG,
         :INFODOC,
         :TOTAL_PAGO,
         :CODDOCUMENTO;

     END ELSE
     BEGIN

       SELECT
         CODIGO,
         INFODOC,
         TOTAL_PAGO,
         CODDOCUMENTO
       FROM
         PAGAMENTOS
       WHERE
         CODMOVIMENTO = :CODMOVIMENTO AND
         NUMERO = :NUMERO AND
         PAGO = 0 AND
         ES IN (1, 2) AND
         CODCLIENTE = :CODCLIENTE
       INTO
         :CODPAG,
         :INFODOC,
         :TOTAL_PAGO,
         :CODDOCUMENTO;

     END

    /* BAIXA TOTAL OU PARCIAL ?? */
    IF ((N = 1) AND (DESCONTOS > 0)) THEN
     BEGIN

       /* BAIXA PARCIAL */
       EXECUTE PROCEDURE BAIXA(
         :CODPAG,
         :ACRESCIMO_PARCIAL,
         :TOTAL_PAGO - :DESCONTOS,
         'P',
         :CODCONTA,
         :CODDOCUMENTO,
         :INFODOC,
         :USUARIO);

     END ELSE
     BEGIN

       /* BAIXA TOTAL */
       EXECUTE PROCEDURE BAIXA(
         :CODPAG,
         :ACRESCIMO_PARCIAL,
         0,
         'T',
         :CODCONTA,
         :CODDOCUMENTO,
         :INFODOC,
         :USUARIO);

     END
  END
END
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE BAIXAMULT TO PUBLIC;

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (420, CURRENT_TIMESTAMP);
COMMIT;
