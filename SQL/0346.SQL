/*
** NOVOS CAMPOS PARA FATURAR POR CAIXAS E CLASSIFICACAO FISCAL
*/

ALTER TABLE PRODUTOS ADD CLASSFISCAL STR20;

ALTER TABLE PRODUTOS ADD CAIXA_ITENS INTEIRO;

SET TERM ^ ;

ALTER TRIGGER PRODUTOS_MARGEM_INS
ACTIVE BEFORE INSERT POSITION 200
AS
BEGIN

  IF (NEW.CAIXA_ITENS IS NULL) THEN
    NEW.CAIXA_ITENS = 1;

  IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA = 0)) THEN
   BEGIN

    NEW.MARGEM = 0;

   END ELSE
   BEGIN

     IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA > 0)) THEN
      BEGIN

        NEW.MARGEM = NEW.PRECOVENDA * 100;

      END ELSE
      BEGIN

        NEW.MARGEM = (100 - ((NEW.PRECOVENDA * 100) / NEW.PRECOCUSTO)) * -1;

      END
   END

   IF (NEW.CODSERVICO IS NULL) THEN
    BEGIN

       NEW.PRECOSERVICO = 0;
       NEW.PRECOTOTAL   = NEW.PRECOVENDA;

    END ELSE NEW.PRECOTOTAL = NEW.PRECOSERVICO + NEW.PRECOVENDA;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER PRODUTOS_MARGEM_UPD
ACTIVE BEFORE UPDATE POSITION 200
AS
BEGIN

  IF (NEW.CAIXA_ITENS IS NULL) THEN
    NEW.CAIXA_ITENS = 1;

  IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA = 0)) THEN
   BEGIN

    NEW.MARGEM = 0;

   END ELSE
   BEGIN

     IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA > 0)) THEN
      BEGIN

        NEW.MARGEM = NEW.PRECOVENDA * 100;

      END ELSE
      BEGIN

        NEW.MARGEM = (100 - ((NEW.PRECOVENDA * 100) / NEW.PRECOCUSTO)) * -1;

      END
   END

   IF (NEW.CODSERVICO IS NULL) THEN
    BEGIN

       NEW.PRECOSERVICO = 0;
       NEW.PRECOTOTAL   = NEW.PRECOVENDA;

    END ELSE NEW.PRECOTOTAL = NEW.PRECOSERVICO + NEW.PRECOVENDA;

END

^

SET TERM ; ^

ALTER TABLE HISTORICOPAG ADD FATURA_CAIXAS SIMNAO;

UPDATE HISTORICOPAG SET FATURA_CAIXAS = 'N';

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAPRO (
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(9,2),
    IPI NUMERIC(9,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    CLASSFISCAL VARCHAR(20))
AS
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE XIPI CHAR(1);
DECLARE VARIABLE FATURA_CAIXAS CHAR(1);
DECLARE VARIABLE CAIXA_ITENS INTEGER;
BEGIN
  /* VERIFICO SE EH COMPRA OU VENDA */
  SELECT
    ES
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ES;

  IF (ES = 1) THEN
   BEGIN

     /* COMPRA */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       'N/F',
       TI.VALOR_UNITARIO,
       TI.ICMSCOMPRA,
       TI.DESCONTO,
       TI.SITTRIBU,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA
     FROM
       TEMPITENS TI
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = TI.CODPRODUTO )
     WHERE
       TI.CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :SERIE,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       IF (SERIE <> 'N/F') THEN
         DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
       ELSE
         DESCRICAO2 = DESCRICAO1;

       VALOR_ITEM = VALOR_VENDA - DESCONTO;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       SUSPEND;

    END

   END ELSE
   BEGIN

     /* VERIFICO SE CORTO IPI */
     SELECT
       NA.IPI
     FROM
       NATUOPER NA
       JOIN MOVIMENTOS MO ON
         (MO.NOTA_CODNATUOPER = NA.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :XIPI;

     /* VERIFICO SE VAI FATURAR POR CAIXAS */
     SELECT
       HG.FATURA_CAIXAS
     FROM
       HISTORICOPAG HG
       JOIN MOVIMENTOS MO ON
         (MO.CODHISTORICOPAG = HG.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :FATURA_CAIXAS;

     /* VENDA */
     FOR
     SELECT
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.CAIXA_ITENS,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       OP.NOME,
       PL.NOME,
       SUM(ID.QUANTIDADE),
       SUM(ID.VALOR_PAGO),
       SUM(ID.VALOR_ICMS)
     FROM
       INDIVIDUAIS ID
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = ID.CODPRODUTO )
       LEFT JOIN TEMPITENS TI ON
         ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
           TI.CODPRODUTO   = ID.CODPRODUTO    AND
           TI.CODIGO       = ID.CODITEM )
       LEFT JOIN OPERADORAS OP ON
         ( OP.CODIGO = ID.CODOPERADORA )
       LEFT JOIN PLANOS PL ON
         ( PL.CODIGO = ID.CODPLANO AND
           PL.CODOPERADORA = ID.CODOPERADORA )
     WHERE
       ID.CODMOVSAIDA = :CODMOVIMENTO AND
       ID.VENDIDO = 'S' AND
       ID.PS = 'P'
     GROUP BY
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.CAIXA_ITENS,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       OP.NOME,
       PL.NOME
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :CAIXA_ITENS,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :IPI,
       :LINHA,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :OPERADORA,
       :PLANO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       /* VERIFICO SE O SERIE2 CONTEM DADOS E SERIE NAO, MANDO SERIE2 */
       IF ((UDF_TRIM(SERIE) = 'N/F') OR (UDF_TRIM(SERIE) = '')) THEN
         IF (UDF_TRIM(SERIE2) > '') THEN
           SERIE = SERIE2;

       IF (SERIE <> 'N/F') THEN
         DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
       ELSE
         DESCRICAO2 = DESCRICAO1;

       IF (FATURA_CAIXAS = 'S') THEN
        BEGIN
          UNIDADE = 'CX';
          QUANTIDADE = QUANTIDADE / CAIXA_ITENS;
          VALOR_VENDA = VALOR_VENDA * CAIXA_ITENS;
          DESCONTO = DESCONTO * CAIXA_ITENS;
        END

       VALOR_ITEM = VALOR_VENDA - DESCONTO;

       IF (XIPI = 'N') THEN
         IPI = NULL;

       SUSPEND;

     END
   END
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAITENS(
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(9,2),
    IPI NUMERIC(9,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    ATIVACAO CHAR(1),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    VALOR_CUSTO NUMERIC(9,2),
    CLASSFISCAL VARCHAR(20))
AS
DECLARE VARIABLE ESMOV INTEGER;
DECLARE VARIABLE TIPOMOV INTEGER;
BEGIN

  SELECT
    ES,
    TIPO
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ESMOV,
    :TIPOMOV;

  IF ((TIPOMOV = 9) OR ((ESMOV = 0) AND (TIPOMOV = 1))) THEN
   BEGIN

     /* ITENS ESTORNADOS OU DE ORÇAMENTO */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.DESCRICAO,
       TI.SERIE,
       TI.SERIE2,
       TI.VALOR_UNITARIO,
       TI.ICMSVENDA,
       TI.DESCONTO,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA,
       TI.SITTRIBU,
       PO.UNIDADE,
       PO.ATIVACAO,
       (TI.VALOR_UNITARIO - TI.DESCONTO),
       TI.IPI,
       PO.PRECOCUSTO
     FROM
       TEMPITENS TI
       JOIN PRODUTOS PO ON
        (PO.CODIGO = TI.CODPRODUTO)
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :ATIVACAO,
       :VALOR_ITEM,
       :IPI,
       :VALOR_CUSTO
     DO
     BEGIN

       /* TRATAMENTO DA SERIE */
       IF ((UDF_TRIM(SERIE) <> 'N/F') AND (UDF_TRIM(SERIE) > '')) THEN
        BEGIN
          DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
        BEGIN
          IF (UDF_TRIM(SERIE2) > '') THEN
           BEGIN
             DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE2);
           END ELSE
             DESCRICAO2 = UDF_TRIM(DESCRICAO1);
        END

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       CLASSFISCAL = NULL;

       SUSPEND;

     END

   END ELSE
   BEGIN

     /* PRODUTOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       UNIDADE,
       VALOR_ITEM,
       IPI,
       LINHA,
       OPERADORA,
       PLANO,
       'N',
       CONTRATO,
       VOUCHER,
       TIPOATIVACAO,
       CLASSFISCAL
     FROM
       REL_NOTAPRO(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :LINHA,
       :OPERADORA,
       :PLANO,
       :ATIVACAO,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :CLASSFISCAL
     DO
     BEGIN

       VALOR_CUSTO = 0;
       SUSPEND;

     END

     /* SERVIÇOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       'SE',
       VALOR_ITEM,
       0 AS IPI,
       ATIVACAO
     FROM
       REL_NOTASER(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :ATIVACAO
     DO
     BEGIN

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       VALOR_CUSTO = 0;
       CLASSFISCAL = NULL;
       SUSPEND;

     END

   END
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTADUP (
    CODMOVIMENTO INTEGER)
RETURNS (
    MOVIMENTO INTEGER,
    NUMERO SMALLINT,
    DESCRICAO VARCHAR(40),
    DATACADAST TIMESTAMP,
    VALOR NUMERIC(9,2),
    DATAVENCIMENTO TIMESTAMP,
    CODIGO INTEGER,
    DOCUMENTO VARCHAR(30),
    CLI_NOME VARCHAR(40),
    CLI_LOGRADOURO VARCHAR(40),
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR(40),
    CLI_BAIRRO VARCHAR(60),
    CLI_CEP VARCHAR(10),
    CLI_CIDADE VARCHAR(60),
    CLI_ESTADO VARCHAR(2),
    CLI_FONE VARCHAR(20),
    CLI_FAX VARCHAR(20),
    CLI_EMAIL VARCHAR(50),
    CLI_RGIE VARCHAR(20),
    CLI_CPFCGC VARCHAR(20),
    CODCLIENTE INTEGER,
    DATAPAGO TIMESTAMP,
    NOMEUSUARIO VARCHAR(30),
    DESCONTO NUMERIC(9,2),
    MULTA_JUROS NUMERIC(9,2),
    TOTAL_PAGO NUMERIC(9,2),
    INFODOC VARCHAR(50),
    EXTENSO VARCHAR(254),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(40),
    EMPRESA_RAZAOSOCIAL VARCHAR(50),
    EMPRESA_CNPJ VARCHAR(20),
    EMPRESA_IE VARCHAR(20),
    EMPRESA_LOGRADOURO VARCHAR(60),
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR(40),
    EMPRESA_BAIRRO VARCHAR(60),
    EMPRESA_CIDADE VARCHAR(60),
    EMPRESA_ESTADO CHAR(2),
    EMPRESA_CEP VARCHAR(9),
    EMPRESA_FONE VARCHAR(20),
    NOTA_NUMERO INTEGER,
    NOTA_DATAEMISSAO TIMESTAMP)
AS
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE TEMP_PESSOAFISICA CHAR(1);
DECLARE VARIABLE TEMP_RAZAOSOCIAL VARCHAR(40);
DECLARE VARIABLE TEMP_IE VARCHAR(20);
DECLARE VARIABLE TEMP_CGC VARCHAR(20);
BEGIN
   FOR
   SELECT
     CODIGO,
     NUMERO,
     DESCRICAO,
     DATACADAST,
     VALOR,
     DATAVENCIMENTO,
     CODDOCUMENTO,
     DATAPAGO,
     NOMEUSUARIO,
     DESCONTO,
     MULTA_JUROS,
     TOTAL_PAGO,
     INFODOC,
     CODEMPRESA
   FROM
     PAGAMENTOS
   WHERE
     CODMOVIMENTO = :CODMOVIMENTO AND
     ES = 2
   INTO
     :CODIGO,
     :NUMERO,
     :DESCRICAO,
     :DATACADAST,
     :VALOR,
     :DATAVENCIMENTO,
     :CODDOCUMENTO,
     :DATAPAGO,
     :NOMEUSUARIO,
     :DESCONTO,
     :MULTA_JUROS,
     :TOTAL_PAGO,
     :INFODOC,
     :CODEMPRESA
   DO
   BEGIN
     MOVIMENTO = CODMOVIMENTO;
     /* PEGO O DOCUMENTO */
     SELECT
       DOCUMENTO
     FROM
       DOCUMENTOS
     WHERE
       CODIGO = :CODDOCUMENTO
     INTO
       :DOCUMENTO;

     /* CODIGO DO CLIENTE */
     SELECT
       CODCLIENTE,
       NOTA_NUMERO,
       NOTA_DATAEMISSAO
     FROM
       MOVIMENTOS
     WHERE
       CODIGO = :CODMOVIMENTO
     INTO
       :CODCLIENTE,
       :NOTA_NUMERO,
       :NOTA_DATAEMISSAO;

     /* DADOS DO CLIENTE */
     SELECT
       CL.NOME,
       UDF_LEFT(CL.RAZAOSOCIAL, 40),
       CL.PESSOAFISICA,
       CL.NUMERO,
       CL.COMPLEMENTO,
       CL.ESTADO,
       CL.FONE,
       CL.FAX,
       CL.EMAIL,
       CL.RG,
       CL.CPF,
       CL.IE,
       CL.CGC,
       LO.LOGRADOURO,
       BA.BAIRRO,
       CI.CIDADE,
       LO.CEP
     FROM
       CLIENTES CL
       LEFT JOIN LOGRADOUROS LO ON
         ( LO.CODIGO = CL.LOCALIZACAO AND
           LO.BAIRRO = CL.BAIRRO AND
           LO.CIDADE = CL.CIDADE AND
           LO.ESTADO = CL.ESTADO )
       LEFT JOIN BAIRROS BA ON
         ( BA.CODIGO = CL.BAIRRO AND
           BA.CIDADE = CL.CIDADE AND
           BA.ESTADO = CL.ESTADO )
       LEFT JOIN CIDADES CI ON
         ( CI.CODIGO = CL.CIDADE AND
           CI.ESTADO = CL.ESTADO )
     WHERE
       CL.CODIGO = :CODCLIENTE
     INTO
       :CLI_NOME,
       :TEMP_RAZAOSOCIAL,
       :TEMP_PESSOAFISICA,
       :CLI_NUMERO,
       :CLI_COMPLEMENTO,
       :CLI_ESTADO,
       :CLI_FONE,
       :CLI_FAX,
       :CLI_EMAIL,
       :CLI_RGIE,
       :CLI_CPFCGC,
       :TEMP_IE,
       :TEMP_CGC,
       :CLI_LOGRADOURO,
       :CLI_BAIRRO,
       :CLI_CIDADE,
       :CLI_CEP;
     IF ( TEMP_PESSOAFISICA = 'J' ) THEN
      BEGIN
       CLI_NOME   = TEMP_RAZAOSOCIAL;
       CLI_RGIE   = TEMP_IE;
       CLI_CPFCGC = TEMP_CGC;
      END
     /* DADOS DA EMPRESA */
     SELECT
       CL.NOME,
       CL.RAZAOSOCIAL,
       CL.CGC,
       CL.IE,
       CL.LOGRADOURO,
       CL.NUMERO,
       CL.COMPLEMENTO,
       CL.BAIRRO,
       CL.CIDADE,
       CL.ESTADO,
       CL.CEP,
       CL.FONE
     FROM
       SISCONFIG SI
       JOIN REL_CLIENTES CL ON
         (SI.CODCLIENTE = CL.CODIGO)
     WHERE
       SI.CODIGO = :CODEMPRESA
     INTO
       :EMPRESA_NOME,
       :EMPRESA_RAZAOSOCIAL,
       :EMPRESA_CNPJ,
       :EMPRESA_IE,
       :EMPRESA_LOGRADOURO,
       :EMPRESA_NUMERO,
       :EMPRESA_COMPLEMENTO,
       :EMPRESA_BAIRRO,
       :EMPRESA_CIDADE,
       :EMPRESA_ESTADO,
       :EMPRESA_CEP,
       :EMPRESA_FONE;
     SELECT
       EXTENSO
     FROM
       MOEDAEXTENSO(
          CAST(:TOTAL_PAGO AS DOUBLE PRECISION),
          :CODEMPRESA
       )
     INTO
       :EXTENSO;

     /* A VISTA */
     IF (UDF_LEFT(DOCUMENTO, 7) = 'A VISTA') THEN
       DATAVENCIMENTO = NULL;

     SUSPEND;
   END
END

^

SET TERM ; ^

SET TERM ^ ;

CREATE PROCEDURE NF_EMISSAO (
    CODMOVIMENTO INTEGER)
RETURNS (
    NOTA_NUMERO INTEGER)
AS
BEGIN

  EXECUTE PROCEDURE SEQ_OBTER ('NOTAFISCAL')
    RETURNING_VALUES :NOTA_NUMERO;

  /* ATUALIZO O MOVIMENTO */
  UPDATE
    MOVIMENTOS MO
  SET
    MO.NOTA_NUMERO = :NOTA_NUMERO,
    MO.NOTA_DATAEMISSAO = CURRENT_TIMESTAMP,
    MO.NOTA_DATASAIDA = CURRENT_TIMESTAMP
  WHERE
    MO.CODIGO = :CODMOVIMENTO;

  /* ATUALIZO OS PAGAMENTOS */
  UPDATE
    PAGAMENTOS PA
  SET
    PA.NUMDOC = :NOTA_NUMERO,
    PA.DATADOC = CURRENT_TIMESTAMP,
    PA.TIPO_DOC = 'NF'
  WHERE
    PA.CODMOVIMENTO = :CODMOVIMENTO;
    
  SUSPEND;

END

^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE NF_EMISSAO TO PUBLIC;

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAPRO (
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(9,2),
    IPI NUMERIC(9,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    CLASSFISCAL VARCHAR(20))
AS
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE XIPI CHAR(1);
DECLARE VARIABLE FATURA_CAIXAS CHAR(1);
DECLARE VARIABLE CAIXA_ITENS INTEGER;
BEGIN
  /* VERIFICO SE EH COMPRA OU VENDA */
  SELECT
    ES
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ES;

  IF (ES = 1) THEN
   BEGIN

     /* COMPRA */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       'N/F',
       TI.VALOR_UNITARIO,
       TI.ICMSCOMPRA,
       TI.DESCONTO,
       TI.SITTRIBU,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA
     FROM
       TEMPITENS TI
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = TI.CODPRODUTO )
     WHERE
       TI.CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :SERIE,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       IF (SERIE <> 'N/F') THEN
         DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
       ELSE
         DESCRICAO2 = DESCRICAO1;

       VALOR_ITEM = VALOR_VENDA - DESCONTO;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       SUSPEND;

    END

   END ELSE
   BEGIN

     /* VERIFICO SE CORTO IPI */
     SELECT
       NA.IPI
     FROM
       NATUOPER NA
       JOIN MOVIMENTOS MO ON
         (MO.NOTA_CODNATUOPER = NA.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :XIPI;

     /* VERIFICO SE VAI FATURAR POR CAIXAS */
     SELECT
       HG.FATURA_CAIXAS
     FROM
       HISTORICOPAG HG
       JOIN MOVIMENTOS MO ON
         (MO.CODHISTORICOPAG = HG.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :FATURA_CAIXAS;

     /* VENDA */
     FOR
     SELECT
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.CAIXA_ITENS,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       OP.NOME,
       PL.NOME,
       SUM(ID.QUANTIDADE),
       SUM(ID.VALOR_PAGO),
       SUM(ID.VALOR_ICMS)
     FROM
       INDIVIDUAIS ID
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = ID.CODPRODUTO )
       LEFT JOIN TEMPITENS TI ON
         ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
           TI.CODPRODUTO   = ID.CODPRODUTO    AND
           TI.CODIGO       = ID.CODITEM )
       LEFT JOIN OPERADORAS OP ON
         ( OP.CODIGO = ID.CODOPERADORA )
       LEFT JOIN PLANOS PL ON
         ( PL.CODIGO = ID.CODPLANO AND
           PL.CODOPERADORA = ID.CODOPERADORA )
     WHERE
       ID.CODMOVSAIDA = :CODMOVIMENTO AND
       ID.VENDIDO = 'S' AND
       ID.PS = 'P'
     GROUP BY
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.CAIXA_ITENS,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       OP.NOME,
       PL.NOME
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :CAIXA_ITENS,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :IPI,
       :LINHA,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :OPERADORA,
       :PLANO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       /* VERIFICO SE O SERIE2 CONTEM DADOS E SERIE NAO, MANDO SERIE2 */
       IF ((UDF_TRIM(SERIE) = 'N/F') OR (UDF_TRIM(SERIE) = '')) THEN
         IF (UDF_TRIM(SERIE2) > '') THEN
           SERIE = SERIE2;

       IF (SERIE <> 'N/F') THEN
         DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || SERIE;
       ELSE
         DESCRICAO2 = DESCRICAO1;

       IF (CAIXA_ITENS IS NULL) THEN
         CAIXA_ITENS = 0;

       IF ((FATURA_CAIXAS = 'S') AND
          (QUANTIDADE >= CAIXA_ITENS)) THEN
        BEGIN
          UNIDADE = 'CX';
          QUANTIDADE = QUANTIDADE / CAIXA_ITENS;
          VALOR_VENDA = VALOR_VENDA * CAIXA_ITENS;
          DESCONTO = DESCONTO * CAIXA_ITENS;
        END

       VALOR_ITEM = VALOR_VENDA - DESCONTO;

       IF (XIPI = 'N') THEN
         IPI = NULL;

       SUSPEND;

     END
   END
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAITENS(
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(9,2),
    ICMS_VENDA NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    QUANTIDADE NUMERIC(9,2),
    VALOR_PAGO NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(9,2),
    IPI NUMERIC(9,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    ATIVACAO CHAR(1),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    VALOR_CUSTO NUMERIC(9,2),
    CLASSFISCAL VARCHAR(20))
AS
DECLARE VARIABLE ESMOV INTEGER;
DECLARE VARIABLE TIPOMOV INTEGER;
BEGIN

  SELECT
    ES,
    TIPO
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ESMOV,
    :TIPOMOV;

  IF ((TIPOMOV = 9) OR ((ESMOV = 0) AND (TIPOMOV = 1))) THEN
   BEGIN

     /* ITENS ESTORNADOS OU DE ORÇAMENTO */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.DESCRICAO,
       TI.SERIE,
       TI.SERIE2,
       TI.VALOR_UNITARIO,
       TI.ICMSVENDA,
       TI.DESCONTO,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA,
       TI.SITTRIBU,
       PO.UNIDADE,
       PO.ATIVACAO,
       (TI.VALOR_UNITARIO - TI.DESCONTO),
       TI.IPI,
       PO.PRECOCUSTO
     FROM
       TEMPITENS TI
       JOIN PRODUTOS PO ON
        (PO.CODIGO = TI.CODPRODUTO)
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :ATIVACAO,
       :VALOR_ITEM,
       :IPI,
       :VALOR_CUSTO
     DO
     BEGIN

       /* TRATAMENTO DA SERIE */
       IF ((UDF_TRIM(SERIE) <> 'N/F') AND (UDF_TRIM(SERIE) > '')) THEN
        BEGIN
          DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
        BEGIN
          IF (UDF_TRIM(SERIE2) > '') THEN
           BEGIN
             DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE2);
           END ELSE
             DESCRICAO2 = UDF_TRIM(DESCRICAO1);
        END

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       CLASSFISCAL = NULL;

       SUSPEND;

     END

   END ELSE
   BEGIN

     /* PRODUTOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       UNIDADE,
       VALOR_ITEM,
       IPI,
       LINHA,
       OPERADORA,
       PLANO,
       'N',
       CONTRATO,
       VOUCHER,
       TIPOATIVACAO,
       CLASSFISCAL
     FROM
       REL_NOTAPRO(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :LINHA,
       :OPERADORA,
       :PLANO,
       :ATIVACAO,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :CLASSFISCAL
     DO
     BEGIN

       VALOR_CUSTO = 0;
       SUSPEND;

     END

     /* SERVIÇOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       'SE',
       VALOR_ITEM,
       0 AS IPI,
       ATIVACAO
     FROM
       REL_NOTASER(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :ATIVACAO
     DO
     BEGIN

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       VALOR_CUSTO = 0;
       CLASSFISCAL = NULL;
       SUSPEND;

     END

   END
END

^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (346, CURRENT_TIMESTAMP);
COMMIT;

