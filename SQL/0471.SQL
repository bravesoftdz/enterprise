/*
** PRECO 4 E 5
*/

SET TERM ^ ;

CREATE OR ALTER TRIGGER VERIFICA_BARRA_UPD FOR PRODUTOS
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
  IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
      EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA) RETURNING_VALUES :TEMP_EAN;
      IF (NEW.BARRA <> TEMP_EAN) THEN EXCEPTION PRODUTO_BARRA;
    END
  IF ((NEW.PRECOCUSTO < 0) OR (NEW.PRECOVENDA < 0)) THEN EXCEPTION VALOR_ZERO;
  IF (NEW.PESO IS NULL) THEN NEW.PESO = 0;
--   IF (NEW.PRECOCUSTO > NEW.PRECOVENDA) THEN
--      EXCEPTION PRECOCUSTO_MAIOR;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER PRODUTOS_MARGEM_UPD FOR PRODUTOS
INACTIVE BEFORE UPDATE POSITION 200
AS
BEGIN

  IF (NEW.CAIXA_ITENS IS NULL) THEN
    NEW.CAIXA_ITENS = 1;

  /* MARGEM */
  IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA = 0)) THEN
   BEGIN

    NEW.MARGEM = 0;

   END ELSE
   BEGIN

     IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA > 0)) THEN
      BEGIN

        NEW.MARGEM = NEW.PRECOVENDA * 100;

      END ELSE
      BEGIN

        NEW.MARGEM = (100 - ((NEW.PRECOVENDA * 100) / NEW.PRECOCUSTO)) * -1;

      END
   END

   IF (NEW.CODSERVICO IS NULL) THEN
    BEGIN

       NEW.PRECOSERVICO = 0;
       NEW.PRECOTOTAL   = NEW.PRECOVENDA;

    END ELSE NEW.PRECOTOTAL = NEW.PRECOSERVICO + NEW.PRECOVENDA;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER PROVAR_UPD FOR PRODUTOS
INACTIVE AFTER UPDATE POSITION 10
AS
   DECLARE VARIABLE REAJUSTE NUMERIC(9,4);
BEGIN

   /* HOUVE ALGUM REAJUSTE? */
   IF (NEW.PRECOVENDA <> OLD.PRECOVENDA) THEN
    BEGIN
      IF (NEW.PRECOVENDA > OLD.PRECOVENDA) THEN
       BEGIN
         IF (OLD.PRECOVENDA = 0) THEN
            REAJUSTE = NEW.PRECOVENDA * 100;
         ELSE
            REAJUSTE = ((NEW.PRECOVENDA * 100) / OLD.PRECOVENDA) - 100;
       END ELSE
       BEGIN
         IF (NEW.PRECOVENDA = 0) THEN
            REAJUSTE = OLD.PRECOVENDA * -100;
         ELSE
            REAJUSTE = ((OLD.PRECOVENDA - NEW.PRECOVENDA) * -100) / OLD.PRECOVENDA;
       END
      INSERT INTO
        VARIACAO_VALOR (
          CODPRODUTO,
          DATA,
          VALOR_ANTIGO,
          VALOR_NOVO,
          REAJUSTE )
        VALUES (
          OLD.CODIGO,
          CURRENT_TIMESTAMP,
          OLD.PRECOVENDA,
          NEW.PRECOVENDA,
          :REAJUSTE);
    END

   IF (NEW.PS = 'S') THEN
    BEGIN
       UPDATE PRODUTOS SET PRODUTOS.PRECOSERVICO = NEW.PRECOVENDA
       WHERE PRODUTOS.CODSERVICO = NEW.CODIGO;
    END
END^

SET TERM ; ^

ALTER TABLE PRODUTOS
ADD PRECOVENDA4 DINHEIRO_VAZIO;

ALTER TABLE PRODUTOS
ADD PRECOVENDA5 DINHEIRO_VAZIO;

SET TERM ^ ;

CREATE OR ALTER TRIGGER VERIFICA_BARRA_UPD FOR PRODUTOS
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE TEMP_EAN VARCHAR(13);
BEGIN
  IF (NEW.INDIVIDUAL = 'N') THEN
    BEGIN
      EXECUTE PROCEDURE CALC_EAN13(NEW.BARRA) RETURNING_VALUES :TEMP_EAN;
      IF (NEW.BARRA <> TEMP_EAN) THEN EXCEPTION PRODUTO_BARRA;
    END
  IF ((NEW.PRECOCUSTO < 0) OR (NEW.PRECOVENDA < 0)) THEN EXCEPTION VALOR_ZERO;
  IF (NEW.PESO IS NULL) THEN NEW.PESO = 0;
--   IF (NEW.PRECOCUSTO > NEW.PRECOVENDA) THEN
--      EXCEPTION PRECOCUSTO_MAIOR;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER PRODUTOS_MARGEM_UPD FOR PRODUTOS
ACTIVE BEFORE UPDATE POSITION 200
AS
BEGIN

  IF (NEW.CAIXA_ITENS IS NULL) THEN
    NEW.CAIXA_ITENS = 1;

  /* MARGEM */
  IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA = 0)) THEN
   BEGIN

    NEW.MARGEM = 0;

   END ELSE
   BEGIN

     IF ((NEW.PRECOCUSTO = 0) AND (NEW.PRECOVENDA > 0)) THEN
      BEGIN

        NEW.MARGEM = NEW.PRECOVENDA * 100;

      END ELSE
      BEGIN

        NEW.MARGEM = (100 - ((NEW.PRECOVENDA * 100) / NEW.PRECOCUSTO)) * -1;

      END
   END

   IF (NEW.CODSERVICO IS NULL) THEN
    BEGIN

       NEW.PRECOSERVICO = 0;
       NEW.PRECOTOTAL   = NEW.PRECOVENDA;

    END ELSE NEW.PRECOTOTAL = NEW.PRECOSERVICO + NEW.PRECOVENDA;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER PROVAR_UPD FOR PRODUTOS
ACTIVE AFTER UPDATE POSITION 10
AS
   DECLARE VARIABLE REAJUSTE NUMERIC(9,4);
BEGIN

   /* HOUVE ALGUM REAJUSTE? */
   IF (NEW.PRECOVENDA <> OLD.PRECOVENDA) THEN
    BEGIN
      IF (NEW.PRECOVENDA > OLD.PRECOVENDA) THEN
       BEGIN
         IF (OLD.PRECOVENDA = 0) THEN
            REAJUSTE = NEW.PRECOVENDA * 100;
         ELSE
            REAJUSTE = ((NEW.PRECOVENDA * 100) / OLD.PRECOVENDA) - 100;
       END ELSE
       BEGIN
         IF (NEW.PRECOVENDA = 0) THEN
            REAJUSTE = OLD.PRECOVENDA * -100;
         ELSE
            REAJUSTE = ((OLD.PRECOVENDA - NEW.PRECOVENDA) * -100) / OLD.PRECOVENDA;
       END
      INSERT INTO
        VARIACAO_VALOR (
          CODPRODUTO,
          DATA,
          VALOR_ANTIGO,
          VALOR_NOVO,
          REAJUSTE )
        VALUES (
          OLD.CODIGO,
          CURRENT_TIMESTAMP,
          OLD.PRECOVENDA,
          NEW.PRECOVENDA,
          :REAJUSTE);
    END

   IF (NEW.PS = 'S') THEN
    BEGIN
       UPDATE PRODUTOS SET PRODUTOS.PRECOSERVICO = NEW.PRECOVENDA
       WHERE PRODUTOS.CODSERVICO = NEW.CODIGO;
    END
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER CLIENTES_DOCUPD FOR CLIENTES
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
BEGIN

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER CLIENTE_FAMILIA_UPDATE FOR CLIENTES
INACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DE FAMILIA */
  IF (NEW.PESSOAFISICA = 'F') THEN
     EXECUTE PROCEDURE FAMILIA(NEW.NOME)
       RETURNING_VALUES NEW.NOME_FAMILIA;
  ELSE
     NEW.NOME_FAMILIA = NEW.NOME;
END^

SET TERM ; ^

ALTER TABLE CLIENTES
ADD PRECO_CLIENTE SIMNAO;

UPDATE CLIENTES
SET PRECO_CLIENTE = 'N';

ALTER TABLE CLIENTES
ADD PRECO_45 SIMNAO;

UPDATE CLIENTES
SET PRECO_45 = 'N';

SET TERM ^ ;

CREATE OR ALTER TRIGGER CLIENTES_DOCUPD FOR CLIENTES
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
BEGIN

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER CLIENTE_FAMILIA_UPDATE FOR CLIENTES
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DE FAMILIA */
  IF (NEW.PESSOAFISICA = 'F') THEN
     EXECUTE PROCEDURE FAMILIA(NEW.NOME)
       RETURNING_VALUES NEW.NOME_FAMILIA;
  ELSE
     NEW.NOME_FAMILIA = NEW.NOME;
END^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (471, CURRENT_TIMESTAMP);
COMMIT;
