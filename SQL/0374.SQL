/*
** ALTERAÇÃO DA NOMENCLATURA DA O.S. (BKP/RES DEPOIS)
*/

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'STR30'
WHERE (RDB$FIELD_NAME = 'STATUS') AND
(RDB$RELATION_NAME = 'MOVIMENTOS');

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
DECLARE VARIABLE TDATAINI TIMESTAMP;
DECLARE VARIABLE TDATAFIM TIMESTAMP;
BEGIN

   /* DATA DA ENTREGA */
   IF ((NEW.QUEM_RECEBEU IS NOT NULL) AND (OLD.QUEM_RECEBEU IS NULL)) THEN
     NEW.DATA_ENTREGA = CURRENT_TIMESTAMP;

   /* DATA DA AUTORIZAÇÃO */
   IF ((NEW.QUEM_AUTORIZOU IS NOT NULL) AND (OLD.QUEM_AUTORIZOU IS NULL)) THEN
     NEW.DATA_AUTORIZADO = CURRENT_TIMESTAMP;

   /* CONFIGURAÇÕES DO HISTÓRIO DE PAGAMENTOS */
   IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
    BEGIN
      SELECT
        CODNATUOPER
      FROM
        HISTORICOPAG
      WHERE
        CODIGO = NEW.CODHISTORICOPAG
      INTO
        NEW.NOTA_CODNATUOPER;
    END

   /* CONFIGURAÇÕES DA NATUREZA DE OPERAÇÃO */
   SELECT
     VENDA,
     ESTOQUE,
     ICMS,
     IPI
   FROM
     NATUOPER
   WHERE
     CODIGO = NEW.NOTA_CODNATUOPER
   INTO
     NEW.NO_VENDA,
     NEW.NO_ESTOQUE,
     NEW.NO_ICMS,
     NEW.NO_IPI;

   IF (NEW.TIPO = 1) THEN
    BEGIN

      IF (NEW.ES = 0) THEN
       BEGIN
         NEW.STATUS = 'ORC ABERTO';
         IF (NEW.AUTORIZADO = 'S') THEN
          BEGIN
            NEW.STATUS = 'ORC AUTORIZADO';
          END ELSE
          BEGIN
            IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
              NEW.STATUS = 'ORC NAO AUTO';
            IF ((NEW.RETORNO = 'S') AND (NEW.DATA_RETORNO IS NOT NULL)) THEN
              NEW.STATUS = 'ORC RETORNAR';
          END
       END

      IF (NEW.ES = 1) THEN
       BEGIN
         IF (NEW.FECHADO = 'S') THEN
            NEW.STATUS = 'COMPRA';
         ELSE
            NEW.STATUS = 'PED COMPRA';
       END

    END

   IF (NEW.TIPO = 2) THEN
    BEGIN
      NEW.STATUS = 'OS ABERTA NÃO SOLUCIONADA';

      /* VERIFICO SE O TECNICO JÁ INICIOU */
      SELECT FIRST 1
        DATAINI,
        DATAFIM
      FROM
        OS_VENDER
      WHERE
        CODMOVIMENTO = NEW.CODIGO
      INTO
        :TDATAINI,
        :TDATAFIM;

      IF (TDATAINI IS NOT NULL) THEN
       BEGIN
         NEW.STATUS = 'OS INICIADA NÃO SOLUCIONADA';

         IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
          BEGIN

            IF (NEW.AUTORIZADO = 'N') THEN
              NEW.STATUS = 'OS NÃO SOLUCIONADA';
            ELSE
              IF (TDATAFIM IS NULL) THEN
                NEW.STATUS = 'OS AUTORIZADA NÃO SOLUCIONADA';
              ELSE
                NEW.STATUS = 'OS SOLUCIONADA NÃO FATURADA';
          END

         IF (NEW.DATA_ENTREGA IS NOT NULL) THEN
           NEW.STATUS = 'OS SOLUCIONADA ENTREGUE';

       END
    END

   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS SOLUCIONADA FATURADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÇÃO';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* VERIFICO O NUMERADOR */
   EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
     NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

   /* CALCULAR IMPOSTOS */
   IF ((NEW.ES = 2)                  AND
       (NEW.TIPO IN (3, 6))          AND
       (OLD.TIPO IN (2, 5)))         THEN
    BEGIN
      /* TOTAL ICMS */
      EXECUTE PROCEDURE CALC_ICMS(NEW.CODIGO)
        RETURNING_VALUES NEW.VALOR_ICMS, NEW.VALOR_IPI_PRODUTOS,
          NEW.NOTA_BASEICMS;
      IF (NEW.NO_ICMS = 'N') THEN
        NEW.VALOR_ICMS = 0;
      IF (NEW.NO_IPI = 'N') THEN
        NEW.VALOR_IPI_PRODUTOS = 0;
      IF (NEW.NOTA_BASEICMS IS NULL) THEN
        NEW.NOTA_BASEICMS = 0;
    END

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';

      NEW.FECHADO = 'S';

      IF ((UDF_TRIM(NEW.USUARIOFECHAMENTO) = '') OR (NEW.USUARIOFECHAMENTO IS NULL)) THEN
        NEW.USUARIOFECHAMENTO = USER;

      /* VINCULAR SERIAL NA VENDA FECHADA */
      IF (NEW.TIPO = 6) THEN
        EXECUTE PROCEDURE VINCULO_SERIE NEW.CODIGO
          RETURNING_VALUES NEW.SERIE;

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_INSERT
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (NEW.TIPO = 1) THEN
   BEGIN
     IF (NEW.ES = 0) THEN
       NEW.STATUS = 'ORC ABERTO';
     IF (NEW.ES = 1) THEN
       NEW.STATUS = 'COMPRA';
   END
  IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA NÃO SOLUCIONADA';
  IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS SOLUCIONADA FATURADA';
  IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÇÃO';
  IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
  IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
  IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
  IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
  IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNADO';

  /* VERIFICO O NUMERADOR */
  EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
    NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

  /* BASES DE CALCULO DO ICMS E ISS */
  SELECT
    ALIQUOTA_ISS,
    ALIQUOTA_ICMSSIMPLES,
    ICMSSIMPLES
  FROM
    SISCONFIG
  WHERE
    CODIGO = NEW.CODEMPRESA
  INTO
    NEW.ISSALIQ,
    NEW.ICMSSIMPALIQ,
    NEW.ICMSSIMPLES;

  /* CONFIGURAÇÕES DO HISTÓRIO DE PAGAMENTOS */
  IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
   BEGIN
     SELECT
       CODNATUOPER
     FROM
       HISTORICOPAG
     WHERE
       CODIGO = NEW.CODHISTORICOPAG
     INTO
       NEW.NOTA_CODNATUOPER;
   END ELSE
   BEGIN

     IF (NEW.NOTA_CODNATUOPER IS NULL) THEN
      BEGIN

        IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
         BEGIN

           SELECT
             SI.NATUOPER_COMPRA
           FROM
             SISCONFIG SI
           WHERE
             SI.CODIGO = NEW.CODEMPRESA
           INTO
             NEW.NOTA_CODNATUOPER;

         END
      END

   END

  /* CONFIGURAÇÕES DA NATUREZA DE OPERAÇÃO */
  SELECT
    VENDA,
    ESTOQUE,
    ICMS,
    IPI
  FROM
    NATUOPER
  WHERE
    CODIGO = NEW.NOTA_CODNATUOPER
  INTO
    NEW.NO_VENDA,
    NEW.NO_ESTOQUE,
    NEW.NO_ICMS,
    NEW.NO_IPI;

  /* INICIALIZAÇÃO DO RETORNO */
  NEW.RETORNO = 'N';

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTACORPO (
    CODMOVIMENTO INTEGER)
RETURNS (
    ES SMALLINT,
    CODCLIENTE INTEGER,
    DATA TIMESTAMP,
    SERVICOS VARCHAR(254),
    VALOR_SERVICOS NUMERIC(9,2),
    VALOR_ITENS NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    VALOR_PRODUTOS NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    VALOR_TOTAL NUMERIC(9,2),
    OBSERVACOES VARCHAR(254),
    NOTA_NUMERO INTEGER,
    NOTA_DATAEMISSAO TIMESTAMP,
    NOTA_CODNATUOPER VARCHAR(10),
    NOTA_CODTRANSPORTADOR INTEGER,
    NOTA_PLACAVEICULO VARCHAR(10),
    NOTA_UFVEICULO VARCHAR(2),
    NOTA_FRETE SMALLINT,
    NOTA_VALOR_FRETE NUMERIC(9,2),
    NOTA_VALOR_SEGURO NUMERIC(9,2),
    NOTA_VALOR_OUTROS NUMERIC(9,2),
    NOTA_VALOR_TOTAL NUMERIC(9,2),
    NOTA_QUANTIDADE NUMERIC(9,2),
    NOTA_ESPECIE VARCHAR(30),
    NOTA_MARCA VARCHAR(20),
    NOTA_VOLNUM INTEGER,
    NOTA_PESOBRUTO NUMERIC(9,2),
    NOTA_PESOLIQUIDO NUMERIC(9,2),
    NOTA_DADOSADICIONAIS VARCHAR(254),
    CODVENDEDOR INTEGER,
    STATUS VARCHAR(30),
    CONDICAO VARCHAR(40),
    DATAINICIO TIMESTAMP,
    DATATERMINO TIMESTAMP,
    ICMSSIMPLES CHAR(1),
    ICMSSIMPALIQ NUMERIC(9,4),
    ISSALIQ NUMERIC(9,4),
    VALOR_ISS NUMERIC(9,2),
    NOTA_IESUBST VARCHAR(20),
    NOTA_DATASAIDA TIMESTAMP,
    NOTA_BASEICMS NUMERIC(9,4),
    NOTA_BASEICMSSUBST NUMERIC(9,4),
    NOTA_VALORICMSSUBST NUMERIC(9,2),
    VALOR_IPI NUMERIC(9,2),
    CODVENDEDOR_ABRE INTEGER,
    DESCONTOTXT VARCHAR(40),
    CLI_NOME VARCHAR(40),
    CLI_RAZAOSOCIAL VARCHAR(40),
    CLI_LOGRADOURO VARCHAR(60),
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR(40),
    CLI_BAIRRO VARCHAR(60),
    CLI_CEP VARCHAR(10),
    CLI_CIDADE VARCHAR(60),
    CLI_ESTADO VARCHAR(2),
    CLI_FONE VARCHAR(20),
    CLI_FAX VARCHAR(20),
    CLI_CELULAR VARCHAR(20),
    CLI_EMAIL VARCHAR(50),
    CLI_RGIE VARCHAR(20),
    CLI_CPFCGC VARCHAR(20),
    TRA_NOME VARCHAR(40),
    TRA_LOGRADOURO VARCHAR(60),
    TRA_NUMERO INTEGER,
    TRA_COMPLEMENTO VARCHAR(40),
    TRA_BAIRRO VARCHAR(60),
    TRA_CEP VARCHAR(10),
    TRA_CIDADE VARCHAR(60),
    TRA_ESTADO VARCHAR(2),
    TRA_FONE VARCHAR(20),
    TRA_FAX VARCHAR(20),
    TRA_EMAIL VARCHAR(50),
    TRA_RGIE VARCHAR(20),
    TRA_CPFCGC VARCHAR(20),
    CODIGO INTEGER,
    MARCA VARCHAR(40),
    MODELO VARCHAR(40),
    DEFEITO VARCHAR(40),
    GARANTIA CHAR(1),
    SERIE VARCHAR(40),
    ACESSORIOS VARCHAR(50),
    CONDICAOEXTERNA VARCHAR(40),
    SOLICITANTE VARCHAR(40),
    VENDEDORABRE VARCHAR(40),
    VENDEDOR VARCHAR(40),
    USUARIO VARCHAR(40),
    CLI_CONTRATO CHAR(1),
    CLI_KM INTEGER,
    NATUREZAOPERACAO VARCHAR(30),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(40),
    EMPRESA_RAZAOSOCIAL VARCHAR(50),
    EMPRESA_CNPJ VARCHAR(20),
    EMPRESA_IE VARCHAR(20),
    EMPRESA_LOGRADOURO VARCHAR(60),
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR(40),
    EMPRESA_BAIRRO VARCHAR(60),
    EMPRESA_CIDADE VARCHAR(60),
    EMPRESA_ESTADO CHAR(2),
    EMPRESA_CEP VARCHAR(9),
    EMPRESA_FONE VARCHAR(20),
    TIPOOS VARCHAR(40),
    XX_ENTRADA CHAR(2),
    XX_SAIDA CHAR(2),
    EXTENSO VARCHAR(254),
    TECNICO VARCHAR(20),
    DEFEITO_DETECTADO VARCHAR(60),
    SERVICO_REALIZAR VARCHAR(60),
    AUTORIZADO CHAR(1),
    DATA_AUTORIZADO TIMESTAMP,
    QUEM_AUTORIZOU VARCHAR(40),
    DATA_ENTREGA TIMESTAMP,
    QUEM_ENTREGOU VARCHAR(40),
    QUEM_RECEBEU VARCHAR(40),
    NOTA_ENTRADA INTEGER,
    AUTORIZADO_SIM CHAR(1),
    AUTORIZADO_NAO CHAR(1),
    PARCEIRO VARCHAR(40))
AS
DECLARE VARIABLE TEMP_PESSOAFISICA CHAR(1);
DECLARE VARIABLE TEMP_RAZAOSOCIAL VARCHAR(40);
DECLARE VARIABLE TEMP_IE VARCHAR(20);
DECLARE VARIABLE TEMP_CGC VARCHAR(20);
DECLARE VARIABLE CODMARCA INTEGER;
DECLARE VARIABLE CODMODELO INTEGER;
DECLARE VARIABLE CODDEFEITO INTEGER;
DECLARE VARIABLE OSTIPO INTEGER;
DECLARE VARIABLE MAXTECNICO INTEGER;
DECLARE VARIABLE CODPARCEIRO INTEGER;
BEGIN
  SELECT
    CODIGO,
    ES,
    CODCLIENTE,
    DATA,
    UDF_LEFT(SERVICOS, 254),
    VALOR_SERVICOS,
    VALOR_ITENS,
    DESCONTO,
    VALOR_PRODUTOS,
    VALOR_ICMS,
    VALOR_TOTAL,
    UDF_LEFT(OBSERVACOES, 254),
    NOTA_NUMERO,
    NOTA_DATAEMISSAO,
    NOTA_CODNATUOPER,
    NOTA_CODTRANSPORTADOR,
    NOTA_PLACAVEICULO,
    NOTA_UFVEICULO,
    NOTA_FRETE,
    NOTA_VALOR_FRETE,
    NOTA_VALOR_SEGURO,
    NOTA_VALOR_OUTROS,
    NOTA_VALOR_TOTAL,
    NOTA_QUANTIDADE,
    NOTA_ESPECIE,
    NOTA_MARCA,
    NOTA_VOLNUM,
    NOTA_PESOBRUTO,
    NOTA_PESOLIQUIDO,
    UDF_LEFT(NOTA_DADOSADICIONAIS, 254),
    CODVENDEDOR,
    STATUS,
    CONDICAO,
    DATAINICIO,
    DATATERMINO,
    ICMSSIMPLES,
    ICMSSIMPALIQ,
    ISSALIQ,
    VALOR_ISS,
    NOTA_IESUBST,
    NOTA_DATASAIDA,
    NOTA_BASEICMS,
    NOTA_BASEICMSSUBST,
    NOTA_VALORICMSSUBST,
    VALOR_IPI,
    CODVENDEDOR_ABRE,
    DESCONTOTXT,
    CODMARCA,
    CODMODELO,
    CODDEFEITO,
    GARANTIA,
    SERIE,
    ACESSORIOS,
    CONDICAOEXTERNA,
    SOLICITANTE,
    CODEMPRESA,
    OSTIPO,
    DEFEITO_DETECTADO,
    SERVICO_REALIZAR,
    AUTORIZADO,
    DATA_AUTORIZADO,
    QUEM_AUTORIZOU,
    DATA_ENTREGA,
    QUEM_ENTREGOU,
    QUEM_RECEBEU,
    NOTA_ENTRADA,
    CODPARCEIRO
  FROM
    MOVIMENTOS MO
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :ES,
    :CODCLIENTE,
    :DATA,
    :SERVICOS,
    :VALOR_SERVICOS,
    :VALOR_ITENS,
    :DESCONTO,
    :VALOR_PRODUTOS,
    :VALOR_ICMS,
    :VALOR_TOTAL,
    :OBSERVACOES,
    :NOTA_NUMERO,
    :NOTA_DATAEMISSAO,
    :NOTA_CODNATUOPER,
    :NOTA_CODTRANSPORTADOR,
    :NOTA_PLACAVEICULO,
    :NOTA_UFVEICULO,
    :NOTA_FRETE,
    :NOTA_VALOR_FRETE,
    :NOTA_VALOR_SEGURO,
    :NOTA_VALOR_OUTROS,
    :NOTA_VALOR_TOTAL,
    :NOTA_QUANTIDADE,
    :NOTA_ESPECIE,
    :NOTA_MARCA,
    :NOTA_VOLNUM,
    :NOTA_PESOBRUTO,
    :NOTA_PESOLIQUIDO,
    :NOTA_DADOSADICIONAIS,
    :CODVENDEDOR,
    :STATUS,
    :CONDICAO,
    :DATAINICIO,
    :DATATERMINO,
    :ICMSSIMPLES,
    :ICMSSIMPALIQ,
    :ISSALIQ,
    :VALOR_ISS,
    :NOTA_IESUBST,
    :NOTA_DATASAIDA,
    :NOTA_BASEICMS,
    :NOTA_BASEICMSSUBST,
    :NOTA_VALORICMSSUBST,
    :VALOR_IPI,
    :CODVENDEDOR_ABRE,
    :DESCONTOTXT,
    :CODMARCA,
    :CODMODELO,
    :CODDEFEITO,
    :GARANTIA,
    :SERIE,
    :ACESSORIOS,
    :CONDICAOEXTERNA,
    :SOLICITANTE,
    :CODEMPRESA,
    :OSTIPO,
    :DEFEITO_DETECTADO,
    :SERVICO_REALIZAR,
    :AUTORIZADO,
    :DATA_AUTORIZADO,
    :QUEM_AUTORIZOU,
    :DATA_ENTREGA,
    :QUEM_ENTREGOU,
    :QUEM_RECEBEU,
    :NOTA_ENTRADA,
    :CODPARCEIRO;

  SELECT
    CL.NOME,
    UDF_LEFT(CL.RAZAOSOCIAL, 40),
    CL.PESSOAFISICA,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.ESTADO,
    CL.FONE,
    CL.FAX,
    CL.CELULAR,
    CL.EMAIL,
    CL.RG,
    CL.CPF,
    CL.IE,
    CL.CGC,
    CL.CONTRATO,
    CL.KMS,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES CL
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = CL.LOCALIZACAO AND
        LO.BAIRRO = CL.BAIRRO AND
        LO.CIDADE = CL.CIDADE AND
        LO.ESTADO = CL.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = CL.BAIRRO AND
        BA.CIDADE = CL.CIDADE AND
        BA.ESTADO = CL.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = CL.CIDADE AND
        CI.ESTADO = CL.ESTADO )
  WHERE
    CL.CODIGO = :CODCLIENTE
  INTO
    :CLI_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :CLI_NUMERO,
    :CLI_COMPLEMENTO,
    :CLI_ESTADO,
    :CLI_FONE,
    :CLI_FAX,
    :CLI_CELULAR,
    :CLI_EMAIL,
    :CLI_RGIE,
    :CLI_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :CLI_CONTRATO,
    :CLI_KM,
    :CLI_LOGRADOURO,
    :CLI_BAIRRO,
    :CLI_CIDADE,
    :CLI_CEP;

  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     CLI_RGIE        = TEMP_IE;
     CLI_CPFCGC      = TEMP_CGC;
     CLI_RAZAOSOCIAL = TEMP_RAZAOSOCIAL;
   END ELSE CLI_RAZAOSOCIAL = CLI_NOME;

  TEMP_PESSOAFISICA = '';
  TEMP_IE           = '';
  TEMP_CGC          = '';
  TEMP_RAZAOSOCIAL  = '';

  SELECT
    TR.NOME,
    UDF_LEFT(TR.RAZAOSOCIAL, 40),
    TR.PESSOAFISICA,
    TR.NUMERO,
    TR.COMPLEMENTO,
    TR.ESTADO,
    TR.FONE,
    TR.FAX,
    TR.EMAIL,
    TR.RG,
    TR.CPF,
    TR.IE,
    TR.CGC,
    LO.LOGRADOURO,
    BA.BAIRRO,
    CI.CIDADE,
    LO.CEP
  FROM
    CLIENTES TR
    LEFT JOIN LOGRADOUROS LO ON
      ( LO.CODIGO = TR.LOCALIZACAO AND
        LO.BAIRRO = TR.BAIRRO AND
        LO.CIDADE = TR.CIDADE AND
        LO.ESTADO = TR.ESTADO )
    LEFT JOIN BAIRROS BA ON
      ( BA.CODIGO = TR.BAIRRO AND
        BA.CIDADE = TR.CIDADE AND
        BA.ESTADO = TR.ESTADO )
    LEFT JOIN CIDADES CI ON
      ( CI.CODIGO = TR.CIDADE AND
        CI.ESTADO = TR.ESTADO )
  WHERE
    TR.CODIGO = :NOTA_CODTRANSPORTADOR
  INTO
    :TRA_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :TRA_NUMERO,
    :TRA_COMPLEMENTO,
    :TRA_ESTADO,
    :TRA_FONE,
    :TRA_FAX,
    :TRA_EMAIL,
    :TRA_RGIE,
    :TRA_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :TRA_LOGRADOURO,
    :TRA_BAIRRO,
    :TRA_CIDADE,
    :TRA_CEP;

  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     TRA_RGIE   = TEMP_IE;
     TRA_CPFCGC = TEMP_CGC;
   END

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR_ABRE
  INTO
    :VENDEDORABRE;

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR
  INTO
    :VENDEDOR;

  SELECT
    DESCRICAO
  FROM
    MARCAS
  WHERE
    CODIGO = :CODMARCA
  INTO
    :MARCA;

  SELECT
    DESCRICAO
  FROM
    MODELOS
  WHERE
    CODIGO = :CODMODELO AND
    CODEQUIPAMENTO = :CODMARCA
  INTO
    :MODELO;

  SELECT
    DESCRICAO
  FROM
    DEFEITOS
  WHERE
    CODIGO = :CODDEFEITO
  INTO
    :DEFEITO;

  SELECT
    NATUREZA
  FROM
    NATUOPER
  WHERE
    CODIGO = :NOTA_CODNATUOPER
  INTO
    :NATUREZAOPERACAO;

  SELECT
    TIPO
  FROM
    OSTIPOS
  WHERE
    CODIGO = :OSTIPO
  INTO
    :TIPOOS;

  SELECT
    CL.NOME,
    CL.RAZAOSOCIAL,
    CL.CGC,
    CL.IE,
    CL.LOGRADOURO,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.BAIRRO,
    CL.CIDADE,
    CL.ESTADO,
    CL.CEP,
    CL.FONE
  FROM
    SISCONFIG SI
    JOIN REL_CLIENTES CL ON
      (SI.CODCLIENTE = CL.CODIGO)
  WHERE
    SI.CODIGO = :CODEMPRESA
  INTO
    :EMPRESA_NOME,
    :EMPRESA_RAZAOSOCIAL,
    :EMPRESA_CNPJ,
    :EMPRESA_IE,
    :EMPRESA_LOGRADOURO,
    :EMPRESA_NUMERO,
    :EMPRESA_COMPLEMENTO,
    :EMPRESA_BAIRRO,
    :EMPRESA_CIDADE,
    :EMPRESA_ESTADO,
    :EMPRESA_CEP,
    :EMPRESA_FONE;

  USUARIO = USER;

  IF (ES = 1) THEN
   BEGIN

     XX_ENTRADA = 'XX';
     XX_SAIDA   = '  ';

   END ELSE
   BEGIN

     XX_ENTRADA = '  ';
     XX_SAIDA   = 'XX';

   END

  SELECT
    EXTENSO
  FROM
    MOEDAEXTENSO(
       CAST(:NOTA_VALOR_TOTAL AS DOUBLE PRECISION),
       :CODEMPRESA
    )
  INTO
    :EXTENSO;

 SELECT
   MIN(OS.CODVENDEDOR)
 FROM
   OS_VENDER OS
 WHERE
   OS.CODMOVIMENTO = :CODMOVIMENTO
 INTO
   :MAXTECNICO;

 SELECT
   UDF_LEFT(CL.NOME, 20)
 FROM
   CLIENTES CL
 WHERE
   CL.CODIGO = :MAXTECNICO
 INTO
   :TECNICO;

 AUTORIZADO_SIM = ' ';
 AUTORIZADO_NAO = ' ';

 IF (DATA_AUTORIZADO IS NOT NULL) THEN
  BEGIN
    IF (AUTORIZADO = 'S') THEN
      AUTORIZADO_SIM = 'X';
    ELSE
      AUTORIZADO_NAO = 'X';
  END

 SELECT
   NOME
 FROM
   CLIENTES
 WHERE
   CODIGO = :CODPARCEIRO
 INTO
   :PARCEIRO;

 SUSPEND;
END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (374, CURRENT_TIMESTAMP);
COMMIT;

