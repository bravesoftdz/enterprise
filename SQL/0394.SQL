/*
** PRECO DE PRODUTOS E QUANTIDADE COM TRÊS DÍGITOS
*/

CREATE DOMAIN DINHEIRO3 AS DECIMAL(14,3) DEFAULT 0 NOT NULL;;

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'PRECOCUSTO') AND
(RDB$RELATION_NAME = 'PRODUTOS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'PRECOVENDA') AND
(RDB$RELATION_NAME = 'PRODUTOS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_UNITARIO') AND
(RDB$RELATION_NAME = 'TEMPITENS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'DESCONTO') AND
(RDB$RELATION_NAME = 'TEMPITENS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'QUANTIDADE') AND
(RDB$RELATION_NAME = 'TEMPITENS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'MARGEM') AND
(RDB$RELATION_NAME = 'TEMPITENS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_VENDA') AND
(RDB$RELATION_NAME = 'TEMPITENS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'DESCONTO') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'QUANTIDADE') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_ICMS') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_COMISSAO') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'CUSTO_PRODUTO') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'CUSTO_IPI') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'CUSTO_RATEIO') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'CUSTO_ICMS') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'CUSTO_ISS') AND
(RDB$RELATION_NAME = 'INDIVIDUAIS');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_ANTIGO') AND
(RDB$RELATION_NAME = 'VARIACAO_VALOR');

UPDATE RDB$RELATION_FIELDS SET
RDB$FIELD_SOURCE = 'DINHEIRO3'
WHERE (RDB$FIELD_NAME = 'VALOR_NOVO') AND
(RDB$RELATION_NAME = 'VARIACAO_VALOR');

SET TERM ^ ;

ALTER PROCEDURE AUTOBAIXA (
    CODMOVIMENTO INTEGER)
AS
DECLARE VARIABLE CODDOC_AVISTA INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE PAGO INTEGER;
DECLARE VARIABLE PARCELA_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE MOVIMENTO_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE XPARC INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE NOMEUSER VARCHAR(30);
DECLARE VARIABLE VALOR NUMERIC(9,2);
DECLARE VARIABLE CODCAIXALAN INTEGER;
DECLARE VARIABLE TIPOPAG CHAR(1);
DECLARE VARIABLE CAIXA CHAR(1);
DECLARE VARIABLE TECNICOLOGIN CHAR(1);
BEGIN
  /* VERIFICO SE OS VALORES SAO CORRESPONDENTES */
  SELECT
    COUNT(PA.CODIGO),
    SUM(PA.VALOR)
  FROM
    PAGAMENTOS PA
  WHERE
    PA.CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :XPARC,
    :PARCELA_TOTAL;

  IF (XPARC IS NULL) THEN
    XPARC = 0;

  /* COMISSIONAMENTO DE VENDEDORES */
  SELECT
    CAST(MO.NOTA_VALOR_TOTAL AS DECIMAL(9, 2)),
    MO.CODEMPRESA,
    MO.USUARIOFECHAMENTO
  FROM
    MOVIMENTOS MO
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :MOVIMENTO_TOTAL,
    :CODEMPRESA,
    :NOMEUSER;

  /* VALOR DAS PARCELAS DEVE SER IGUAL OU SUPERIOR AO VALOR DO FATURAMENTO */
  IF (MOVIMENTO_TOTAL > PARCELA_TOTAL) THEN
    EXCEPTION VALOR_PARCELA;

  /* APOS FECHADO, MOSTRO AS PARCELAS */
  UPDATE
    PAGAMENTOS
  SET
    ES = 2
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO;

  /* QUAL É O DOCUMENTO A VISTA? */
  SELECT
    CODDOC_AVISTA
  FROM
    SISCONFIG
  WHERE
    CODIGO = :CODEMPRESA
  INTO
    :CODDOC_AVISTA;

  /* PROCURO OS PAGAMENTOS, ALGUM É A VISTA? */
  FOR
  SELECT
    PA.CODIGO,
    PA.CODDOCUMENTO,
    PA.DATAVENCIMENTO,
    PA.PAGO,
    PA.CODCONTA,
    PA.VALOR,
    DC.TIPO_PAG
  FROM
    PAGAMENTOS PA
    JOIN DOCUMENTOS DC ON
      (DC.CODIGO = PA.CODDOCUMENTO)
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :CODDOCUMENTO,
    :DATAVENCIMENTO,
    :PAGO,
    :CODCONTA,
    :VALOR,
    :TIPOPAG
  DO
  BEGIN

   /* O DOCUMENTO É A VISTA? */
   IF ((TIPOPAG = 'A') AND (PAGO = 0)) THEN
    BEGIN

      /* FAÇO O LANÇAMENTO */
     EXECUTE PROCEDURE BAIXA(
       :CODIGO,
       0,
       0,
       'T',
       :CODCONTA,
       :CODDOCUMENTO,
       '',
       :NOMEUSER);

    END ELSE
    BEGIN

      SELECT
        CL.CAIXA,
        CL.TECNICOLOGIN
      FROM
        CLIENTES CL
      WHERE
        NOMEUSER = :NOMEUSER
      INTO
        :CAIXA,
        :TECNICOLOGIN;

      IF ((CAIXA = 'S') AND (TECNICOLOGIN = 'N')) THEN
       BEGIN

         EXECUTE PROCEDURE SEQ_OBTER ('CAIXAS')
           RETURNING_VALUES :CODCAIXALAN;

         INSERT INTO
           CAIXAS (
             CODCAIXALAN,
             USUARIO,
             DATA,
             HORA,
             TIPO,
             CODPAGAMENTO,
             VALOR,
             CODDOCUMENTO,
             AVISTA)
           VALUES (
             :CODCAIXALAN,
             :NOMEUSER,
             CURRENT_DATE,
             CURRENT_TIME,
             'VE',
             :CODIGO,
             :VALOR,
             :CODDOCUMENTO,
             'N');

       END

    END

  END

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO) OR
        (NEW.CODCLIENTE <> OLD.CODCLIENTE)) AND
        (NEW.TIPO IN (0, 1, 2, 5))) THEN
       EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE COMISSAO_CALC(NEW.CODIGO);

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

        EXECUTE PROCEDURE CADASTRA_EQUIPAMENTO(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÇÃO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE COMISSAO_CALC (
    CODMOVIMENTO INTEGER)
AS
DECLARE VARIABLE VALOR_TOTAL NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_CALCULO CHAR(1);
DECLARE VARIABLE PERCCOMIS_PROD NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_PECA NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_SERV NUMERIC(9,2);
DECLARE VARIABLE CLIENTE_COMISSIONADO CHAR(1);
DECLARE VARIABLE CODVENDEDOR INTEGER;
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE TIPO INTEGER;
DECLARE VARIABLE ITEM_TIPO CHAR(1);
DECLARE VARIABLE ITEM_PS CHAR(1);
DECLARE VARIABLE ITEM_VALOR NUMERIC(9,2);
DECLARE VARIABLE SOMA_PROD NUMERIC(9,2);
DECLARE VARIABLE SOMA_PECA NUMERIC(9,2);
DECLARE VARIABLE SOMA_SERV NUMERIC(9,2);
DECLARE VARIABLE CODTECNICO INTEGER;
DECLARE VARIABLE PERC_TECNICO NUMERIC(9,2);
BEGIN

  /* INICIALIZAÇÃO */
  SOMA_PROD          = 0;
  SOMA_PECA          = 0;
  SOMA_SERV          = 0;
  PERCCOMIS_PROD     = 0;
  PERCCOMIS_PECA     = 0;
  PERCCOMIS_SERV     = 0;

  /* DADOS PARA COMISSIONAR */
  SELECT
    CAST(MO.NOTA_VALOR_TOTAL AS DECIMAL(9, 2)),
    MO.CODVENDEDOR,
    MO.ES,
    MO.TIPO,
    CL.PERCCOMIS_CALCULO,
    CI.COMISSIONADO
  FROM
    MOVIMENTOS MO
    LEFT JOIN CLIENTES CL ON
      (CL.CODIGO = MO.CODVENDEDOR)
    LEFT JOIN CLIENTES CI ON
      (CI.CODIGO = MO.CODCLIENTE)
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :VALOR_TOTAL,
    :CODVENDEDOR,
    :ES,
    :TIPO,
    :PERCCOMIS_CALCULO,
    :CLIENTE_COMISSIONADO;

  /* MOVIMENTO É COMISSIONÁVEL ?? */
  IF (NOT ((ES = 2) AND (TIPO IN (3, 6)))) THEN
    EXIT;

  /* CLIENTE É COMISSIONADO */
  IF (CLIENTE_COMISSIONADO = 'S') THEN
   BEGIN

     /* PROCURO PRODUTOS E SERVICOS VENDIDOS */
     FOR
     SELECT
       PO.TIPOPRODUTO,
       ID.PS,
       SUM(ID.VALOR_PAGO)
     FROM
       PRODUTOS PO
       LEFT JOIN INDIVIDUAIS ID ON
         (ID.CODPRODUTO = PO.CODIGO)
     WHERE
       PO.COMISSIONADO = 'S' AND
       ID.CODMOVSAIDA = :CODMOVIMENTO AND
       ID.VENDIDO = 'S'
     GROUP BY
       PO.TIPOPRODUTO,
       ID.PS
     INTO
       :ITEM_TIPO,
       :ITEM_PS,
       :ITEM_VALOR
     DO
     BEGIN

       /* PROTEÇÃO */
       IF (ITEM_VALOR IS NULL) THEN
         ITEM_VALOR = 0;

       /* PRODUTO OU SERVICO ?? */
       IF (ITEM_PS = 'S') THEN
        BEGIN

          /* SERVIÇO SOMA PARA TECNICOS */
          SOMA_SERV = SOMA_SERV + ITEM_VALOR;

        END ELSE
        BEGIN

          /* PEÇA OU PRODUTO ?? */
          IF (ITEM_TIPO = 'F') THEN
           BEGIN

             /* PRODUTO FINAL SOMA PARA VENDEDOR */
             SOMA_PROD = SOMA_PROD + ITEM_VALOR;

           END ELSE
           BEGIN

             /* PEÇA DE REPOSIÇÃO SOMA PARA TECNICO */
             SOMA_PECA = SOMA_PECA + ITEM_VALOR;

           END

        END

     END

     /* CALCULO AS PORCENTAGENS */
     IF (VALOR_TOTAL > 0) THEN
      BEGIN
        PERCCOMIS_PROD = ((SOMA_PROD * 100) / VALOR_TOTAL);
        PERCCOMIS_PECA = ((SOMA_PECA * 100) / VALOR_TOTAL);
        PERCCOMIS_SERV = ((SOMA_SERV * 100) / VALOR_TOTAL);
      END ELSE
      BEGIN
        PERCCOMIS_PROD = 0;
        PERCCOMIS_PECA = 0;
        PERCCOMIS_SERV = 0;
      END

     /* COMISSIONAMENTO NO FATURAMENTO */
     IF (PERCCOMIS_CALCULO = 'F') THEN
      BEGIN

        /* LANÇAMENTO DE COMISSÃO PARA VENDEDOR */
        INSERT INTO
          COMISSOES (
            CODMOVIMENTO,
            CODVENDEDOR,
            DATA,
            CODPAGAMENTO,
            DESCRICAO,
            PERCCOMIS_CALCULO,
            VALOR,
            TIPOPRODUTO,
            PERCENTUAL)
          VALUES (
            :CODMOVIMENTO,
            :CODVENDEDOR,
            'NOW',
            NULL,
            'VENDEDOR PRODUTOS FATURAMENTO',
            :PERCCOMIS_CALCULO,
            :SOMA_PROD,
            'F',
            0);

        /* LANÇAMENTO DE COMISSÃO PARA TÉCNICOS */
        FOR
        SELECT
          OS.CODVENDEDOR,
          OS.PORCENTAGEM
        FROM
          OS_VENDER OS
        WHERE
          OS.CODMOVIMENTO = :CODMOVIMENTO
        INTO
          :CODTECNICO,
          :PERC_TECNICO
        DO
        BEGIN

          /* LANÇAMENTO SERVIÇOS PARA UM TECNICO */
          INSERT INTO
            COMISSOES (
              CODMOVIMENTO,
              CODVENDEDOR,
              DATA,
              CODPAGAMENTO,
              DESCRICAO,
              PERCCOMIS_CALCULO,
              VALOR,
              TIPOPRODUTO,
              PERCENTUAL)
            VALUES (
              :CODMOVIMENTO,
              :CODTECNICO,
              'NOW',
              NULL,
              'TECNICO SERVICOS FATURAMENTO',
              :PERCCOMIS_CALCULO,
              ((:SOMA_SERV * :PERC_TECNICO) / 100),
              'S',
              0);

          /* LANÇAMENTO PEÇAS PARA UM TECNICO */
          INSERT INTO
            COMISSOES (
              CODMOVIMENTO,
              CODVENDEDOR,
              DATA,
              CODPAGAMENTO,
              DESCRICAO,
              PERCCOMIS_CALCULO,
              VALOR,
              TIPOPRODUTO,
              PERCENTUAL)
            VALUES (
              :CODMOVIMENTO,
              :CODTECNICO,
              'NOW',
              NULL,
              'TECNICO PECAS FATURAMENTO',
              :PERCCOMIS_CALCULO,
              ((:SOMA_PECA * :PERC_TECNICO) / 100),
              'C',
              0);

        END

      END

   END ELSE
   BEGIN

     /* LANCAMENTO DO AVISO DE CLIENTE NÃO COMISSIONADO PARA VENDEDOR */
     INSERT INTO
       COMISSOES (
         CODMOVIMENTO,
         CODVENDEDOR,
         DATA,
         CODPAGAMENTO,
         DESCRICAO,
         PERCCOMIS_CALCULO,
         VALOR,
         TIPOPRODUTO,
         PERCENTUAL)
       VALUES (
         :CODMOVIMENTO,
         :CODVENDEDOR,
         'NOW',
         NULL,
         'CLIENTE NAO RENDE COMISSIONAMENTO',
         :PERCCOMIS_CALCULO,
         0,
         'F',
         0);

     /* LANÇAMENTO DE COMISSÃO PARA TÉCNICOS */
     FOR
     SELECT
       OS.CODVENDEDOR,
       OS.PORCENTAGEM
     FROM
       OS_VENDER OS
     WHERE
       OS.CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODTECNICO,
       :PERC_TECNICO
     DO
     BEGIN

       /* LANÇAMENTO PARA UM TECNICO */
       INSERT INTO
         COMISSOES (
           CODMOVIMENTO,
           CODVENDEDOR,
           DATA,
           CODPAGAMENTO,
           DESCRICAO,
           PERCCOMIS_CALCULO,
           VALOR,
           TIPOPRODUTO,
           PERCENTUAL)
         VALUES (
           :CODMOVIMENTO,
           :CODTECNICO,
           'NOW',
           NULL,
           'CLIENTE NAO RENDE COMISSIONAMENTO',
           :PERCCOMIS_CALCULO,
           0,
           'S',
           0);

     END

   END

  /* GRAVO DADOS APURADOS NO MOVIMENTO PARA FUTURA CONSULTA */
  UPDATE
    MOVIMENTOS
  SET
    PERCCOMIS_CALCULO   = :PERCCOMIS_CALCULO,
    PERCCOMIS_PROD = :PERCCOMIS_PROD,
    PERCCOMIS_PECA = :PERCCOMIS_PECA,
    PERCCOMIS_SERV = :PERCCOMIS_SERV
  WHERE
    CODIGO = :CODMOVIMENTO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO) OR
        (NEW.CODCLIENTE <> OLD.CODCLIENTE)) AND
        (NEW.TIPO IN (0, 1, 2, 5))) THEN
       EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE COMISSAO_CALC(NEW.CODIGO);

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

        EXECUTE PROCEDURE CADASTRA_EQUIPAMENTO(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÇÃO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (394, CURRENT_TIMESTAMP);
COMMIT;
