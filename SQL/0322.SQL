/*
** BAIXA APRIMORADA E MULTIPLA
*/

SET TERM ^ ;

ALTER PROCEDURE BAIXA (
    CODIGO INTEGER,
    MULTA_JUROS NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    TIPO CHAR(1),
    CONTA INTEGER,
    CODDOCUMENTO INTEGER,
    INFODOC VARCHAR(50))
AS
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE DESCRICAO VARCHAR(40);
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE VALOR NUMERIC(9,2);
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE NOVONUM NUMERIC(15,2);
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CODCLIENTE INTEGER;
DECLARE VARIABLE CODCENTRO INTEGER;
DECLARE VARIABLE CODPLANO INTEGER;
DECLARE VARIABLE PERCCOMIS_CALCULO CHAR(1);
DECLARE VARIABLE PERCCOMIS_PROD NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_PECA NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_SERV NUMERIC(9,2);
DECLARE VARIABLE CODVENDEDOR INTEGER;
DECLARE VARIABLE CODTECNICO INTEGER;
DECLARE VARIABLE PERC_TECNICO NUMERIC(9,2);
DECLARE VARIABLE TIPOP CHAR(1);
BEGIN

  /* VERIFICO SE CLIENTE ESTÁ PROTESTADO EM CARTÓRIO */
  SELECT
    CL.TIPO_IMPEDIMENTO
  FROM
    CLIENTES CL
    JOIN PAGAMENTOS PA ON
    (PA.CODCLIENTE = CL.CODIGO)
  WHERE
    PA.CODIGO = :CODIGO
  INTO
    :TIPOP;

  /* NÃO RECEBER */
  IF (TIPOP = 'P') THEN
    EXCEPTION PROTESTO_CARTORIO;

  /* FAÇO A BAIXA */
  UPDATE
    PAGAMENTOS
  SET
    PAGO = 1,
    MULTA_JUROS = :MULTA_JUROS,
    DESCONTO = :DESCONTO,
    CODCONTA = :CONTA,
    CODDOCUMENTO = :CODDOCUMENTO,
    INFODOC = :INFODOC
  WHERE
    CODIGO = :CODIGO;

  /* COMISSIONAMENTO NO RECEBIMENTO ?? */
  SELECT
    PA.CODMOVIMENTO,
    PA.TOTAL_PAGO,
    MO.PERCCOMIS_CALCULO,
    MO.PERCCOMIS_PROD,
    MO.PERCCOMIS_PECA,
    MO.PERCCOMIS_SERV,
    MO.CODVENDEDOR
  FROM
    PAGAMENTOS PA
    JOIN MOVIMENTOS MO ON
      (MO.CODIGO = PA.CODMOVIMENTO)
  WHERE
    PA.CODIGO = :CODIGO
  INTO
    :CODMOVIMENTO,
    :VALOR,
    :PERCCOMIS_CALCULO,
    :PERCCOMIS_PROD,
    :PERCCOMIS_PECA,
    :PERCCOMIS_SERV,
    :CODVENDEDOR;

  IF (PERCCOMIS_CALCULO = 'R') THEN
   BEGIN

     /* LANÇAMENTO DE COMISSÃO PARA VENDEDOR */
     INSERT INTO
       COMISSOES (
         CODMOVIMENTO,
         CODVENDEDOR,
         DATA,
         CODPAGAMENTO,
         DESCRICAO,
         PERCCOMIS_CALCULO,
         VALOR,
         TIPOPRODUTO,
         PERCENTUAL)
       VALUES (
         :CODMOVIMENTO,
         :CODVENDEDOR,
         'NOW',
         :CODIGO,
         'VENDEDOR PRODUTOS RECEBIMENTO',
         :PERCCOMIS_CALCULO,
         ((:VALOR * :PERCCOMIS_PROD) / 100),
         'F',
         0);

     /* LANÇAMENTO DE COMISSÃO PARA TÉCNICOS */
     FOR
     SELECT
       OS.CODVENDEDOR,
       OS.PORCENTAGEM
     FROM
       OS_VENDER OS
     WHERE
       OS.CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODTECNICO,
       :PERC_TECNICO
     DO
     BEGIN

       /* LANÇAMENTO SERVIÇOS PARA UM TECNICO */
       INSERT INTO
         COMISSOES (
         CODMOVIMENTO,
         CODVENDEDOR,
         DATA,
         CODPAGAMENTO,
         DESCRICAO,
         PERCCOMIS_CALCULO,
         VALOR,
         TIPOPRODUTO,
         PERCENTUAL)
       VALUES (
         :CODMOVIMENTO,
         :CODTECNICO,
         'NOW',
         :CODIGO,
         'TECNICO SERVICOS RECEBIMENTO',
         :PERCCOMIS_CALCULO,
         ((:VALOR * :PERCCOMIS_SERV) / 100) * (:PERC_TECNICO / 100),
         'S',
         0);

       /* LANÇAMENTO PEÇAS PARA UM TECNICO */
       INSERT INTO
         COMISSOES (
           CODMOVIMENTO,
           CODVENDEDOR,
           DATA,
           CODPAGAMENTO,
           DESCRICAO,
           PERCCOMIS_CALCULO,
           VALOR,
           TIPOPRODUTO,
           PERCENTUAL)
         VALUES (
           :CODMOVIMENTO,
           :CODTECNICO,
           'NOW',
           :CODIGO,
           'TECNICO PECAS RECEBIMENTO',
           :PERCCOMIS_CALCULO,
           ((:VALOR * :PERCCOMIS_PECA) / 100) * (:PERC_TECNICO / 100),
           'C',
           0);

     END

   END

  /* É UMA BAIXA PARCIAL */
  IF ((TIPO = 'P') AND (DESCONTO > 0)) THEN
   BEGIN

     /* LEIO OS DADOS DO PAGAMENTO */
     SELECT
       CODMOVIMENTO,
       UDF_LEFT(DESCRICAO, 35),
       ES,
       DESCONTO,
       DATAVENCIMENTO,
       CODEMPRESA,
       CODCLIENTE,
       CODCENTRO,
       CODPLANO
     FROM
       PAGAMENTOS
     WHERE
       CODIGO = :CODIGO
     INTO
       :CODMOVIMENTO,
       :DESCRICAO,
       :ES,
       :VALOR,
       :DATAVENCIMENTO,
       :CODEMPRESA,
       :CODCLIENTE,
       :CODCENTRO,
       :CODPLANO;

     /* PEGO O PROXIMO CODIGO */
     SELECT
       SEQUENCIA
     FROM
       SEQ_OBTER('PAGAMENTOS')
     INTO
       :CODIGO;

     /* ACERTO A DESCRICAO */
     DESCRICAO = 'ADIC ' || DESCRICAO;

     /* PEGO O NUMERO NOVO */
     SELECT
       MAX(NUMERO) + 1
     FROM
       PAGAMENTOS
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :NOVONUM;

     /* NUMERO */
     IF (NOVONUM IS NULL) THEN
       NOVONUM = 1;

     /* INSIRO O PAGAMENTO RESTANTE */
     INSERT INTO
       PAGAMENTOS (
         CODIGO,
         CODMOVIMENTO,
         NUMERO,
         DESCRICAO,
         ES,
         DATACADAST,
         VALOR,
         EXTERNO,
         PAGO,
         DESCONTO,
         MULTA_JUROS,
         DATAVENCIMENTO,
         SALDOANT,
         SALDOATU,
         CODCONTA,
         CODDOCUMENTO,
         CODEMPRESA,
         CODCLIENTE,
         CODCENTRO,
         CODPLANO)
       VALUES (
         :CODIGO,
         :CODMOVIMENTO,
         :NOVONUM,
         :DESCRICAO,
         :ES,
         'NOW',
         :VALOR,
         'S',
         0,
         0,
         0,
         :DATAVENCIMENTO,
         0,
         0,
         :CONTA,
         :CODDOCUMENTO,
         :CODEMPRESA,
         :CODCLIENTE,
         :CODCENTRO,
         :CODPLANO);

   END

END
^

SET TERM ; ^

SET TERM ^ ;

CREATE PROCEDURE PARSER_PAGAMENTOS (
    MOVCOM VARCHAR(254))
RETURNS (
    CODIGO INTEGER,
    CODMOVIMENTO INTEGER,
    NUMERO INTEGER)
AS
DECLARE VARIABLE TEMP VARCHAR(254);
DECLARE VARIABLE POS INTEGER;
BEGIN

  MOVCOM = UDF_TRIM(MOVCOM) || ' ';

  /* PROCESSAMENTO DAS BAIXAS MULTIPLAS */
  WHILE (UDF_POS(' ', MOVCOM) > 0) DO
   BEGIN

     /* POSIÇÃO DO ESPAÇO */
     POS = UDF_POS(' ', MOVCOM);

     /* PARTE DO TODO */
     TEMP = UDF_COPY(MOVCOM, 1, POS);
     TEMP = UDF_TRIM(TEMP);

     /* RESTANTE */
     MOVCOM = UDF_COPY(MOVCOM, POS + 1, UDF_LEN(MOVCOM) - POS);

     /* ZERO OS RESULTADOS */
     CODMOVIMENTO = NULL;
     NUMERO = NULL;
     CODIGO = NULL;

     /* CODIGO OU MOVIMENTO */
     IF (UDF_POS('/', TEMP) > 0) THEN
      BEGIN

        /* MOVIMENTO E NUMERO */
        POS = UDF_POS('/', TEMP);
        CODMOVIMENTO = CAST(UDF_COPY(TEMP, 1, POS - 1) AS INTEGER);
        NUMERO = CAST(UDF_COPY(TEMP, POS + 1, 2) AS INTEGER);

      END ELSE
      BEGIN

        /* SOMENTE O CODIGO DO PAGAMENTO */
        CODIGO = CAST(TEMP AS INTEGER);

      END

     SUSPEND;

   END

END
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE PARSER_PAGAMENTOS TO PUBLIC;

SET TERM ^ ;

CREATE PROCEDURE BAIXAMULT (
    CODCLIENTE INTEGER,
    MOVCOM VARCHAR(254),
    ACRESCIMOS NUMERIC(9,2),
    CODCONTA INTEGER)
AS
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE ACRESCIMO_PARCIAL INTEGER;
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE INFODOC VARCHAR(50);
DECLARE VARIABLE TOTAL_PAGO NUMERIC(9,2);
DECLARE VARIABLE CODDOCUMENTO INTEGER;
BEGIN

  /* SE HOUVER ACRESCIMOS */
  ACRESCIMO_PARCIAL = 0;
  IF (ACRESCIMOS > 0) THEN
   BEGIN

     /* NUMERO DE BAIXAS */
     SELECT
       COUNT(*)
     FROM
       PARSER_PAGAMENTOS(:MOVCOM)
     INTO
       :N;

     ACRESCIMO_PARCIAL = ACRESCIMOS / N;

   END

  /* PROCESSO AS BAIXAS */
  FOR
  SELECT
    CODIGO,
    CODMOVIMENTO,
    NUMERO
  FROM
    PARSER_PAGAMENTOS(:MOVCOM)
  INTO
    :CODIGO,
    :CODMOVIMENTO,
    :NUMERO
  DO
  BEGIN

    SELECT
      CODIGO,
      INFODOC,
      TOTAL_PAGO,
      CODDOCUMENTO
    FROM
      PAGAMENTOS
    WHERE
      ((CODIGO = :CODIGO) OR
       (CODMOVIMENTO = :CODMOVIMENTO AND
        NUMERO = :NUMERO)) AND
      PAGO = 0 AND
      ES IN (1, 2) AND
      CODCLIENTE = :CODCLIENTE
    INTO
      :CODPAG,
      :INFODOC,
      :TOTAL_PAGO,
      :CODDOCUMENTO;

    EXECUTE PROCEDURE BAIXA(
      :CODPAG,
      :ACRESCIMO_PARCIAL,
      0,
      'T',
      :CODCONTA,
      :CODDOCUMENTO,
      :INFODOC);

  END

END
^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE BAIXAMULT TO PUBLIC;

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (322, CURRENT_TIMESTAMP);
COMMIT;

