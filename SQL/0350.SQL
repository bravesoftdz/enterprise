/*
** BASE DE CALCULO DO ICMS POR CLIENTE - TIODONDON
*/

ALTER TABLE CLIENTES ADD CALC_BASEICMS SIMNAO;

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOCUPD
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
BEGIN

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

END
^

SET TERM ; ^

UPDATE CLIENTES SET CALC_BASEICMS = 'N';

SET TERM ^ ;

ALTER TRIGGER CLIENTES_DOCUPD
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE RETORNO INTEGER;
BEGIN

  EXECUTE PROCEDURE VALIDA_CPF(NEW.CPF)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CPF_ERRADO;

  EXECUTE PROCEDURE VALIDA_CNPJ(NEW.CGC)
    RETURNING_VALUES RETORNO;

  IF (RETORNO = 0) THEN
    EXCEPTION CGC_ERRADO;

END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE CALC_ICMS (
    CODMOVIMENTO INTEGER)
RETURNS (
    VALOR_ICMS NUMERIC(9,2),
    VALOR_IPI NUMERIC(9,2),
    BASE_ICMS NUMERIC(9,2))
AS
DECLARE VARIABLE CALC_BASEICMS CHAR(1);
DECLARE VARIABLE VALOR_PAGO NUMERIC(9,2);
DECLARE VARIABLE IPI NUMERIC(9,2);
DECLARE VARIABLE XIPI CHAR(1);
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_VALORPAGO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BASEICMS NUMERIC(9,2);
DECLARE VARIABLE TEMP_VALORICMS NUMERIC(9,2);
BEGIN
  VALOR_IPI = 0;
  VALOR_ICMS = 0;
  VALOR_PAGO = 0;
  BASE_ICMS = 0;

  FOR
  SELECT
    ID.CODPRODUTO,
    SUM(ID.VALOR_PAGO),
    (SUM(ID.VALOR_PAGO) * PO.ICMS_BASE) / 100,
    CAST(((((SUM(ID.VALOR_PAGO) * PO.ICMS_BASE) / 100) * PO.ICMS) / 100) AS NUMERIC(9,2))
  FROM
    INDIVIDUAIS ID
    JOIN PRODUTOS PO ON
      (PO.CODIGO = ID.CODPRODUTO)
  WHERE
    ID.CODMOVSAIDA = :CODMOVIMENTO AND
    ID.VENDIDO = 'S' AND
    ID.PS = 'P'
  GROUP BY
    CODPRODUTO,
    PO.ICMS,
    PO.ICMS_BASE
  INTO
    :TEMP_CODPRODUTO,
    :TEMP_VALORPAGO,
    :TEMP_BASEICMS,
    :TEMP_VALORICMS
  DO
  BEGIN
    VALOR_ICMS = VALOR_ICMS + TEMP_VALORICMS;
    VALOR_PAGO = VALOR_PAGO + TEMP_VALORPAGO;
    BASE_ICMS  = BASE_ICMS  + TEMP_BASEICMS;
  END

  SELECT
    CL.CALC_BASEICMS
  FROM
    CLIENTES CL
    JOIN MOVIMENTOS MO ON
      (MO.CODCLIENTE = CL.CODIGO)
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :CALC_BASEICMS;

  IF (CALC_BASEICMS = 'N') THEN
    BASE_ICMS = VALOR_PAGO;

  VALOR_IPI = VALOR_PAGO * (IPI / 100);

  /* VERIFICO IPI */
  SELECT
    NA.IPI
  FROM
    NATUOPER NA
    JOIN MOVIMENTOS MO ON
      (MO.NOTA_CODNATUOPER = NA.CODIGO)
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :XIPI;

  IF (XIPI IS NULL) THEN
    XIPI = 'N';

  IF ((VALOR_IPI IS NULL) OR (XIPI = 'N')) THEN
    VALOR_IPI = 0;

  IF (VALOR_ICMS IS NULL) THEN
    VALOR_ICMS = 0;

  SUSPEND;
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER STATUS_UPDATE
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
DECLARE VARIABLE TDATAINI TIMESTAMP;
DECLARE VARIABLE TDATAFIM TIMESTAMP;
BEGIN

   /* DATA DA ENTREGA */
   IF ((NEW.QUEM_RECEBEU IS NOT NULL) AND (OLD.QUEM_RECEBEU IS NULL)) THEN
     NEW.DATA_ENTREGA = CURRENT_TIMESTAMP;

   /* DATA DA AUTORIZAÇÃO */
   IF ((NEW.QUEM_AUTORIZOU IS NOT NULL) AND (OLD.QUEM_AUTORIZOU IS NULL)) THEN
     NEW.DATA_AUTORIZADO = CURRENT_TIMESTAMP;

   /* CONFIGURAÇÕES DO HISTÓRIO DE PAGAMENTOS */
   IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
    BEGIN
      SELECT
        CODNATUOPER
      FROM
        HISTORICOPAG
      WHERE
        CODIGO = NEW.CODHISTORICOPAG
      INTO
        NEW.NOTA_CODNATUOPER;
    END

   /* CONFIGURAÇÕES DA NATUREZA DE OPERAÇÃO */
   SELECT
     VENDA,
     ESTOQUE,
     ICMS,
     IPI
   FROM
     NATUOPER
   WHERE
     CODIGO = NEW.NOTA_CODNATUOPER
   INTO
     NEW.NO_VENDA,
     NEW.NO_ESTOQUE,
     NEW.NO_ICMS,
     NEW.NO_IPI;

   IF (NEW.TIPO = 1) THEN
    BEGIN

      IF (NEW.ES = 0) THEN
       BEGIN
         NEW.STATUS = 'ORC ABERTO';
         IF (NEW.AUTORIZADO = 'S') THEN
          BEGIN
            NEW.STATUS = 'ORC AUTORIZADO';
          END ELSE
          BEGIN
            IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
              NEW.STATUS = 'ORC NAO AUTO';
            IF ((NEW.RETORNO = 'S') AND (NEW.DATA_RETORNO IS NOT NULL)) THEN
              NEW.STATUS = 'ORC RETORNAR';
          END
       END

      IF (NEW.ES = 1) THEN
       BEGIN
         IF (NEW.FECHADO = 'S') THEN
            NEW.STATUS = 'COMPRA';
         ELSE
            NEW.STATUS = 'PED COMPRA';
       END

    END

   IF (NEW.TIPO = 2) THEN
    BEGIN
      NEW.STATUS = 'OS ABERTA';

      /* VERIFICO SE O TECNICO JÁ INICIOU */
      SELECT FIRST 1
        DATAINI,
        DATAFIM
      FROM
        OS_VENDER
      WHERE
        CODMOVIMENTO = NEW.CODIGO
      INTO
        :TDATAINI,
        :TDATAFIM;

      IF (TDATAINI IS NOT NULL) THEN
       BEGIN
         NEW.STATUS = 'OS INICIADA';

         IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
          BEGIN

            IF (NEW.AUTORIZADO = 'N') THEN
              NEW.STATUS = 'OS NAO AUTO';
            ELSE
              IF (TDATAFIM IS NULL) THEN
                NEW.STATUS = 'OS AUTORIZADA';
              ELSE
                NEW.STATUS = 'OS CONCLUIDA';
          END

         IF (NEW.DATA_ENTREGA IS NOT NULL) THEN
           NEW.STATUS = 'OS ENTREGUE';

       END
    END

   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÇÃO';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* VERIFICO O NUMERADOR */
   EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
     NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

   /* CALCULAR IMPOSTOS */
   IF ((NEW.ES = 2)                  AND
       (NEW.TIPO IN (3, 6))          AND
       (OLD.TIPO IN (2, 5)))         THEN
    BEGIN
      /* TOTAL ICMS */
      EXECUTE PROCEDURE CALC_ICMS(NEW.CODIGO)
        RETURNING_VALUES NEW.VALOR_ICMS, NEW.VALOR_IPI_PRODUTOS,
          NEW.NOTA_BASEICMS;
      IF (NEW.NO_ICMS = 'N') THEN
        NEW.VALOR_ICMS = 0;
      IF (NEW.NO_IPI = 'N') THEN
        NEW.VALOR_IPI_PRODUTOS = 0;
      IF (NEW.NOTA_BASEICMS IS NULL) THEN
        NEW.NOTA_BASEICMS = 0;
    END

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÁRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = 'NOW';

      NEW.FECHADO = 'S';

      IF ((UDF_TRIM(NEW.USUARIOFECHAMENTO) = '') OR (NEW.USUARIOFECHAMENTO IS NULL)) THEN
        NEW.USUARIOFECHAMENTO = USER;

      /* VINCULAR SERIAL NA VENDA FECHADA */
      IF (NEW.TIPO = 6) THEN
        EXECUTE PROCEDURE VINCULO_SERIE NEW.CODIGO
          RETURNING_VALUES NEW.SERIE;

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         NEW.DATAINICIO  = PRIMEIRO;

         NEW.DATATERMINO = ULTIMO;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (350, CURRENT_TIMESTAMP);
COMMIT;

