/*
** SYNC
*/

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_VENDEDOR_INS FOR MOVIMENTOS
INACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
/* NOME DO VENDEDOR */
SELECT
NOME
FROM
CLIENTES
WHERE
CODIGO = NEW.CODVENDEDOR
INTO
NEW.NOME_VENDEDOR;
/* TERRITORIO DA OS */
SELECT FIRST 1
CE.TERRITORIO
FROM
CLI_EQUIP CE
WHERE
CE.CODCLIENTE = NEW.CODCLIENTE AND
CE.CODMARCA = NEW.CODMARCA AND
CE.CODMODELO = NEW.CODMODELO AND
CE.SERIE = NEW.SERIE
INTO
NEW.TERRITORIO;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER STATUS_INSERT FOR MOVIMENTOS
INACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (NEW.TIPO = 1) THEN
   BEGIN
     IF (NEW.ES = 0) THEN
       NEW.STATUS = 'ORC ABERTO';
     IF (NEW.ES = 1) THEN
       NEW.STATUS = 'COMPRA';
   END
  IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA NÃƑO SOLUCIONADA';
  IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS SOLUCIONADA FATURADA';
  IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÃ‡ÃƑO';
  IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
  IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
  IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
  IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
  IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNADO';

  /* VERIFICO O NUMERADOR */
  EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
    NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

  /* BASES DE CALCULO DO ICMS E ISS */
  SELECT
    ALIQUOTA_ISS,
    ALIQUOTA_ICMSSIMPLES,
    ICMSSIMPLES
  FROM
    SISCONFIG
  WHERE
    CODIGO = NEW.CODEMPRESA
  INTO
    NEW.ISSALIQ,
    NEW.ICMSSIMPALIQ,
    NEW.ICMSSIMPLES;

  /* CONFIGURAÃ‡Ã•ES DO HISTÃ“RIO DE PAGAMENTOS */
  IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
   BEGIN
     SELECT
       CODNATUOPER
     FROM
       HISTORICOPAG
     WHERE
       CODIGO = NEW.CODHISTORICOPAG
     INTO
       NEW.NOTA_CODNATUOPER;
   END ELSE
   BEGIN

     IF (NEW.NOTA_CODNATUOPER IS NULL) THEN
      BEGIN

        IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
         BEGIN

           SELECT
             SI.NATUOPER_COMPRA
           FROM
             SISCONFIG SI
           WHERE
             SI.CODIGO = NEW.CODEMPRESA
           INTO
             NEW.NOTA_CODNATUOPER;

         END
      END

   END

  /* CONFIGURAÃ‡Ã•ES DA NATUREZA DE OPERAÃ‡ÃƑO */
  SELECT
    VENDA,
    ESTOQUE,
    ICMS,
    IPI
  FROM
    NATUOPER
  WHERE
    CODIGO = NEW.NOTA_CODNATUOPER
  INTO
    NEW.NO_VENDA,
    NEW.NO_ESTOQUE,
    NEW.NO_ICMS,
    NEW.NO_IPI;

  /* INICIALIZAÃ‡ÃƑO DO RETORNO */
  NEW.RETORNO = 'N';

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_AFTINS FOR MOVIMENTOS
INACTIVE AFTER INSERT POSITION 0
AS
BEGIN
  IF (NEW.ES IN (0, 1, 2)) THEN
    EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD FOR MOVIMENTOS
INACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN
  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;

  /* LINHA DO CLIENTE */
  SELECT
    CL.CODLINHA
  FROM
    CLIENTES CL
  WHERE
    CL.CODIGO = NEW.CODCLIENTE
  INTO
    NEW.CODLINHA;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER STATUS_UPDATE FOR MOVIMENTOS
INACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN

   /* DATA DA ENTREGA */
   IF ((NEW.QUEM_RECEBEU IS NOT NULL) AND (OLD.QUEM_RECEBEU IS NULL)) THEN
     NEW.DATA_ENTREGA = CURRENT_TIMESTAMP;

   /* DATA DA AUTORIZAÃ‡ÃƑO */
   IF ((NEW.QUEM_AUTORIZOU IS NOT NULL) AND (OLD.QUEM_AUTORIZOU IS NULL)) THEN
     NEW.DATA_AUTORIZADO = CURRENT_TIMESTAMP;

   /* CONFIGURAÃ‡Ã•ES DO HISTÃ“RIO DE PAGAMENTOS */
   IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
    BEGIN
      SELECT
        CODNATUOPER
      FROM
        HISTORICOPAG
      WHERE
        CODIGO = NEW.CODHISTORICOPAG
      INTO
        NEW.NOTA_CODNATUOPER;
    END

   /* CONFIGURAÃ‡Ã•ES DA NATUREZA DE OPERAÃ‡ÃƑO */
   SELECT
     VENDA,
     ESTOQUE,
     ICMS,
     IPI
   FROM
     NATUOPER
   WHERE
     CODIGO = NEW.NOTA_CODNATUOPER
   INTO
     NEW.NO_VENDA,
     NEW.NO_ESTOQUE,
     NEW.NO_ICMS,
     NEW.NO_IPI;

   IF (NEW.TIPO = 1) THEN
    BEGIN

      IF (NEW.ES = 0) THEN
       BEGIN
         NEW.STATUS = 'ORC ABERTO';
         IF (NEW.AUTORIZADO = 'S') THEN
          BEGIN
            NEW.STATUS = 'ORC AUTORIZADO';
          END ELSE
          BEGIN
            IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
              NEW.STATUS = 'ORC NAO AUTO';
            IF ((NEW.RETORNO = 'S') AND (NEW.DATA_RETORNO IS NOT NULL)) THEN
              NEW.STATUS = 'ORC RETORNAR';
          END
       END

      IF (NEW.ES = 1) THEN
       BEGIN
         IF (NEW.FECHADO = 'S') THEN
            NEW.STATUS = 'COMPRA';
         ELSE
            NEW.STATUS = 'PED COMPRA';
       END

    END

   IF (NEW.TIPO = 2) THEN
    BEGIN
      NEW.STATUS = 'OS ABERTA';

      /* VERIFICO SE O TECNICO JÃ INICIOU */
      SELECT
        MIN(CODVENDEDOR),
        MIN(DATAINI),
        MAX(DATAFIM)
      FROM
        OS_VENDER
      WHERE
        CODMOVIMENTO = NEW.CODIGO
      INTO
        NEW.CODTECNICO,
        NEW.DATAINICIO,
        NEW.DATATERMINO;

      IF (NEW.DATAINICIO IS NOT NULL) THEN
       BEGIN
         NEW.STATUS = 'OS INICIADA';

         IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
          BEGIN

            IF (NEW.AUTORIZADO = 'N') THEN
              NEW.STATUS = 'OS NAO AUTO';
            ELSE
              IF (NEW.DATATERMINO IS NULL) THEN
                NEW.STATUS = 'OS AUTORIZADA';
              ELSE
                NEW.STATUS = 'OS CONCLUIDA';
          END

         IF (NEW.DATA_ENTREGA IS NOT NULL) THEN
           NEW.STATUS = 'OS ENTREGUE';

       END
    END

   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÃ‡ÃƑO';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* CALCULAR IMPOSTOS */
   IF ((NEW.ES = 2)                  AND
       (NEW.TIPO IN (3, 6))          AND
       (OLD.TIPO IN (2, 5)))         THEN
    BEGIN
      /* TOTAL ICMS */
      EXECUTE PROCEDURE CALC_ICMS(NEW.CODIGO)
        RETURNING_VALUES NEW.VALOR_ICMS, NEW.VALOR_IPI_PRODUTOS,
          NEW.NOTA_BASEICMS;
      IF (NEW.NO_ICMS = 'N') THEN
        NEW.VALOR_ICMS = 0;
      IF (NEW.NO_IPI = 'N') THEN
        NEW.VALOR_IPI_PRODUTOS = 0;
      IF (NEW.NOTA_BASEICMS IS NULL) THEN
        NEW.NOTA_BASEICMS = 0;
    END

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÃRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = CURRENT_TIMESTAMP;

      NEW.FECHADO = 'S';

      IF ((UDF_TRIM(NEW.USUARIOFECHAMENTO) = '') OR (NEW.USUARIOFECHAMENTO IS NULL)) THEN
        NEW.USUARIOFECHAMENTO = USER;

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

        SELECT FIRST 1
          CODVENDEDOR
        FROM
          OS_VENDER
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          NEW.CODTECNICO;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_BU4 FOR MOVIMENTOS
INACTIVE BEFORE UPDATE POSITION 400
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  IF (NEW.DATAFECHAMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAFECHAMENTO)
      RETURNING_VALUES
        NEW.FECHA_DATA_FLUXO,
        DIA_FLUXO,
        NEW.FECHA_SEMANA_FLUXO,
        NEW.FECHA_MES_FLUXO,
        NEW.FECHA_BIMESTRE_FLUXO,
        NEW.FECHA_TRIMESTRE_FLUXO,
        NEW.FECHA_QUADRIMESTRE_FLUXO,
        NEW.FECHA_SEMESTRE_FLUXO,
        NEW.FECHA_ANO_FLUXO,
        NEW.FECHA_STR_SEMANA_FLUXO,
        NEW.FECHA_STR_MES_FLUXO,
        NEW.FECHA_STR_BIMESTRE_FLUXO,
        NEW.FECHA_STR_TRIMESTRE_FLUXO,
        NEW.FECHA_STR_QUADRIMESTRE_FLUXO,
        NEW.FECHA_STR_SEMESTRE_FLUXO;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_AFTUPD FOR MOVIMENTOS
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     /* GERAÃ‡ÃƑO INTELIGENTE DAS PARCELAS */
     IF (NEW.TIPO IN (0, 1, 2, 5)) THEN
      BEGIN

        IF ((NEW.CODCLIENTE <> OLD.CODCLIENTE) OR
            (NEW.CONDICAO <> OLD.CONDICAO)) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
        ELSE IF (NEW.NOTA_VALOR_TOTAL <> OLD.NOTA_VALOR_TOTAL) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 1);

      END

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÃ‡ÃƑO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N',
             CODMOVSAIDA = NULL
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

           /* EXCLUO O ESTOQUE */
           DELETE FROM
             INDIVIDUAIS
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_AFTUPD FOR MOVIMENTOS
INACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     /* GERAÃ‡ÃƑO INTELIGENTE DAS PARCELAS */
     IF (NEW.TIPO IN (0, 1, 2, 5)) THEN
      BEGIN

        IF ((NEW.CODCLIENTE <> OLD.CODCLIENTE) OR
            (NEW.CONDICAO <> OLD.CONDICAO)) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
        ELSE IF (NEW.NOTA_VALOR_TOTAL <> OLD.NOTA_VALOR_TOTAL) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 1);

      END

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÃ‡ÃƑO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N',
             CODMOVSAIDA = NULL
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

           /* EXCLUO O ESTOQUE */
           DELETE FROM
             INDIVIDUAIS
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END^

SET TERM ; ^

ALTER TABLE MOVIMENTOS
ADD SYNC_SITE INTEIRO;

UPDATE MOVIMENTOS SET SYNC_SITE = 0;

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_VENDEDOR_INS FOR MOVIMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

    /* SYNC */
    NEW.SYNC_SITE = 1;

    /* NOME DO VENDEDOR */
    SELECT
        NOME
    FROM
        CLIENTES
    WHERE
        CODIGO = NEW.CODVENDEDOR
    INTO
        NEW.NOME_VENDEDOR;

    /* TERRITORIO DA OS */
    SELECT FIRST 1
        CE.TERRITORIO
    FROM
        CLI_EQUIP CE
    WHERE
        CE.CODCLIENTE = NEW.CODCLIENTE AND
        CE.CODMARCA = NEW.CODMARCA AND
        CE.CODMODELO = NEW.CODMODELO AND
        CE.SERIE = NEW.SERIE
    INTO
        NEW.TERRITORIO;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER STATUS_INSERT FOR MOVIMENTOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN

  IF (NEW.TIPO = 1) THEN
   BEGIN
     IF (NEW.ES = 0) THEN
       NEW.STATUS = 'ORC ABERTO';
     IF (NEW.ES = 1) THEN
       NEW.STATUS = 'COMPRA';
   END
  IF (NEW.TIPO = 2) THEN NEW.STATUS = 'OS ABERTA NÃƑO SOLUCIONADA';
  IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS SOLUCIONADA FATURADA';
  IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÃ‡ÃƑO';
  IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
  IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
  IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
  IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
  IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNADO';

  /* VERIFICO O NUMERADOR */
  EXECUTE PROCEDURE VALIDA_NUMERADOR(NEW.NUMERADOR, NEW.CODCLIENTE,
    NEW.CODMARCA, NEW.CODMODELO, NEW.SERIE);

  /* BASES DE CALCULO DO ICMS E ISS */
  SELECT
    ALIQUOTA_ISS,
    ALIQUOTA_ICMSSIMPLES,
    ICMSSIMPLES
  FROM
    SISCONFIG
  WHERE
    CODIGO = NEW.CODEMPRESA
  INTO
    NEW.ISSALIQ,
    NEW.ICMSSIMPALIQ,
    NEW.ICMSSIMPLES;

  /* CONFIGURAÃ‡Ã•ES DO HISTÃ“RIO DE PAGAMENTOS */
  IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
   BEGIN
     SELECT
       CODNATUOPER
     FROM
       HISTORICOPAG
     WHERE
       CODIGO = NEW.CODHISTORICOPAG
     INTO
       NEW.NOTA_CODNATUOPER;
   END ELSE
   BEGIN

     IF (NEW.NOTA_CODNATUOPER IS NULL) THEN
      BEGIN

        IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
         BEGIN

           SELECT
             SI.NATUOPER_COMPRA
           FROM
             SISCONFIG SI
           WHERE
             SI.CODIGO = NEW.CODEMPRESA
           INTO
             NEW.NOTA_CODNATUOPER;

         END
      END

   END

  /* CONFIGURAÃ‡Ã•ES DA NATUREZA DE OPERAÃ‡ÃƑO */
  SELECT
    VENDA,
    ESTOQUE,
    ICMS,
    IPI
  FROM
    NATUOPER
  WHERE
    CODIGO = NEW.NOTA_CODNATUOPER
  INTO
    NEW.NO_VENDA,
    NEW.NO_ESTOQUE,
    NEW.NO_ICMS,
    NEW.NO_IPI;

  /* INICIALIZAÃ‡ÃƑO DO RETORNO */
  NEW.RETORNO = 'N';

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_AFTINS FOR MOVIMENTOS
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
  IF (NEW.ES IN (0, 1, 2)) THEN
    EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_VENDEDOR_UPD FOR MOVIMENTOS
ACTIVE BEFORE UPDATE POSITION 0
AS
BEGIN

  /* SYNC */
  NEW.SYNC_SITE = 1;

  /* NOME DO VENDEDOR */
  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = NEW.CODVENDEDOR
  INTO
    NEW.NOME_VENDEDOR;

  /* LINHA DO CLIENTE */
  SELECT
    CL.CODLINHA
  FROM
    CLIENTES CL
  WHERE
    CL.CODIGO = NEW.CODCLIENTE
  INTO
    NEW.CODLINHA;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER STATUS_UPDATE FOR MOVIMENTOS
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE PRIMEIRO TIMESTAMP;
DECLARE VARIABLE ULTIMO TIMESTAMP;
DECLARE VARIABLE TOTAL DOUBLE PRECISION;
BEGIN

   /* DATA DA ENTREGA */
   IF ((NEW.QUEM_RECEBEU IS NOT NULL) AND (OLD.QUEM_RECEBEU IS NULL)) THEN
     NEW.DATA_ENTREGA = CURRENT_TIMESTAMP;

   /* DATA DA AUTORIZAÃ‡ÃƑO */
   IF ((NEW.QUEM_AUTORIZOU IS NOT NULL) AND (OLD.QUEM_AUTORIZOU IS NULL)) THEN
     NEW.DATA_AUTORIZADO = CURRENT_TIMESTAMP;

   /* CONFIGURAÃ‡Ã•ES DO HISTÃ“RIO DE PAGAMENTOS */
   IF (NEW.CODHISTORICOPAG IS NOT NULL) THEN
    BEGIN
      SELECT
        CODNATUOPER
      FROM
        HISTORICOPAG
      WHERE
        CODIGO = NEW.CODHISTORICOPAG
      INTO
        NEW.NOTA_CODNATUOPER;
    END

   /* CONFIGURAÃ‡Ã•ES DA NATUREZA DE OPERAÃ‡ÃƑO */
   SELECT
     VENDA,
     ESTOQUE,
     ICMS,
     IPI
   FROM
     NATUOPER
   WHERE
     CODIGO = NEW.NOTA_CODNATUOPER
   INTO
     NEW.NO_VENDA,
     NEW.NO_ESTOQUE,
     NEW.NO_ICMS,
     NEW.NO_IPI;

   IF (NEW.TIPO = 1) THEN
    BEGIN

      IF (NEW.ES = 0) THEN
       BEGIN
         NEW.STATUS = 'ORC ABERTO';
         IF (NEW.AUTORIZADO = 'S') THEN
          BEGIN
            NEW.STATUS = 'ORC AUTORIZADO';
          END ELSE
          BEGIN
            IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
              NEW.STATUS = 'ORC NAO AUTO';
            IF ((NEW.RETORNO = 'S') AND (NEW.DATA_RETORNO IS NOT NULL)) THEN
              NEW.STATUS = 'ORC RETORNAR';
          END
       END

      IF (NEW.ES = 1) THEN
       BEGIN
         IF (NEW.FECHADO = 'S') THEN
            NEW.STATUS = 'COMPRA';
         ELSE
            NEW.STATUS = 'PED COMPRA';
       END

    END

   IF (NEW.TIPO = 2) THEN
    BEGIN
      NEW.STATUS = 'OS ABERTA';

      /* VERIFICO SE O TECNICO JÃ INICIOU */
      SELECT
        MIN(CODVENDEDOR),
        MIN(DATAINI),
        MAX(DATAFIM)
      FROM
        OS_VENDER
      WHERE
        CODMOVIMENTO = NEW.CODIGO
      INTO
        NEW.CODTECNICO,
        NEW.DATAINICIO,
        NEW.DATATERMINO;

      IF (NEW.DATAINICIO IS NOT NULL) THEN
       BEGIN
         NEW.STATUS = 'OS INICIADA';

         IF (NEW.DATA_AUTORIZADO IS NOT NULL) THEN
          BEGIN

            IF (NEW.AUTORIZADO = 'N') THEN
              NEW.STATUS = 'OS NAO AUTO';
            ELSE
              IF (NEW.DATATERMINO IS NULL) THEN
                NEW.STATUS = 'OS AUTORIZADA';
              ELSE
                NEW.STATUS = 'OS CONCLUIDA';
          END

         IF (NEW.DATA_ENTREGA IS NOT NULL) THEN
           NEW.STATUS = 'OS ENTREGUE';

       END
    END

   IF (NEW.TIPO = 3) THEN NEW.STATUS = 'OS FECHADA';
   IF (NEW.TIPO = 4) THEN NEW.STATUS = 'PRODUÃ‡ÃƑO';
   IF (NEW.TIPO = 5) THEN NEW.STATUS = 'VENDA ABERTA';
   IF (NEW.TIPO = 6) THEN NEW.STATUS = 'VENDA FECHADA';
   IF (NEW.TIPO = 7) THEN NEW.STATUS = 'N/F';
   IF (NEW.TIPO = 8) THEN NEW.STATUS = 'REMESSA';
   IF (NEW.TIPO = 9) THEN NEW.STATUS = 'ESTORNO';

   /* CALCULAR IMPOSTOS */
   IF ((NEW.ES = 2)                  AND
       (NEW.TIPO IN (3, 6))          AND
       (OLD.TIPO IN (2, 5)))         THEN
    BEGIN
      /* TOTAL ICMS */
      EXECUTE PROCEDURE CALC_ICMS(NEW.CODIGO)
        RETURNING_VALUES NEW.VALOR_ICMS, NEW.VALOR_IPI_PRODUTOS,
          NEW.NOTA_BASEICMS;
      IF (NEW.NO_ICMS = 'N') THEN
        NEW.VALOR_ICMS = 0;
      IF (NEW.NO_IPI = 'N') THEN
        NEW.VALOR_IPI_PRODUTOS = 0;
      IF (NEW.NOTA_BASEICMS IS NULL) THEN
        NEW.NOTA_BASEICMS = 0;
    END

   /* FECHOU A VENDA */
   IF ((OLD.TIPO IN (2, 5)) AND (NEW.TIPO IN (3, 6))) THEN
    BEGIN

      /* USUÃRIO, DATA E HORA DO FECHAMENTO */
      NEW.DATAFECHAMENTO = CURRENT_TIMESTAMP;

      NEW.FECHADO = 'S';

      IF ((UDF_TRIM(NEW.USUARIOFECHAMENTO) = '') OR (NEW.USUARIOFECHAMENTO IS NULL)) THEN
        NEW.USUARIOFECHAMENTO = USER;

      /* TEMPOS DE ATENDIMENTO, SE FOR OS */
      IF (NEW.TIPO = 3) THEN
       BEGIN

         SELECT
           MIN(DATAINI),
           MAX(DATAFIM),
           SUM(THORAS)
         FROM
           OS_VENDER
         WHERE
           CODMOVIMENTO = NEW.CODIGO
         INTO
           :PRIMEIRO,
           :ULTIMO,
           :TOTAL;

        SELECT FIRST 1
          CODVENDEDOR
        FROM
          OS_VENDER
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          NEW.CODTECNICO;

         NEW.TEMPO_CHEGADA    = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, PRIMEIRO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_CONCLUSAO  = CAST(
           UDF_MINUTESBETWEEN(NEW.DATA, ULTIMO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_LANCAMENTO = CAST(
           UDF_MINUTESBETWEEN(ULTIMO, NEW.DATAFECHAMENTO)
           AS DOUBLE PRECISION) / 60;

         NEW.TEMPO_TECNICOS = TOTAL;

         IF (PRIMEIRO > NEW.DATAPREVISAO) THEN
           NEW.TEMPO_FORADOPRAZO = CAST(
             UDF_MINUTESBETWEEN(NEW.DATAPREVISAO, PRIMEIRO)
             AS DOUBLE PRECISION) / 60;
         ELSE
           NEW.TEMPO_FORADOPRAZO = 0;

       END

      NEW.TEMPO_CICLO = CAST(
        UDF_MINUTESBETWEEN(NEW.DATA, NEW.DATAFECHAMENTO)
        AS DOUBLE PRECISION) / 60;

    END

   /* RATEIO DOS CUSTOS DE COMPRA */
   IF ((NEW.ES = 1) AND (NEW.TIPO = 1)) THEN
     EXECUTE PROCEDURE RATEIO_CUSTOS (
       NEW.CODIGO,
       NEW.VALOR_PRODUTOS,
       NEW.VALOR_RATEIO_CUSTO);

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_BU4 FOR MOVIMENTOS
ACTIVE BEFORE UPDATE POSITION 400
AS
DECLARE VARIABLE DIA_FLUXO INTEGER;
BEGIN

  IF (NEW.DATAFECHAMENTO IS NOT NULL) THEN
    EXECUTE PROCEDURE ANALISE_DATA(NEW.DATAFECHAMENTO)
      RETURNING_VALUES
        NEW.FECHA_DATA_FLUXO,
        DIA_FLUXO,
        NEW.FECHA_SEMANA_FLUXO,
        NEW.FECHA_MES_FLUXO,
        NEW.FECHA_BIMESTRE_FLUXO,
        NEW.FECHA_TRIMESTRE_FLUXO,
        NEW.FECHA_QUADRIMESTRE_FLUXO,
        NEW.FECHA_SEMESTRE_FLUXO,
        NEW.FECHA_ANO_FLUXO,
        NEW.FECHA_STR_SEMANA_FLUXO,
        NEW.FECHA_STR_MES_FLUXO,
        NEW.FECHA_STR_BIMESTRE_FLUXO,
        NEW.FECHA_STR_TRIMESTRE_FLUXO,
        NEW.FECHA_STR_QUADRIMESTRE_FLUXO,
        NEW.FECHA_STR_SEMESTRE_FLUXO;

END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER MOVIMENTOS_AFTUPD FOR MOVIMENTOS
ACTIVE AFTER UPDATE POSITION 0
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     /* GERAÃ‡ÃƑO INTELIGENTE DAS PARCELAS */
     IF (NEW.TIPO IN (0, 1, 2, 5)) THEN
      BEGIN

        IF ((NEW.CODCLIENTE <> OLD.CODCLIENTE) OR
            (NEW.CONDICAO <> OLD.CONDICAO)) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 0);
        ELSE IF (NEW.NOTA_VALOR_TOTAL <> OLD.NOTA_VALOR_TOTAL) THEN
           EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO, 1);

      END

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

      END

     /* COMPRA DE PRODUTOS */
     IF ((NEW.ES = 1) AND (NEW.TIPO = 1) AND (OLD.FECHADO = 'N') AND (NEW.FECHADO = 'S')) THEN
       EXECUTE PROCEDURE COMPRA_ESTOQUE NEW.CODIGO;

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* COMPRA OU VENDA */
     IF (NEW.ES = 2) THEN
      BEGIN

        /* GUARDO OS ITENS ESTORNADOS */
        FOR
        SELECT
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA,
          SUM(QUANTIDADE)
        FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO
        GROUP BY
          CODPRODUTO,
          SERIE,
          SERIE2,
          VALOR_VENDA,
          DESCONTO,
          BARRA,
          ICMSVENDA
        INTO
          TEMP_CODPRODUTO,
          TEMP_SERIE,
          TEMP_SERIE2,
          TEMP_VALOR_VENDA,
          TEMP_DESCONTO,
          TEMP_BARRA,
          TEMP_ICMSVENDA,
          TEMP_QUANTIDADE
        DO
        BEGIN

          /* CODIGO UNICO DO TEMPITENS */
          EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
            RETURNING_VALUES TEMP_CODIGO;

          /* GUARDO ITEM UM A UM */
          INSERT INTO
            TEMPITENS (
              CODIGO,
              CODMOVIMENTO,
              CODPRODUTO,
              QUANTIDADE,
              VALOR_UNITARIO,
              DESCONTO,
              SITTRIBU,
              MARGEM,
              REAJUSTAR,
              VALOR_VENDA,
              ICMSCOMPRA,
              ICMSVENDA,
              IPI,
              SERIE,
              SERIE2,
              BARRA)
            VALUES (
              :TEMP_CODIGO,
              NEW.CODIGO,
              :TEMP_CODPRODUTO,
              :TEMP_QUANTIDADE,
              :TEMP_VALOR_VENDA,
              :TEMP_DESCONTO,
              '0.0',
              0,
              'N',
              (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
              :TEMP_ICMSVENDA,
              :TEMP_ICMSVENDA,
              0,
              :TEMP_SERIE,
              :TEMP_SERIE2,
              :TEMP_BARRA);

        END

        /* VERIFICO SE POSSUI MOVIMENTAÃ‡ÃƑO DE ESTOQUE */
        IF (NEW.NO_ESTOQUE = 'S') THEN
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N',
             CODMOVSAIDA = NULL
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END ELSE
         BEGIN

           /* DEVOLVO OS PRODUTOS */
           UPDATE
             INDIVIDUAIS
           SET
             VENDIDO = 'N'
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

           /* EXCLUO O ESTOQUE */
           DELETE FROM
             INDIVIDUAIS
           WHERE
             CODMOVSAIDA = NEW.CODIGO;

         END

        /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
        IF (NEW.NO_VENDA = 'S') THEN
         BEGIN

           /* CODIGO DO USUARIO */
           SELECT
             CODIGO
           FROM
             CLIENTES
           WHERE
             NOMEUSER = NEW.USUARIOESTORNO
           INTO
             :CODUSUARIO;

           /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
           FOR
           SELECT
             CODIGO
           FROM
             PAGAMENTOS
           WHERE
             CODMOVIMENTO = NEW.CODIGO
           INTO
             :CODORIGEM
           DO
             EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

         END

      END ELSE
      BEGIN

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVENTRADA = NEW.CODIGO;

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (473, CURRENT_TIMESTAMP);
COMMIT;
