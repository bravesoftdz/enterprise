/*
** VOLTA DO PLANO ÚNICO NO SISTEMA
*/

ALTER TABLE HISTORICOPAG DROP CAD_CODCONTACRE;

ALTER TABLE HISTORICOPAG DROP CAD_CODCONTADEB;

ALTER TABLE HISTORICOPAG DROP LAN_CODCONTACRE;

ALTER TABLE HISTORICOPAG DROP LAN_CODCONTADEB;

ALTER TABLE HISTORICOPAG ADD CODPLANO INTEIRO_VALIDO;

ALTER TABLE HISTORICOPAG
ADD CONSTRAINT HISTORICOPAG_FK02
FOREIGN KEY (CODPLANO)
REFERENCES PLANCONTAS(CODIGO)
ON UPDATE CASCADE;

SET TERM ^ ;

ALTER PROCEDURE GERAPARCELAS (
    CODIGO INTEGER)
AS
DECLARE VARIABLE TOTAL NUMERIC(9,2);
DECLARE VARIABLE PARCELA NUMERIC(9,2);
DECLARE VARIABLE CONDICAO VARCHAR(40);
DECLARE VARIABLE QUANTIDADE INTEGER;
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE DATAMOV DATE;
DECLARE VARIABLE DIAS INTEGER;
DECLARE VARIABLE CODDOC INTEGER;
DECLARE VARIABLE CODPAGO INTEGER;
DECLARE VARIABLE DOCVISTA INTEGER;
DECLARE VARIABLE DOCPRAZO INTEGER;
DECLARE VARIABLE DESCRICAO CHAR(40);
DECLARE VARIABLE TIPO INTEGER;
DECLARE VARIABLE CODCONTA_COMPRADEB INTEGER;
DECLARE VARIABLE CODCONTA_VENDACRE INTEGER;
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE NOME VARCHAR(16);
DECLARE VARIABLE CODCLIENTE INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CODCENTRO INTEGER;
DECLARE VARIABLE XES INTEGER;
DECLARE VARIABLE CODCONDPAG INTEGER;
DECLARE VARIABLE CODCENTRO_HP INTEGER;
DECLARE VARIABLE CODPLANO_HP INTEGER;
DECLARE VARIABLE VENDA CHAR(1);
BEGIN

   /* DADOS DO MOVIMENTO */
   SELECT
      NOTA_VALOR_TOTAL,
      CONDICAO,
      ES,
      CURRENT_DATE,
      TIPO,
      CODCLIENTE,
      CODEMPRESA,
      CODCENTRO,
      CODCONDPAG
   FROM
      MOVIMENTOS
   WHERE
      CODIGO = :CODIGO
   INTO
      :TOTAL,
      :CONDICAO,
      :ES,
      :DATAMOV,
      :TIPO,
      :CODCLIENTE,
      :CODEMPRESA,
      :CODCENTRO,
      :CODCONDPAG;

   /* TEM FATURAMENTO? */
   SELECT
     NA.VENDA,
     HP.CODCENTRO,
     HP.CODPLANO
   FROM
     NATUOPER NA
     JOIN MOVIMENTOS MO ON
       (MO.NOTA_CODNATUOPER = NA.CODIGO)
     LEFT JOIN HISTORICOPAG HP ON
       (HP.CODIGO = NA.CODHISTORICOPAG)
   WHERE
     MO.CODIGO = :CODIGO
   INTO
     :VENDA,
     :CODCENTRO_HP,
     :CODPLANO_HP;

   IF (CODCENTRO_HP IS NULL) THEN
     CODCENTRO_HP = CODCENTRO;

   IF (VENDA = 'N') THEN
     EXIT;

   /* DADOS DO PERFIL DA EMPRESA */
   SELECT
      CODDOC_AVISTA,
      CODDOC_PRAZO,
      CODCONTA_COMPRADEB,
      CODCONTA_VENDACRE
   FROM
      SISCONFIG
   WHERE
      CODIGO = :CODEMPRESA
   INTO
      :DOCVISTA,
      :DOCPRAZO,
      :CODCONTA_COMPRADEB,
      :CODCONTA_VENDACRE;

   /* SE FOR ENTRADA */
   IF (ES = 1) THEN
    BEGIN
      CODCONTA = CODCONTA_COMPRADEB;
      SELECT
        UDF_LEFT(NOME, 16)
      FROM
        CLIENTES
      WHERE
        CODIGO = :CODCLIENTE
      INTO
        :NOME;
    END ELSE

    /* SE FOR UMA SAIDA */
    BEGIN
     CODCONTA = CODCONTA_VENDACRE;
     SELECT
       UDF_LEFT(NOME, 16)
     FROM
       CLIENTES
     WHERE
       CODIGO = :CODCLIENTE
     INTO
       :NOME;
   END

   /* SE O VALOR FOR ZERO NAO GERO NADA */
   IF (TOTAL <= 0) THEN EXIT;

   /* QUANTIDADE DE PARCELAS */
   SELECT
      COUNT(*)
   FROM
      PARCELAS(
        :CONDICAO
      )
   INTO
      :QUANTIDADE;

   /* SE TIVER PELO MENOS 1 PARCELA, GERO */
   IF (QUANTIDADE > 0) THEN
    BEGIN

      /* APAGO AS PARCELAS ANTIGAS */
      DELETE FROM
        PAGAMENTOS
      WHERE
        CODMOVIMENTO = :CODIGO;

      /* VALOR DA PARCELA */
      PARCELA = CAST((TOTAL / QUANTIDADE) AS INTEGER);

      /* GERACAO DAS PARCELAS */
      N = 0;
      FOR
      SELECT
        DIAS
      FROM
        PARCELAS(:CONDICAO)
      INTO
        :DIAS
      DO
      BEGIN

        /* NUMERO DA PARCELA */
        N = N + 1;

        /* DESCRICAO DA PARCELA */
        IF (ES = 1) THEN
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' COMPRA ' || CODIGO || ' ' || NOME;
        ELSE
          DESCRICAO = 'PARC ' || N || '/' || QUANTIDADE || ' VENDA ' || CODIGO || ' ' || NOME;

        /* CODIGO SEQUENCIAL */
        SELECT
          SEQUENCIA
        FROM
          SEQ_OBTER('PAGAMENTOS')
        INTO
          :CODPAG;

        /* PARCELA A VISTA X PARCELA A PRAZO */
        IF (DIAS = 0) THEN
         BEGIN
           CODDOC = DOCVISTA;
           CODPAGO = 0;
         END ELSE
         BEGIN
           CODDOC = DOCPRAZO;
           CODPAGO = 0;
         END

        /* ESCONDO OS PAGAMENTOS DE OS E VENDA ABERTAS */
        XES = ES;
        IF ((XES = 2) AND (TIPO IN (3, 5))) THEN
          XES = 0;

        /* INSIRO A PARCELA */
        INSERT INTO
          PAGAMENTOS (
            CODIGO,
            CODMOVIMENTO,
            NUMERO,
            DESCRICAO,
            ES,
            VALOR,
            DATAVENCIMENTO,
            CODDOCUMENTO,
            PAGO,
            CODCONTA,
            CODEMPRESA,
            CODCENTRO,
            CODPLANO,
            CODCLIENTE)
          VALUES (
            :CODPAG,
            :CODIGO,
            :N,
            :DESCRICAO,
            :XES,
            :PARCELA,
            :DATAMOV + :DIAS,
            :CODDOC,
            :CODPAGO,
            :CODCONTA,
            :CODEMPRESA,
            :CODCENTRO_HP,
            :CODPLANO_HP,
            :CODCLIENTE);
      END

      /* DIFERENÇA NA PRIMEIRA PARCELA */
      UPDATE
        PAGAMENTOS
      SET
        VALOR = VALOR + (:TOTAL - (:PARCELA * :QUANTIDADE))
      WHERE
        CODMOVIMENTO = :CODIGO AND NUMERO = 1;

    END ELSE EXCEPTION CONDICAO_ERRADA;
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTINS
AS
BEGIN
  IF (NEW.ES IN (0, 1, 2)) THEN
    IF (NEW.VALOR_TOTAL > 0) THEN
      EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN
IF (NEW.ES IN (0, 1, 2)) THEN
BEGIN
IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
(NEW.CONDICAO <> OLD.CONDICAO)) AND
(NEW.TIPO IN (0, 1, 2, 5))) THEN
EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);
IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
BEGIN
EXECUTE PROCEDURE COMISSAO_CALC(NEW.CODIGO);
EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);
EXECUTE PROCEDURE CADASTRA_EQUIPAMENTO(NEW.CODIGO);
END
END
/* ESTORNO */
IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
BEGIN
/* GUARDO OS ITENS ESTORNADOS */
FOR
SELECT
CODPRODUTO,
SERIE,
SERIE2,
VALOR_VENDA,
DESCONTO,
BARRA,
ICMSVENDA,
SUM(QUANTIDADE)
FROM
INDIVIDUAIS
WHERE
CODMOVSAIDA = NEW.CODIGO
GROUP BY
CODPRODUTO,
SERIE,
SERIE2,
VALOR_VENDA,
DESCONTO,
BARRA,
ICMSVENDA
INTO
TEMP_CODPRODUTO,
TEMP_SERIE,
TEMP_SERIE2,
TEMP_VALOR_VENDA,
TEMP_DESCONTO,
TEMP_BARRA,
TEMP_ICMSVENDA,
TEMP_QUANTIDADE
DO
BEGIN
/* CODIGO UNICO DO TEMPITENS */
EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
RETURNING_VALUES TEMP_CODIGO;
/* GUARDO ITEM UM A UM */
INSERT INTO
TEMPITENS (
CODIGO,
CODMOVIMENTO,
CODPRODUTO,
QUANTIDADE,
VALOR_UNITARIO,
DESCONTO,
SITTRIBU,
MARGEM,
REAJUSTAR,
VALOR_VENDA,
ICMSCOMPRA,
ICMSVENDA,
IPI,
SERIE,
SERIE2,
BARRA)
VALUES (
:TEMP_CODIGO,
NEW.CODIGO,
:TEMP_CODPRODUTO,
:TEMP_QUANTIDADE,
:TEMP_VALOR_VENDA,
:TEMP_DESCONTO,
'0.0',
0,
'N',
(:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
:TEMP_ICMSVENDA,
:TEMP_ICMSVENDA,
0,
:TEMP_SERIE,
:TEMP_SERIE2,
:TEMP_BARRA);
END
/* VERIFICO SE POSSUI MOVIMENTAÇÃO DE ESTOQUE */
IF (NEW.NO_ESTOQUE = 'S') THEN
BEGIN
/* DEVOLVO OS PRODUTOS */
UPDATE
INDIVIDUAIS
SET
VENDIDO = 'N'
WHERE
CODMOVSAIDA = NEW.CODIGO;
END ELSE
BEGIN
/* DEVOLVO OS PRODUTOS */
UPDATE
INDIVIDUAIS
SET
VENDIDO = 'N'
WHERE
CODMOVSAIDA = NEW.CODIGO;
/* SIMPLESMENTE EXCLUO OS ITENS */
DELETE FROM
INDIVIDUAIS
WHERE
CODMOVSAIDA = NEW.CODIGO;
END
/* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
IF (NEW.NO_VENDA = 'S') THEN
BEGIN
/* CODIGO DO USUARIO */
SELECT
CODIGO
FROM
CLIENTES
WHERE
NOMEUSER = NEW.USUARIOESTORNO
INTO
:CODUSUARIO;
/* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
FOR
SELECT
CODIGO
FROM
PAGAMENTOS
WHERE
CODMOVIMENTO = NEW.CODIGO
INTO
:CODORIGEM
DO
EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);
END
END
END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (331, CURRENT_TIMESTAMP);
COMMIT;

