/*
** CORRECAO NO CAIXA II
*/

SET TERM ^ ;

ALTER PROCEDURE BAIXA (
    CODIGO INTEGER,
    MULTA_JUROS NUMERIC(18,2),
    DESCONTO NUMERIC(18,2),
    TIPO CHAR(1),
    CONTA INTEGER,
    CODDOCUMENTO INTEGER,
    INFODOC VARCHAR(50),
    NOMEUSER VARCHAR(30))
AS
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE DESCRICAO VARCHAR(40);
DECLARE VARIABLE ES INTEGER;
DECLARE VARIABLE VALOR NUMERIC(9,2);
DECLARE VARIABLE TOTALPAGO NUMERIC(9,2);
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE NOVONUM NUMERIC(15,2);
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CODCLIENTE INTEGER;
DECLARE VARIABLE CODCENTRO INTEGER;
DECLARE VARIABLE CODPLANO INTEGER;
DECLARE VARIABLE PERCCOMIS_CALCULO CHAR(1);
DECLARE VARIABLE PERCCOMIS_PROD NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_PECA NUMERIC(9,2);
DECLARE VARIABLE PERCCOMIS_SERV NUMERIC(9,2);
DECLARE VARIABLE CODVENDEDOR INTEGER;
DECLARE VARIABLE CODTECNICO INTEGER;
DECLARE VARIABLE PERC_TECNICO NUMERIC(9,2);
DECLARE VARIABLE TIPOP CHAR(1);
DECLARE VARIABLE AVISTA CHAR(1);
DECLARE VARIABLE TIPOPAG CHAR(1);
DECLARE VARIABLE CAIXA CHAR(1);
DECLARE VARIABLE TIPOCX CHAR(2);
DECLARE VARIABLE DATACAD TIMESTAMP;
DECLARE VARIABLE CODCAIXALAN INTEGER;
DECLARE VARIABLE VALCX NUMERIC(9, 2);
BEGIN
  /* VERIFICO SE CLIENTE ESTÁ PROTESTADO EM CARTÓRIO */
  SELECT
    CL.TIPO_IMPEDIMENTO
  FROM
    CLIENTES CL
    JOIN PAGAMENTOS PA ON
      (PA.CODCLIENTE = CL.CODIGO)
    WHERE
      PA.CODIGO = :CODIGO
    INTO
      :TIPOP;

    /* NÃO RECEBER */
    IF (TIPOP = 'P') THEN
      EXCEPTION PROTESTO_CARTORIO;

    /* FAÇO A BAIXA */
    UPDATE
      PAGAMENTOS
    SET
      PAGO = 1,
      MULTA_JUROS = :MULTA_JUROS,
      DESCONTO = :DESCONTO,
      CODCONTA = :CONTA,
      CODDOCUMENTO = :CODDOCUMENTO,
      INFODOC = :INFODOC,
      NOMEUSUARIO = :NOMEUSER
    WHERE
      CODIGO = :CODIGO;

    /* DADOS DO PAGAMENTO */
    SELECT
      PA.TOTAL_PAGO,
      PA.CODMOVIMENTO,
      PA.DATACADAST,
      PA.ES,
      DC.TIPO_PAG
    FROM
      PAGAMENTOS PA
      JOIN DOCUMENTOS DC ON
        (DC.CODIGO = PA.CODDOCUMENTO)
    WHERE
      PA.CODIGO = :CODIGO
    INTO
      :TOTALPAGO,
      :CODMOVIMENTO,
      :DATACAD,
      :ES,
      :TIPOPAG;

    SELECT
      CAIXA
    FROM
      CLIENTES
    WHERE
      NOMEUSER = :NOMEUSER
    INTO
      :CAIXA;

    IF (CAIXA = 'S') THEN
     BEGIN

       IF (ES = 1) THEN
         VALCX = (TOTALPAGO * -1);
       ELSE
         VALCX = TOTALPAGO;

       IF (TIPOPAG = 'A') THEN
         AVISTA = 'S';
       ELSE
         AVISTA = 'N';

       EXECUTE PROCEDURE SEQ_OBTER ('CAIXAS')
         RETURNING_VALUES :CODCAIXALAN;

       IF (CODMOVIMENTO IS NULL) THEN
        BEGIN

          IF (ES = 1) THEN
            TIPOCX = 'PA';
          ELSE
            TIPOCX = 'RE';

          INSERT INTO
            CAIXAS (
              CODCAIXALAN,
              USUARIO,
              DATA,
              HORA,
              TIPO,
              CODPAGAMENTO,
              VALOR,
              CODDOCUMENTO,
              AVISTA)
            VALUES (
              :CODCAIXALAN,
              :NOMEUSER,
              CURRENT_DATE,
              CURRENT_TIME,
              :TIPOCX,
              :CODIGO,
              :VALCX,
              :CODDOCUMENTO,
              :AVISTA);

        END ELSE
        BEGIN

          IF (ES = 1) THEN
            TIPOCX = 'PA';
          ELSE
            IF (CURRENT_DATE <> CAST(DATACAD AS DATE)) THEN
              TIPOCX = 'RE';
            ELSE
              TIPOCX = 'VE';

          INSERT INTO
            CAIXAS (
              CODCAIXALAN,
              USUARIO,
              DATA,
              HORA,
              TIPO,
              CODPAGAMENTO,
              VALOR,
              CODDOCUMENTO,
              AVISTA)
            VALUES (
              :CODCAIXALAN,
              :NOMEUSER,
              CURRENT_DATE,
              CURRENT_TIME,
              :TIPOCX,
              :CODIGO,
              :VALCX,
              :CODDOCUMENTO,
              :AVISTA);

        END

     END

    /* COMISSIONAMENTO NO RECEBIMENTO ?? */
    SELECT
      PA.CODMOVIMENTO,
      PA.TOTAL_PAGO,
      MO.PERCCOMIS_CALCULO,
      MO.PERCCOMIS_PROD,
      MO.PERCCOMIS_PECA,
      MO.PERCCOMIS_SERV,
      MO.CODVENDEDOR
    FROM
      PAGAMENTOS PA
      JOIN MOVIMENTOS MO ON
        (MO.CODIGO = PA.CODMOVIMENTO)
    WHERE
      PA.CODIGO = :CODIGO
    INTO
      :CODMOVIMENTO,
      :VALOR,
      :PERCCOMIS_CALCULO,
      :PERCCOMIS_PROD,
      :PERCCOMIS_PECA,
      :PERCCOMIS_SERV,
      :CODVENDEDOR;

    IF (PERCCOMIS_CALCULO = 'R') THEN
     BEGIN

       /* LANÇAMENTO DE COMISSÃO PARA VENDEDOR */
       INSERT INTO
         COMISSOES (
           CODMOVIMENTO,
           CODVENDEDOR,
           DATA,
           CODPAGAMENTO,
           DESCRICAO,
           PERCCOMIS_CALCULO,
           VALOR,
           TIPOPRODUTO,
           PERCENTUAL)
         VALUES (
           :CODMOVIMENTO,
           :CODVENDEDOR,
           'NOW',
           :CODIGO,
           'VENDEDOR PRODUTOS RECEBIMENTO',
           :PERCCOMIS_CALCULO,
           ((:VALOR * :PERCCOMIS_PROD) / 100),
           'F',
           0);
       /* LANÇAMENTO DE COMISSÃO PARA TÉCNICOS */
       FOR
       SELECT
         OS.CODVENDEDOR,
         OS.PORCENTAGEM
       FROM
         OS_VENDER OS
       WHERE
         OS.CODMOVIMENTO = :CODMOVIMENTO
       INTO
         :CODTECNICO,
         :PERC_TECNICO
       DO
       BEGIN

         /* LANÇAMENTO SERVIÇOS PARA UM TECNICO */
         INSERT INTO
           COMISSOES (
             CODMOVIMENTO,
             CODVENDEDOR,
             DATA,
             CODPAGAMENTO,
             DESCRICAO,
             PERCCOMIS_CALCULO,
             VALOR,
             TIPOPRODUTO,
             PERCENTUAL)
           VALUES (
             :CODMOVIMENTO,
             :CODTECNICO,
             'NOW',
             :CODIGO,
             'TECNICO SERVICOS RECEBIMENTO',
             :PERCCOMIS_CALCULO,
             ((:VALOR * :PERCCOMIS_SERV) / 100) * (:PERC_TECNICO / 100),
             'S',
             0);

         /* LANÇAMENTO PEÇAS PARA UM TECNICO */
         INSERT INTO
           COMISSOES (
             CODMOVIMENTO,
             CODVENDEDOR,
             DATA,
             CODPAGAMENTO,
             DESCRICAO,
             PERCCOMIS_CALCULO,
             VALOR,
             TIPOPRODUTO,
             PERCENTUAL)
           VALUES (
             :CODMOVIMENTO,
             :CODTECNICO,
             'NOW',
             :CODIGO,
             'TECNICO PECAS RECEBIMENTO',
             :PERCCOMIS_CALCULO,
             ((:VALOR * :PERCCOMIS_PECA) / 100) * (:PERC_TECNICO / 100),
             'C',
             0);

       END

     END

    /* É UMA BAIXA PARCIAL */
    IF ((TIPO = 'P') AND (DESCONTO > 0)) THEN
     BEGIN

       /* LEIO OS DADOS DO PAGAMENTO */
       SELECT
         CODMOVIMENTO,
         UDF_LEFT(DESCRICAO, 35),
         ES,
         DESCONTO,
         DATAVENCIMENTO,
         CODEMPRESA,
         CODCLIENTE,
         CODCENTRO,
         CODPLANO
       FROM
         PAGAMENTOS
       WHERE
         CODIGO = :CODIGO
       INTO
         :CODMOVIMENTO,
         :DESCRICAO,
         :ES,
         :VALOR,
         :DATAVENCIMENTO,
         :CODEMPRESA,
         :CODCLIENTE,
         :CODCENTRO,
         :CODPLANO;

       /* PEGO O PROXIMO CODIGO */
       SELECT
         SEQUENCIA
       FROM
         SEQ_OBTER('PAGAMENTOS')
       INTO
         :CODIGO;

       /* ACERTO A DESCRICAO */
       DESCRICAO = 'ADIC ' || DESCRICAO;

       /* PEGO O NUMERO NOVO */
       SELECT
         MAX(NUMERO) + 1
       FROM
         PAGAMENTOS
       WHERE
         CODMOVIMENTO = :CODMOVIMENTO
       INTO
         :NOVONUM;

       /* NUMERO */
       IF (NOVONUM IS NULL) THEN
         NOVONUM = 1;

       /* INSIRO O PAGAMENTO RESTANTE */
       INSERT INTO
         PAGAMENTOS (
           CODIGO,
           CODMOVIMENTO,
           NUMERO,
           DESCRICAO,
           ES,
           DATACADAST,
           VALOR,
           EXTERNO,
           PAGO,
           DESCONTO,
           MULTA_JUROS,
           DATAVENCIMENTO,
           SALDOANT,
           SALDOATU,
           CODCONTA,
           CODDOCUMENTO,
           CODEMPRESA,
           CODCLIENTE,
           CODCENTRO,
           CODPLANO)
         VALUES (
           :CODIGO,
           :CODMOVIMENTO,
           :NOVONUM,
           :DESCRICAO,
           :ES,
           'NOW',
           :VALOR,
           'S',
           0,
           0,
           0,
           :DATAVENCIMENTO,
           0,
           0,
           :CONTA,
           :CODDOCUMENTO,
           :CODEMPRESA,
           :CODCLIENTE,
           :CODCENTRO,
           :CODPLANO);
     END
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE AUTOBAIXA(
    CODMOVIMENTO INTEGER)
AS
DECLARE VARIABLE CODDOC_AVISTA INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODDOCUMENTO INTEGER;
DECLARE VARIABLE DATAVENCIMENTO TIMESTAMP;
DECLARE VARIABLE PAGO INTEGER;
DECLARE VARIABLE PARCELA_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE MOVIMENTO_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE XPARC INTEGER;
DECLARE VARIABLE CODEMPRESA INTEGER;
DECLARE VARIABLE CODCONTA INTEGER;
DECLARE VARIABLE NOMEUSER VARCHAR(30);
DECLARE VARIABLE VALOR NUMERIC(9,2);
DECLARE VARIABLE CODCAIXALAN INTEGER;
DECLARE VARIABLE TIPOPAG CHAR(1);
DECLARE VARIABLE CAIXA CHAR(1);
BEGIN
  /* VERIFICO SE OS VALORES SAO CORRESPONDENTES */
  SELECT
    COUNT(PA.CODIGO),
    SUM(PA.VALOR)
  FROM
    PAGAMENTOS PA
  WHERE
    PA.CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :XPARC,
    :PARCELA_TOTAL;

  IF (XPARC IS NULL) THEN
    XPARC = 0;

  /* COMISSIONAMENTO DE VENDEDORES */
  SELECT
    MO.NOTA_VALOR_TOTAL,
    MO.CODEMPRESA,
    CL.NOMEUSER
  FROM
    MOVIMENTOS MO
    JOIN CLIENTES CL ON
      (CL.CODIGO = MO.CODVENDEDOR)
  WHERE
    MO.CODIGO = :CODMOVIMENTO
  INTO
    :MOVIMENTO_TOTAL,
    :CODEMPRESA,
    :NOMEUSER;

  /* VALOR DAS PARCELAS DEVE SER IGUAL OU SUPERIOR AO VALOR DO FATURAMENTO */
  IF (MOVIMENTO_TOTAL > PARCELA_TOTAL) THEN
    EXCEPTION VALOR_PARCELA;

  /* APOS FECHADO, MOSTRO AS PARCELAS */
  UPDATE
    PAGAMENTOS
  SET
    ES = 2
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO;

  /* QUAL É O DOCUMENTO A VISTA? */
  SELECT
    CODDOC_AVISTA
  FROM
    SISCONFIG
  WHERE
    CODIGO = :CODEMPRESA
  INTO
    :CODDOC_AVISTA;

  /* PROCURO OS PAGAMENTOS, ALGUM É A VISTA? */
  FOR
  SELECT
    PA.CODIGO,
    PA.CODDOCUMENTO,
    PA.DATAVENCIMENTO,
    PA.PAGO,
    PA.CODCONTA,
    PA.VALOR,
    DC.TIPO_PAG
  FROM
    PAGAMENTOS PA
    JOIN DOCUMENTOS DC ON
      (DC.CODIGO = PA.CODDOCUMENTO)
  WHERE
    CODMOVIMENTO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :CODDOCUMENTO,
    :DATAVENCIMENTO,
    :PAGO,
    :CODCONTA,
    :VALOR,
    :TIPOPAG
  DO
  BEGIN

   /* O DOCUMENTO É A VISTA? */
   IF ((TIPOPAG = 'A') AND (PAGO = 0)) THEN
    BEGIN

      /* FAÇO O LANÇAMENTO */
     EXECUTE PROCEDURE BAIXA(
       :CODIGO,
       0,
       0,
       'T',
       :CODCONTA,
       :CODDOCUMENTO,
       '',
       :NOMEUSER);

    END ELSE
    BEGIN

      SELECT
        CAIXA
      FROM
        CLIENTES
      WHERE
        NOMEUSER = :NOMEUSER
      INTO
        :CAIXA;

      IF (CAIXA = 'S') THEN
       BEGIN

         EXECUTE PROCEDURE SEQ_OBTER ('CAIXAS')
           RETURNING_VALUES :CODCAIXALAN;

         INSERT INTO
           CAIXAS (
             CODCAIXALAN,
             USUARIO,
             DATA,
             HORA,
             TIPO,
             CODPAGAMENTO,
             VALOR,
             CODDOCUMENTO,
             AVISTA)
           VALUES (
             :CODCAIXALAN,
             :NOMEUSER,
             CURRENT_DATE,
             CURRENT_TIME,
             'VE',
             :CODIGO,
             :VALOR,
             :CODDOCUMENTO,
             'N');

       END

    END

  END

END

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE BAIXAMULT(
    CODCLIENTE INTEGER,
    MOVCOM VARCHAR(254),
    ACRESCIMOS NUMERIC(18,2),
    DESCONTOS NUMERIC(18,2),
    CODCONTA INTEGER,
    USUARIO VARCHAR(30))
AS
DECLARE VARIABLE N INTEGER;
DECLARE VARIABLE ACRESCIMO_PARCIAL INTEGER;
DECLARE VARIABLE CODMOVIMENTO INTEGER;
DECLARE VARIABLE NUMERO INTEGER;
DECLARE VARIABLE CODIGO INTEGER;
DECLARE VARIABLE CODPAG INTEGER;
DECLARE VARIABLE INFODOC VARCHAR(50);
DECLARE VARIABLE TOTAL_PAGO NUMERIC(9,2);
DECLARE VARIABLE CODDOCUMENTO INTEGER;
BEGIN
/* USUARIO */
IF ((USUARIO IS NULL) OR (USUARIO = '')) THEN
USUARIO = USER;
/* NUMERO DE BAIXAS */
SELECT
COUNT(*)
FROM
PARSER_PAGAMENTOS(:MOVCOM)
INTO
:N;
/* SE HOUVER ACRESCIMOS */
ACRESCIMO_PARCIAL = 0;
IF (ACRESCIMOS > 0) THEN
ACRESCIMO_PARCIAL = ACRESCIMOS / N;
/* PROCESSO AS BAIXAS */
FOR
SELECT
CODIGO,
CODMOVIMENTO,
NUMERO
FROM
PARSER_PAGAMENTOS(:MOVCOM)
INTO
:CODIGO,
:CODMOVIMENTO,
:NUMERO
DO
BEGIN
IF (CODMOVIMENTO IS NULL) THEN
BEGIN
SELECT
CODIGO,
INFODOC,
TOTAL_PAGO,
CODDOCUMENTO
FROM
PAGAMENTOS
WHERE
CODIGO = :CODIGO AND
PAGO = 0 AND
ES IN (1, 2) AND
CODCLIENTE = :CODCLIENTE
INTO
:CODPAG,
:INFODOC,
:TOTAL_PAGO,
:CODDOCUMENTO;
END ELSE
BEGIN
SELECT
CODIGO,
INFODOC,
TOTAL_PAGO,
CODDOCUMENTO
FROM
PAGAMENTOS
WHERE
CODMOVIMENTO = :CODMOVIMENTO AND
NUMERO = :NUMERO AND
PAGO = 0 AND
ES IN (1, 2) AND
CODCLIENTE = :CODCLIENTE
INTO
:CODPAG,
:INFODOC,
:TOTAL_PAGO,
:CODDOCUMENTO;
END
/* BAIXA TOTAL OU PARCIAL ?? */
IF ((N = 1) AND (DESCONTOS > 0)) THEN
BEGIN
/* BAIXA PARCIAL */
EXECUTE PROCEDURE BAIXA(
:CODPAG,
:ACRESCIMO_PARCIAL,
:TOTAL_PAGO - :DESCONTOS,
'P',
:CODCONTA,
:CODDOCUMENTO,
:INFODOC,
:USUARIO);
END ELSE
BEGIN
/* BAIXA TOTAL */
EXECUTE PROCEDURE BAIXA(
:CODPAG,
:ACRESCIMO_PARCIAL,
0,
'T',
:CODCONTA,
:CODDOCUMENTO,
:INFODOC,
:USUARIO);
END
END
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER TRIGGER MOVIMENTOS_AFTUPD
AS
DECLARE VARIABLE CODORIGEM INTEGER;
DECLARE VARIABLE CODUSUARIO INTEGER;
DECLARE VARIABLE TEMP_CODIGO INTEGER;
DECLARE VARIABLE TEMP_CODPRODUTO INTEGER;
DECLARE VARIABLE TEMP_SERIE VARCHAR(20);
DECLARE VARIABLE TEMP_SERIE2 VARCHAR(20);
DECLARE VARIABLE TEMP_VALOR_VENDA NUMERIC(9,2);
DECLARE VARIABLE TEMP_DESCONTO NUMERIC(9,2);
DECLARE VARIABLE TEMP_BARRA VARCHAR(20);
DECLARE VARIABLE TEMP_ICMSVENDA NUMERIC(9,4);
DECLARE VARIABLE TEMP_QUANTIDADE NUMERIC(9,2);
BEGIN

  IF (NEW.ES IN (0, 1, 2)) THEN
   BEGIN

     IF (((NEW.VALOR_TOTAL <> OLD.VALOR_TOTAL) OR
        (NEW.CONDICAO <> OLD.CONDICAO)) AND
        (NEW.TIPO IN (0, 1, 2, 5))) THEN
       EXECUTE PROCEDURE GERAPARCELAS(NEW.CODIGO);

     IF ((NEW.TIPO IN (3, 6)) AND (OLD.TIPO IN (2, 5))) THEN
      BEGIN

        EXECUTE PROCEDURE COMISSAO_CALC(NEW.CODIGO);

        EXECUTE PROCEDURE AUTOBAIXA(NEW.CODIGO);

        EXECUTE PROCEDURE CADASTRA_EQUIPAMENTO(NEW.CODIGO);

      END

   END

  /* ESTORNO */
  IF ((NEW.TIPO = 9) AND (OLD.TIPO <> 9)) THEN
   BEGIN

     /* GUARDO OS ITENS ESTORNADOS */
     FOR
     SELECT 
       CODPRODUTO,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       DESCONTO,
       BARRA,
       ICMSVENDA,
       SUM(QUANTIDADE)
     FROM
       INDIVIDUAIS
     WHERE
       CODMOVSAIDA = NEW.CODIGO
     GROUP BY 
       CODPRODUTO,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       DESCONTO,
       BARRA,
       ICMSVENDA
     INTO
       TEMP_CODPRODUTO,
       TEMP_SERIE,
       TEMP_SERIE2,
       TEMP_VALOR_VENDA,
       TEMP_DESCONTO,
       TEMP_BARRA,
       TEMP_ICMSVENDA,
       TEMP_QUANTIDADE
     DO
     BEGIN

       /* CODIGO UNICO DO TEMPITENS */
       EXECUTE PROCEDURE SEQ_OBTER('TEMPITENS')
         RETURNING_VALUES TEMP_CODIGO;

       /* GUARDO ITEM UM A UM */
       INSERT INTO
         TEMPITENS (
           CODIGO,
           CODMOVIMENTO,
           CODPRODUTO,
           QUANTIDADE,
           VALOR_UNITARIO,
           DESCONTO,
           SITTRIBU,
           MARGEM,
           REAJUSTAR,
           VALOR_VENDA,
           ICMSCOMPRA,
           ICMSVENDA,
           IPI,
           SERIE,
           SERIE2,
           BARRA)
         VALUES (
           :TEMP_CODIGO,
           NEW.CODIGO,
           :TEMP_CODPRODUTO,
           :TEMP_QUANTIDADE,
           :TEMP_VALOR_VENDA,
           :TEMP_DESCONTO,
           '0.0',
           0,
           'N',
           (:TEMP_VALOR_VENDA - :TEMP_DESCONTO),
           :TEMP_ICMSVENDA,
           :TEMP_ICMSVENDA,
           0,
           :TEMP_SERIE,
           :TEMP_SERIE2,
           :TEMP_BARRA);

     END

     /* VERIFICO SE POSSUI MOVIMENTAÇÃO DE ESTOQUE */
     IF (NEW.NO_ESTOQUE = 'S') THEN
      BEGIN

        /* DEVOLVO OS PRODUTOS */
        UPDATE
          INDIVIDUAIS
        SET
          VENDIDO = 'N'
        WHERE
          CODMOVSAIDA = NEW.CODIGO;

      END ELSE
      BEGIN

        /* DEVOLVO OS PRODUTOS */
        UPDATE
          INDIVIDUAIS
        SET
          VENDIDO = 'N'
        WHERE
          CODMOVSAIDA = NEW.CODIGO;

        /* SIMPLESMENTE EXCLUO OS ITENS */
        DELETE FROM
          INDIVIDUAIS
        WHERE
          CODMOVSAIDA = NEW.CODIGO;

      END

     /* VERIFICO SE EXISTE MOVIMENTACAO FINANCEIRA */
     IF (NEW.NO_VENDA = 'S') THEN
      BEGIN

        /* CODIGO DO USUARIO */
        SELECT
          CODIGO 
        FROM
          CLIENTES
        WHERE
          NOMEUSER = NEW.USUARIOESTORNO
        INTO
          :CODUSUARIO;

        /* VERIFICO OS PAGAMENTOS E ESTORNO 1 A 1 */
        FOR
        SELECT
          CODIGO
        FROM
          PAGAMENTOS
        WHERE
          CODMOVIMENTO = NEW.CODIGO
        INTO
          :CODORIGEM
        DO
          EXECUTE PROCEDURE FINANC_ESTORNO(:CODORIGEM, :CODUSUARIO);

      END

   END

END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (363, CURRENT_TIMESTAMP);
COMMIT;

