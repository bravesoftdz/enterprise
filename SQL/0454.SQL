/*
** NCM DOS PRODUTOS DA NOTA
*/

SET TERM ^ ;

CREATE OR ALTER procedure REL_NOTASER (
    CODMOVIMENTO integer)
returns (
    CODIGO integer,
    BARRA char(13),
    DESCRICAO1 varchar(40),
    DESCRICAO2 varchar(60),
    SERIE varchar(20),
    SERIE2 varchar(20),
    VALOR_VENDA numeric(9,2),
    ICMS_VENDA numeric(9,2),
    DESCONTO numeric(9,2),
    QUANTIDADE numeric(9,2),
    VALOR_PAGO numeric(9,2),
    VALOR_ICMS numeric(9,2),
    SITTRIBU char(3),
    VALOR_ITEM numeric(9,2),
    LINHA varchar(20),
    OPERADORA varchar(40),
    PLANO varchar(40),
    ATIVACAO char(1))
as
BEGIN
  FOR
  SELECT
    ID.CODPRODUTO,
    ID.BARRA,
    UDF_LEFT(PO.DESCRICAO, 40),
    ID.SERIE,
    ID.SERIE2,
    ID.VALOR_VENDA,
    ID.ICMSVENDA,
    ID.DESCONTO,
    ID.QUANTIDADE,
    ID.VALOR_PAGO,
    ID.VALOR_ICMS,
    TI.SITTRIBU,
    PO.ATIVACAO
  FROM
    INDIVIDUAIS ID
    LEFT JOIN PRODUTOS PO ON
      ( PO.CODIGO = ID.CODPRODUTO )
    LEFT JOIN TEMPITENS TI ON
      ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
    TI.CODPRODUTO   = ID.CODPRODUTO    AND
    TI.CODIGO       = ID.CODITEM )
  WHERE
    ID.CODMOVSAIDA = :CODMOVIMENTO AND
    ID.VENDIDO = 'S' AND
    ID.PS = 'S'
  INTO
    :CODIGO,
    :BARRA,
    :DESCRICAO1,
    :SERIE,
    :SERIE2,
    :VALOR_VENDA,
    :ICMS_VENDA,
    :DESCONTO,
    :QUANTIDADE,
    :VALOR_PAGO,
    :VALOR_ICMS,
    :SITTRIBU,
    :ATIVACAO
  DO
  BEGIN
    DESCRICAO2 = DESCRICAO1 || ' ' || SERIE;
    VALOR_ITEM = VALOR_VENDA - DESCONTO;
    LINHA = NULL;
    OPERADORA = NULL;
    PLANO = NULL;
    SUSPEND;
  END
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAITENS(
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(14,3),
    ICMS_VENDA NUMERIC(14,4),
    DESCONTO NUMERIC(14,3),
    QUANTIDADE NUMERIC(14,3),
    VALOR_PAGO NUMERIC(14,3),
    VALOR_ICMS NUMERIC(14,3),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(14,3),
    IPI NUMERIC(14,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    ATIVACAO CHAR(1),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    VALOR_CUSTO NUMERIC(14,3),
    CLASSFISCAL VARCHAR(20),
    PESO NUMERIC(9,3),
    DESCONTO_ADM NUMERIC(9,2))
AS
DECLARE VARIABLE ESMOV INTEGER;
DECLARE VARIABLE TIPOMOV INTEGER;
BEGIN

  SELECT
    ES,
    TIPO
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ESMOV,
    :TIPOMOV;

  IF ((TIPOMOV = 9) OR ((ESMOV = 0) AND (TIPOMOV = 1))) THEN
   BEGIN

     /* ITENS ESTORNADOS OU DE ORÇAMENTO */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.DESCRICAO,
       TI.SERIE,
       TI.SERIE2,
       TI.VALOR_UNITARIO,
       TI.ICMSVENDA,
       TI.DESCONTO,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA,
       TI.SITTRIBU,
       PO.UNIDADE,
       PO.ATIVACAO,
       (TI.VALOR_UNITARIO - TI.DESCONTO),
       TI.IPI,
       PO.PRECOCUSTO,
       PO.PESO
     FROM
       TEMPITENS TI
       JOIN PRODUTOS PO ON
        (PO.CODIGO = TI.CODPRODUTO)
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :ATIVACAO,
       :VALOR_ITEM,
       :IPI,
       :VALOR_CUSTO,
       :PESO
     DO
     BEGIN

       /* TRATAMENTO DA SERIE */
       IF ((UDF_TRIM(SERIE) <> 'N/F') AND (UDF_TRIM(SERIE) > '')) THEN
        BEGIN
          DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
        BEGIN
          IF (UDF_TRIM(SERIE2) > '') THEN
           BEGIN
             DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE2);
           END ELSE
             DESCRICAO2 = UDF_TRIM(DESCRICAO1);
        END

       PESO = PESO * QUANTIDADE;

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       CLASSFISCAL = NULL;

       SUSPEND;

     END

   END ELSE
   BEGIN

     /* PRODUTOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       UNIDADE,
       VALOR_ITEM,
       IPI,
       LINHA,
       OPERADORA,
       PLANO,
       'N',
       CONTRATO,
       VOUCHER,
       TIPOATIVACAO,
       DESCONTO_ADM,
       CLASSFISCAL,
       PESO
     FROM
       REL_NOTAPRO(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :LINHA,
       :OPERADORA,
       :PLANO,
       :ATIVACAO,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :DESCONTO_ADM,
       :CLASSFISCAL,
       :PESO
     DO
     BEGIN

       VALOR_CUSTO = 0;
       SUSPEND;

     END

     /* SERVIÇOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       'SE',
       VALOR_ITEM,
       0 AS IPI,
       ATIVACAO
     FROM
       REL_NOTASER(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :ATIVACAO
     DO
     BEGIN

       PESO = 0;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       DESCONTO_ADM = 0;
       VALOR_CUSTO = 0;
       CLASSFISCAL = NULL;
       SUSPEND;

     END

   END
END

^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER procedure REL_NOTAPRO (
    CODMOVIMENTO integer)
returns (
    CODIGO integer,
    BARRA char(13),
    DESCRICAO1 varchar(60),
    DESCRICAO2 varchar(80),
    SERIE varchar(20),
    SERIE2 varchar(20),
    VALOR_VENDA numeric(14,3),
    ICMS_VENDA numeric(14,4),
    DESCONTO numeric(14,3),
    QUANTIDADE numeric(14,3),
    VALOR_PAGO numeric(14,3),
    VALOR_ICMS numeric(14,3),
    SITTRIBU char(3),
    UNIDADE char(2),
    VALOR_ITEM numeric(14,3),
    IPI numeric(14,4),
    LINHA varchar(20),
    OPERADORA varchar(40),
    PLANO varchar(40),
    CONTRATO varchar(10),
    VOUCHER varchar(10),
    TIPOATIVACAO char(1),
    CLASSFISCAL varchar(20),
    PESO numeric(9,3),
    VALOR_IPI numeric(14,3),
    DESCONTO_ADM numeric(9,2),
    NCM integer)
as
declare variable ES integer;
declare variable XIPI char(1);
declare variable FATURA_CAIXAS char(1);
declare variable CAIXA_ITENS integer;
declare variable N integer;
BEGIN
  /* VERIFICO SE EH COMPRA OU VENDA */
  SELECT
    ES
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ES;

  IF (ES = 1) THEN
   BEGIN

     /* COMPRA */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.PESO,
       PO.CODNCM,
       'N/F',
       TI.VALOR_UNITARIO,
       TI.ICMSCOMPRA,
       TI.DESCONTO,
       TI.SITTRIBU,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA
     FROM
       TEMPITENS TI
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = TI.CODPRODUTO )
     WHERE
       TI.CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :PESO,
       :NCM,
       :SERIE,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       IF (SERIE <> 'N/F') THEN
        BEGIN
          N = UDF_LEN(UDF_TRIM(DESCRICAO1));
          IF (N > 40) THEN
            DESCRICAO2 = UDF_COPY(DESCRICAO1, 1, 40) || ' ' || UDF_TRIM(SERIE);
          ELSE
            DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
          DESCRICAO2 = DESCRICAO1;

       VALOR_ITEM = VALOR_VENDA - DESCONTO;
       PESO = PESO * QUANTIDADE;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       SUSPEND;

    END

   END ELSE
   BEGIN

     /* VERIFICO SE CORTO IPI */
     SELECT
       NA.IPI
     FROM
       NATUOPER NA
       JOIN MOVIMENTOS MO ON
         (MO.NOTA_CODNATUOPER = NA.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :XIPI;

     /* VERIFICO SE VAI FATURAR POR CAIXAS */
     SELECT
       HG.FATURA_CAIXAS
     FROM
       HISTORICOPAG HG
       JOIN MOVIMENTOS MO ON
         (MO.CODHISTORICOPAG = HG.CODIGO)
     WHERE
       MO.CODIGO = :CODMOVIMENTO
     INTO
       :FATURA_CAIXAS;

     /* VENDA */
     FOR
     SELECT
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.PESO,
       PO.CAIXA_ITENS,
       PO.CODNCM,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       ID.DESCONTO_ADM, 
       OP.NOME,
       PL.NOME,
       SUM(ID.QUANTIDADE),
       SUM(ID.VALOR_PAGO),
       SUM(ID.VALOR_ICMS)
     FROM
       INDIVIDUAIS ID
       LEFT JOIN PRODUTOS PO ON
         ( PO.CODIGO = ID.CODPRODUTO )
       LEFT JOIN TEMPITENS TI ON
         ( TI.CODMOVIMENTO = ID.CODMOVENTRADA AND
           TI.CODPRODUTO   = ID.CODPRODUTO    AND
           TI.CODIGO       = ID.CODITEM )
       LEFT JOIN OPERADORAS OP ON
         ( OP.CODIGO = ID.CODOPERADORA )
       LEFT JOIN PLANOS PL ON
         ( PL.CODIGO = ID.CODPLANO AND
           PL.CODOPERADORA = ID.CODOPERADORA )
     WHERE
       ID.CODMOVSAIDA = :CODMOVIMENTO AND
       ID.VENDIDO = 'S' AND
       ID.PS = 'P'
     GROUP BY
       ID.CODPRODUTO,
       ID.BARRA,
       PO.DESCRICAO,
       PO.UNIDADE,
       PO.CLASSFISCAL,
       PO.PESO,
       PO.CAIXA_ITENS,
       PO.CODNCM,
       ID.SERIE,
       ID.SERIE2,
       ID.VALOR_VENDA,
       ID.ICMSVENDA,
       ID.DESCONTO,
       TI.SITTRIBU,
       TI.IPI,
       ID.NUMERO_FONE,
       ID.CONTRATO,
       ID.VOUCHER,
       ID.TIPOATIVACAO,
       ID.DESCONTO_ADM,
       OP.NOME,
       PL.NOME
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :UNIDADE,
       :CLASSFISCAL,
       :PESO,
       :CAIXA_ITENS,
       :NCM,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :SITTRIBU,
       :IPI,
       :LINHA,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :DESCONTO_ADM,
       :OPERADORA,
       :PLANO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS
     DO
     BEGIN

       /* VERIFICO SE O SERIE2 CONTEM DADOS E SERIE NAO, MANDO SERIE2 */
       IF ((UDF_TRIM(SERIE) = 'N/F') OR (UDF_TRIM(SERIE) = '')) THEN
         IF (UDF_TRIM(SERIE2) > '') THEN
           SERIE = SERIE2;

       IF (SERIE <> 'N/F') THEN
        BEGIN
          N = UDF_LEN(UDF_TRIM(DESCRICAO1));
          IF (N > 40) THEN
            DESCRICAO2 = UDF_COPY(DESCRICAO1, 1, 40) || ' ' || UDF_TRIM(SERIE);
          ELSE
            DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
          DESCRICAO2 = DESCRICAO1;

       IF (CAIXA_ITENS IS NULL) THEN
         CAIXA_ITENS = 0;

       IF ((FATURA_CAIXAS = 'S') AND
          (QUANTIDADE >= CAIXA_ITENS)) THEN
        BEGIN
          UNIDADE = 'CX';
          QUANTIDADE = QUANTIDADE / CAIXA_ITENS;
          VALOR_VENDA = VALOR_VENDA * CAIXA_ITENS;
          DESCONTO = DESCONTO * CAIXA_ITENS;
        END

       VALOR_ITEM = VALOR_VENDA - DESCONTO;
       PESO = PESO * QUANTIDADE;

       IF (XIPI = 'N') THEN
        BEGIN
          IPI = NULL;
          VALOR_IPI = NULL;
        END ELSE
        BEGIN
          IF (IPI > 0) THEN
            VALOR_IPI = VALOR_PAGO * (IPI / 100);
          ELSE
            VALOR_IPI = 0;
        END

       SUSPEND;

     END
   END
END
^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTACORPO(
    CODMOVIMENTO INTEGER)
RETURNS (
    ES SMALLINT,
    CODCLIENTE INTEGER,
    DATA TIMESTAMP,
    SERVICOS VARCHAR(254),
    VALOR_SERVICOS NUMERIC(9,2),
    VALOR_ITENS NUMERIC(9,2),
    DESCONTO NUMERIC(9,2),
    VALOR_PRODUTOS NUMERIC(9,2),
    VALOR_ICMS NUMERIC(9,2),
    VALOR_TOTAL NUMERIC(9,2),
    OBSERVACOES VARCHAR(254),
    NOTA_NUMERO INTEGER,
    NOTA_DATAEMISSAO TIMESTAMP,
    NOTA_CODNATUOPER VARCHAR(10),
    NOTA_CODTRANSPORTADOR INTEGER,
    NOTA_PLACAVEICULO VARCHAR(10),
    NOTA_UFVEICULO VARCHAR(2),
    NOTA_FRETE SMALLINT,
    NOTA_VALOR_FRETE NUMERIC(9,2),
    NOTA_VALOR_SEGURO NUMERIC(9,2),
    NOTA_VALOR_OUTROS NUMERIC(9,2),
    NOTA_VALOR_TOTAL NUMERIC(9,2),
    NOTA_QUANTIDADE NUMERIC(9,2),
    NOTA_ESPECIE VARCHAR(30),
    NOTA_MARCA VARCHAR(20),
    NOTA_VOLNUM INTEGER,
    NOTA_PESOBRUTO NUMERIC(9,2),
    NOTA_PESOLIQUIDO NUMERIC(9,2),
    NOTA_DADOSADICIONAIS VARCHAR(254),
    CODVENDEDOR INTEGER,
    STATUS VARCHAR(30),
    CONDICAO VARCHAR(40),
    DATAINICIO TIMESTAMP,
    DATATERMINO TIMESTAMP,
    ICMSSIMPLES CHAR(1),
    ICMSSIMPALIQ NUMERIC(9,4),
    ISSALIQ NUMERIC(9,4),
    VALOR_ISS NUMERIC(9,2),
    NOTA_IESUBST VARCHAR(20),
    NOTA_DATASAIDA TIMESTAMP,
    NOTA_BASEICMS NUMERIC(9,4),
    NOTA_BASEICMSSUBST NUMERIC(9,4),
    NOTA_VALORICMSSUBST NUMERIC(9,2),
    VALOR_IPI NUMERIC(9,2),
    CODVENDEDOR_ABRE INTEGER,
    DESCONTOTXT VARCHAR(40),
    CLI_NOME VARCHAR(40),
    CLI_RAZAOSOCIAL VARCHAR(40),
    CLI_LOGRADOURO VARCHAR(60),
    CLI_NUMERO INTEGER,
    CLI_COMPLEMENTO VARCHAR(40),
    CLI_BAIRRO VARCHAR(60),
    CLI_CEP VARCHAR(10),
    CLI_CIDADE VARCHAR(60),
    CLI_ESTADO VARCHAR(2),
    CLI_FONE VARCHAR(20),
    CLI_FAX VARCHAR(20),
    CLI_CELULAR VARCHAR(20),
    CLI_EMAIL VARCHAR(50),
    CLI_RGIE VARCHAR(20),
    CLI_CPFCGC VARCHAR(20),
    CLI_MUNIBGE VARCHAR(10),
    TRA_NOME VARCHAR(40),
    TRA_LOGRADOURO VARCHAR(60),
    TRA_NUMERO INTEGER,
    TRA_COMPLEMENTO VARCHAR(40),
    TRA_BAIRRO VARCHAR(60),
    TRA_CEP VARCHAR(10),
    TRA_CIDADE VARCHAR(60),
    TRA_ESTADO VARCHAR(2),
    TRA_FONE VARCHAR(20),
    TRA_FAX VARCHAR(20),
    TRA_EMAIL VARCHAR(50),
    TRA_RGIE VARCHAR(20),
    TRA_CPFCGC VARCHAR(20),
    TRA_MUNIBGE VARCHAR(10),
    CODIGO INTEGER,
    MARCA VARCHAR(40),
    MODELO VARCHAR(40),
    DEFEITO VARCHAR(40),
    GARANTIA CHAR(1),
    SERIE VARCHAR(40),
    ACESSORIOS VARCHAR(50),
    CONDICAOEXTERNA VARCHAR(40),
    SOLICITANTE VARCHAR(40),
    VENDEDORABRE VARCHAR(40),
    VENDEDOR VARCHAR(40),
    USUARIO VARCHAR(40),
    CLI_CONTRATO CHAR(1),
    CLI_KM INTEGER,
    NATUREZAOPERACAO VARCHAR(30),
    CODEMPRESA INTEGER,
    EMPRESA_NOME VARCHAR(40),
    EMPRESA_RAZAOSOCIAL VARCHAR(50),
    EMPRESA_CNPJ VARCHAR(20),
    EMPRESA_IE VARCHAR(20),
    EMPRESA_LOGRADOURO VARCHAR(60),
    EMPRESA_NUMERO INTEGER,
    EMPRESA_COMPLEMENTO VARCHAR(40),
    EMPRESA_BAIRRO VARCHAR(60),
    EMPRESA_CIDADE VARCHAR(60),
    EMPRESA_ESTADO CHAR(2),
    EMPRESA_CEP VARCHAR(9),
    EMPRESA_FONE VARCHAR(20),
    EMPRESA_MUNIBGE VARCHAR(10),
    TIPOOS VARCHAR(40),
    XX_ENTRADA CHAR(2),
    XX_SAIDA CHAR(2),
    EXTENSO VARCHAR(254),
    TECNICO VARCHAR(20),
    DEFEITO_DETECTADO VARCHAR(60),
    SERVICO_REALIZAR VARCHAR(60),
    AUTORIZADO CHAR(1),
    DATA_AUTORIZADO TIMESTAMP,
    QUEM_AUTORIZOU VARCHAR(40),
    DATA_ENTREGA TIMESTAMP,
    QUEM_ENTREGOU VARCHAR(40),
    QUEM_RECEBEU VARCHAR(40),
    NOTA_ENTRADA INTEGER,
    AUTORIZADO_SIM CHAR(1),
    AUTORIZADO_NAO CHAR(1),
    PARCEIRO VARCHAR(40),
    MENSAGEM_OS VARCHAR(254),
    MENSAGEM_VENDA VARCHAR(254),
    OPERADORA VARCHAR(40),
    NO_IPI CHAR(1),
    TOTAL_TRIBUTADO NUMERIC(14,3),
    TOTAL_CREDITOICMS NUMERIC(14,3),
    ALIQUOTA_ICMSSIMPLES NUMERIC(9,4),
    TIPODOC CHAR(3))
AS
declare variable TEMP_PESSOAFISICA char(1);
declare variable TEMP_RAZAOSOCIAL varchar(40);
declare variable TEMP_IE varchar(20);
declare variable TEMP_CGC varchar(20);
declare variable CODMARCA integer;
declare variable CODMODELO integer;
declare variable CODDEFEITO integer;
declare variable OSTIPO integer;
declare variable MAXTECNICO integer;
declare variable CODPARCEIRO integer;
declare variable SITUACAOTRIBUTARIA char(3);
declare variable VALORDOITEM numeric(14,3);
BEGIN
  SELECT
    CODIGO,
    ES,
    CODCLIENTE,
    DATA,
    UDF_LEFT(SERVICOS, 254),
    VALOR_SERVICOS,
    VALOR_ITENS,
    DESCONTO,
    VALOR_PRODUTOS,
    VALOR_ICMS,
    VALOR_TOTAL,
    UDF_LEFT(OBSERVACOES, 254),
    NOTA_NUMERO,
    NOTA_DATAEMISSAO,
    NOTA_CODNATUOPER,
    NOTA_CODTRANSPORTADOR,
    NOTA_PLACAVEICULO,
    NOTA_UFVEICULO,
    NOTA_FRETE,
    NOTA_VALOR_FRETE,
    NOTA_VALOR_SEGURO,
    NOTA_VALOR_OUTROS,
    NOTA_VALOR_TOTAL,
    NOTA_QUANTIDADE,
    NOTA_ESPECIE,
    NOTA_MARCA,
    NOTA_VOLNUM,
    NOTA_PESOBRUTO,
    NOTA_PESOLIQUIDO,
    UDF_LEFT(NOTA_DADOSADICIONAIS, 254),
    CODVENDEDOR,
    STATUS,
    CONDICAO,
    DATAINICIO,
    DATATERMINO,
    ICMSSIMPLES,
    ICMSSIMPALIQ,
    ISSALIQ,
    VALOR_ISS,
    NOTA_IESUBST,
    NOTA_DATASAIDA,
    NOTA_BASEICMS,
    NOTA_BASEICMSSUBST,
    NOTA_VALORICMSSUBST,
    VALOR_IPI,
    CODVENDEDOR_ABRE,
    DESCONTOTXT,
    CODMARCA,
    CODMODELO,
    CODDEFEITO,
    GARANTIA,
    SERIE,
    ACESSORIOS,
    CONDICAOEXTERNA,
    SOLICITANTE,
    CODEMPRESA,
    OSTIPO,
    DEFEITO_DETECTADO,
    SERVICO_REALIZAR,
    AUTORIZADO,
    DATA_AUTORIZADO,
    QUEM_AUTORIZOU,
    DATA_ENTREGA,
    QUEM_ENTREGOU,
    QUEM_RECEBEU,
    NOTA_ENTRADA,
    CODPARCEIRO,
    OPERADORA,
    NO_IPI,
    TIPODOC
  FROM
    MOVIMENTOS MO
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :CODIGO,
    :ES,
    :CODCLIENTE,
    :DATA,
    :SERVICOS,
    :VALOR_SERVICOS,
    :VALOR_ITENS,
    :DESCONTO,
    :VALOR_PRODUTOS,
    :VALOR_ICMS,
    :VALOR_TOTAL,
    :OBSERVACOES,
    :NOTA_NUMERO,
    :NOTA_DATAEMISSAO,
    :NOTA_CODNATUOPER,
    :NOTA_CODTRANSPORTADOR,
    :NOTA_PLACAVEICULO,
    :NOTA_UFVEICULO,
    :NOTA_FRETE,
    :NOTA_VALOR_FRETE,
    :NOTA_VALOR_SEGURO,
    :NOTA_VALOR_OUTROS,
    :NOTA_VALOR_TOTAL,
    :NOTA_QUANTIDADE,
    :NOTA_ESPECIE,
    :NOTA_MARCA,
    :NOTA_VOLNUM,
    :NOTA_PESOBRUTO,
    :NOTA_PESOLIQUIDO,
    :NOTA_DADOSADICIONAIS,
    :CODVENDEDOR,
    :STATUS,
    :CONDICAO,
    :DATAINICIO,
    :DATATERMINO,
    :ICMSSIMPLES,
    :ICMSSIMPALIQ,
    :ISSALIQ,
    :VALOR_ISS,
    :NOTA_IESUBST,
    :NOTA_DATASAIDA,
    :NOTA_BASEICMS,
    :NOTA_BASEICMSSUBST,
    :NOTA_VALORICMSSUBST,
    :VALOR_IPI,
    :CODVENDEDOR_ABRE,
    :DESCONTOTXT,
    :CODMARCA,
    :CODMODELO,
    :CODDEFEITO,
    :GARANTIA,
    :SERIE,
    :ACESSORIOS,
    :CONDICAOEXTERNA,
    :SOLICITANTE,
    :CODEMPRESA,
    :OSTIPO,
    :DEFEITO_DETECTADO,
    :SERVICO_REALIZAR,
    :AUTORIZADO,
    :DATA_AUTORIZADO,
    :QUEM_AUTORIZOU,
    :DATA_ENTREGA,
    :QUEM_ENTREGOU,
    :QUEM_RECEBEU,
    :NOTA_ENTRADA,
    :CODPARCEIRO,
    :OPERADORA,
    :NO_IPI,
    :TIPODOC;

  SELECT
    CL.NOME,
    UDF_LEFT(CL.RAZAOSOCIAL, 40),
    CL.PESSOAFISICA,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.ESTADO,
    CL.FONE,
    CL.FAX,
    CL.CELULAR,
    CL.EMAIL,
    CL.RG,
    CL.CPF,
    CL.IE,
    CL.CGC,
    CL.CONTRATO,
    CL.KMS,
    CL.LOGRADOURO,
    CL.BAIRRO,
    CL.CIDADE,
    CL.CEP,
    CL.MUNIBGE
  FROM
    CLIENTES CL
  WHERE
    CL.CODIGO = :CODCLIENTE
  INTO
    :CLI_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :CLI_NUMERO,
    :CLI_COMPLEMENTO,
    :CLI_ESTADO,
    :CLI_FONE,
    :CLI_FAX,
    :CLI_CELULAR,
    :CLI_EMAIL,
    :CLI_RGIE,
    :CLI_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :CLI_CONTRATO,
    :CLI_KM,
    :CLI_LOGRADOURO,
    :CLI_BAIRRO,
    :CLI_CIDADE,
    :CLI_CEP,
    :CLI_MUNIBGE;

  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     CLI_RGIE        = TEMP_IE;
     CLI_CPFCGC      = TEMP_CGC;
     CLI_RAZAOSOCIAL = TEMP_RAZAOSOCIAL;
   END ELSE CLI_RAZAOSOCIAL = CLI_NOME;

  TEMP_PESSOAFISICA = '';
  TEMP_IE           = '';
  TEMP_CGC          = '';
  TEMP_RAZAOSOCIAL  = '';

  SELECT
    TR.NOME,
    UDF_LEFT(TR.RAZAOSOCIAL, 40),
    TR.PESSOAFISICA,
    TR.NUMERO,
    TR.COMPLEMENTO,
    TR.ESTADO,
    TR.FONE,
    TR.FAX,
    TR.EMAIL,
    TR.RG,
    TR.CPF,
    TR.IE,
    TR.CGC,
    TR.LOGRADOURO,
    TR.BAIRRO,
    TR.CIDADE,
    TR.CEP,
    TR.MUNIBGE
  FROM
    CLIENTES TR
  WHERE
    TR.CODIGO = :NOTA_CODTRANSPORTADOR
  INTO
    :TRA_NOME,
    :TEMP_RAZAOSOCIAL,
    :TEMP_PESSOAFISICA,
    :TRA_NUMERO,
    :TRA_COMPLEMENTO,
    :TRA_ESTADO,
    :TRA_FONE,
    :TRA_FAX,
    :TRA_EMAIL,
    :TRA_RGIE,
    :TRA_CPFCGC,
    :TEMP_IE,
    :TEMP_CGC,
    :TRA_LOGRADOURO,
    :TRA_BAIRRO,
    :TRA_CIDADE,
    :TRA_CEP,
    :TRA_MUNIBGE;

  IF ( TEMP_PESSOAFISICA = 'J' ) THEN
   BEGIN
     TRA_RGIE   = TEMP_IE;
     TRA_CPFCGC = TEMP_CGC;
   END

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR_ABRE
  INTO
    :VENDEDORABRE;

  SELECT
    NOME
  FROM
    CLIENTES
  WHERE
    CODIGO = :CODVENDEDOR
  INTO
    :VENDEDOR;

  SELECT
    DESCRICAO
  FROM
    MARCAS
  WHERE
    CODIGO = :CODMARCA
  INTO
    :MARCA;

  SELECT
    DESCRICAO
  FROM
    MODELOS
  WHERE
    CODIGO = :CODMODELO AND
    CODEQUIPAMENTO = :CODMARCA
  INTO
    :MODELO;

  SELECT
    DESCRICAO
  FROM
    DEFEITOS
  WHERE
    CODIGO = :CODDEFEITO
  INTO
    :DEFEITO;

  SELECT
    NATUREZA
  FROM
    NATUOPER
  WHERE
    CODIGO = :NOTA_CODNATUOPER
  INTO
    :NATUREZAOPERACAO;

  SELECT
    TIPO
  FROM
    OSTIPOS
  WHERE
    CODIGO = :OSTIPO
  INTO
    :TIPOOS;

  SELECT
    CL.NOME,
    CL.RAZAOSOCIAL,
    CL.CGC,
    CL.IE,
    CL.LOGRADOURO,
    CL.NUMERO,
    CL.COMPLEMENTO,
    CL.BAIRRO,
    CL.CIDADE,
    CL.ESTADO,
    CL.CEP,
    CL.FONE,
    CL.MUNIBGE,
    SI.MENSAGEM_OS,
    SI.MENSAGEM_VENDA,
    SI.ALIQUOTA_ICMSSIMPLES
  FROM
    SISCONFIG SI
    JOIN CLIENTES CL ON
      (SI.CODCLIENTE = CL.CODIGO)
  WHERE
    SI.CODIGO = :CODEMPRESA
  INTO
    :EMPRESA_NOME,
    :EMPRESA_RAZAOSOCIAL,
    :EMPRESA_CNPJ,
    :EMPRESA_IE,
    :EMPRESA_LOGRADOURO,
    :EMPRESA_NUMERO,
    :EMPRESA_COMPLEMENTO,
    :EMPRESA_BAIRRO,
    :EMPRESA_CIDADE,
    :EMPRESA_ESTADO,
    :EMPRESA_CEP,
    :EMPRESA_FONE,
    :EMPRESA_MUNIBGE,
    :MENSAGEM_OS,
    :MENSAGEM_VENDA,
    :ALIQUOTA_ICMSSIMPLES;

  USUARIO = USER;

  IF (ES = 1) THEN
   BEGIN

     XX_ENTRADA = 'XX';
     XX_SAIDA   = '  ';

   END ELSE
   BEGIN

     XX_ENTRADA = '  ';
     XX_SAIDA   = 'XX';

   END

  SELECT
    EXTENSO
  FROM
    MOEDAEXTENSO(
       CAST(:NOTA_VALOR_TOTAL AS DOUBLE PRECISION),
       :CODEMPRESA
    )
  INTO
    :EXTENSO;

 SELECT
   MIN(OS.CODVENDEDOR)
 FROM
   OS_VENDER OS
 WHERE
   OS.CODMOVIMENTO = :CODMOVIMENTO
 INTO
   :MAXTECNICO;

 SELECT
   UDF_LEFT(CL.NOME, 20)
 FROM
   CLIENTES CL
 WHERE
   CL.CODIGO = :MAXTECNICO
 INTO
   :TECNICO;

 AUTORIZADO_SIM = ' ';
 AUTORIZADO_NAO = ' ';

 IF (DATA_AUTORIZADO IS NOT NULL) THEN
  BEGIN
    IF (AUTORIZADO = 'S') THEN
      AUTORIZADO_SIM = 'X';
    ELSE
      AUTORIZADO_NAO = 'X';
  END

 SELECT
   NOME
 FROM
   CLIENTES
 WHERE
   CODIGO = :CODPARCEIRO
 INTO
   :PARCEIRO;

 IF (NO_IPI = 'S') THEN
  BEGIN

    SELECT
      SUM(VALOR_IPI)
    FROM
      REL_NOTAPRO(:CODMOVIMENTO)
    INTO
      :VALOR_IPI;

    IF (VALOR_IPI IS NULL) THEN
      VALOR_IPI = 0;

    NOTA_VALOR_TOTAL = NOTA_VALOR_TOTAL + VALOR_IPI;

  END

  /* TOTAL A SER TRIBUTADO */
  TOTAL_TRIBUTADO = 0;
  FOR
  SELECT
    SITTRIBU,
    VALOR_PAGO
  FROM
    REL_NOTAPRO(:CODMOVIMENTO)
  INTO
    :SITUACAOTRIBUTARIA,
    :VALORDOITEM
  DO
  BEGIN
    IF ((SITUACAOTRIBUTARIA = '060') OR (SITUACAOTRIBUTARIA = '160') OR (SITUACAOTRIBUTARIA = '260')) THEN
      TOTAL_TRIBUTADO = TOTAL_TRIBUTADO + VALORDOITEM;
  END
  TOTAL_CREDITOICMS = TOTAL_TRIBUTADO * (ALIQUOTA_ICMSSIMPLES / 100);

 SUSPEND;
END

^

SET TERM ; ^

SET TERM ^ ;

ALTER PROCEDURE REL_NOTAITENS(
    CODMOVIMENTO INTEGER)
RETURNS (
    CODIGO INTEGER,
    BARRA CHAR(13),
    DESCRICAO1 VARCHAR(60),
    DESCRICAO2 VARCHAR(80),
    SERIE VARCHAR(20),
    SERIE2 VARCHAR(20),
    VALOR_VENDA NUMERIC(14,3),
    ICMS_VENDA NUMERIC(14,4),
    DESCONTO NUMERIC(14,3),
    QUANTIDADE NUMERIC(14,3),
    VALOR_PAGO NUMERIC(14,3),
    VALOR_ICMS NUMERIC(14,3),
    SITTRIBU CHAR(3),
    UNIDADE CHAR(2),
    VALOR_ITEM NUMERIC(14,3),
    IPI NUMERIC(14,4),
    LINHA VARCHAR(20),
    OPERADORA VARCHAR(40),
    PLANO VARCHAR(40),
    ATIVACAO CHAR(1),
    CONTRATO VARCHAR(10),
    VOUCHER VARCHAR(10),
    TIPOATIVACAO CHAR(1),
    VALOR_CUSTO NUMERIC(14,3),
    CLASSFISCAL VARCHAR(20),
    PESO NUMERIC(9,3),
    DESCONTO_ADM NUMERIC(9,2))
AS
DECLARE VARIABLE ESMOV INTEGER;
DECLARE VARIABLE TIPOMOV INTEGER;
BEGIN

  SELECT
    ES,
    TIPO
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ESMOV,
    :TIPOMOV;

  IF ((TIPOMOV = 9) OR ((ESMOV = 0) AND (TIPOMOV = 1))) THEN
   BEGIN

     /* ITENS ESTORNADOS OU DE ORÇAMENTO */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.DESCRICAO,
       TI.SERIE,
       TI.SERIE2,
       TI.VALOR_UNITARIO,
       TI.ICMSVENDA,
       TI.DESCONTO,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA,
       TI.SITTRIBU,
       PO.UNIDADE,
       PO.ATIVACAO,
       (TI.VALOR_UNITARIO - TI.DESCONTO),
       TI.IPI,
       PO.PRECOCUSTO,
       PO.PESO
     FROM
       TEMPITENS TI
       JOIN PRODUTOS PO ON
        (PO.CODIGO = TI.CODPRODUTO)
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :ATIVACAO,
       :VALOR_ITEM,
       :IPI,
       :VALOR_CUSTO,
       :PESO
     DO
     BEGIN

       /* TRATAMENTO DA SERIE */
       IF ((UDF_TRIM(SERIE) <> 'N/F') AND (UDF_TRIM(SERIE) > '')) THEN
        BEGIN
          DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
        BEGIN
          IF (UDF_TRIM(SERIE2) > '') THEN
           BEGIN
             DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE2);
           END ELSE
             DESCRICAO2 = UDF_TRIM(DESCRICAO1);
        END

       PESO = PESO * QUANTIDADE;

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       CLASSFISCAL = NULL;

       SUSPEND;

     END

   END ELSE
   BEGIN

     /* PRODUTOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       UNIDADE,
       VALOR_ITEM,
       IPI,
       LINHA,
       OPERADORA,
       PLANO,
       'N',
       CONTRATO,
       VOUCHER,
       TIPOATIVACAO,
       DESCONTO_ADM,
       CLASSFISCAL,
       PESO
     FROM
       REL_NOTAPRO(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :LINHA,
       :OPERADORA,
       :PLANO,
       :ATIVACAO,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :DESCONTO_ADM,
       :CLASSFISCAL,
       :PESO
     DO
     BEGIN

       VALOR_CUSTO = 0;
       SUSPEND;

     END

     /* SERVIÇOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       'SE',
       VALOR_ITEM,
       0 AS IPI,
       ATIVACAO
     FROM
       REL_NOTASER(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :ATIVACAO
     DO
     BEGIN

       PESO = 0;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       DESCONTO_ADM = 0;
       VALOR_CUSTO = 0;
       CLASSFISCAL = NULL;
       SUSPEND;

     END

   END
END

^

SET TERM ; ^

GRANT EXECUTE ON PROCEDURE REL_NOTACORPO TO PUBLIC;

GRANT EXECUTE ON PROCEDURE REL_NOTADUP TO PUBLIC;

SET TERM ^ ;

CREATE OR ALTER procedure REL_NOTAITENS (
    CODMOVIMENTO integer)
returns (
    CODIGO integer,
    BARRA char(13),
    DESCRICAO1 varchar(60),
    DESCRICAO2 varchar(80),
    SERIE varchar(20),
    SERIE2 varchar(20),
    VALOR_VENDA numeric(14,3),
    ICMS_VENDA numeric(14,4),
    DESCONTO numeric(14,3),
    QUANTIDADE numeric(14,3),
    VALOR_PAGO numeric(14,3),
    VALOR_ICMS numeric(14,3),
    SITTRIBU char(3),
    UNIDADE char(2),
    VALOR_ITEM numeric(14,3),
    IPI numeric(14,4),
    LINHA varchar(20),
    OPERADORA varchar(40),
    PLANO varchar(40),
    ATIVACAO char(1),
    CONTRATO varchar(10),
    VOUCHER varchar(10),
    TIPOATIVACAO char(1),
    VALOR_CUSTO numeric(14,3),
    CLASSFISCAL varchar(20),
    PESO numeric(9,3),
    DESCONTO_ADM numeric(9,2),
    NCM integer)
as
declare variable ESMOV integer;
declare variable TIPOMOV integer;
BEGIN

  SELECT
    ES,
    TIPO
  FROM
    MOVIMENTOS
  WHERE
    CODIGO = :CODMOVIMENTO
  INTO
    :ESMOV,
    :TIPOMOV;

  IF ((TIPOMOV = 9) OR ((ESMOV = 0) AND (TIPOMOV = 1))) THEN
   BEGIN

     /* ITENS ESTORNADOS OU DE ORÇAMENTO */
     FOR
     SELECT
       TI.CODPRODUTO,
       PO.BARRA,
       PO.DESCRICAO,
       PO.DESCRICAO,
       TI.SERIE,
       TI.SERIE2,
       TI.VALOR_UNITARIO,
       TI.ICMSVENDA,
       TI.DESCONTO,
       TI.QUANTIDADE,
       TI.VALOR_TOTAL,
       TI.VALOR_ICMSCOMPRA,
       TI.SITTRIBU,
       PO.UNIDADE,
       PO.ATIVACAO,
       (TI.VALOR_UNITARIO - TI.DESCONTO),
       TI.IPI,
       PO.PRECOCUSTO,
       PO.PESO,
       PO.CODNCM
     FROM
       TEMPITENS TI
       JOIN PRODUTOS PO ON
        (PO.CODIGO = TI.CODPRODUTO)
     WHERE
       CODMOVIMENTO = :CODMOVIMENTO
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :ATIVACAO,
       :VALOR_ITEM,
       :IPI,
       :VALOR_CUSTO,
       :PESO,
       :NCM
     DO
     BEGIN

       /* TRATAMENTO DA SERIE */
       IF ((UDF_TRIM(SERIE) <> 'N/F') AND (UDF_TRIM(SERIE) > '')) THEN
        BEGIN
          DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE);
        END ELSE
        BEGIN
          IF (UDF_TRIM(SERIE2) > '') THEN
           BEGIN
             DESCRICAO2 = UDF_TRIM(DESCRICAO1) || ' ' || UDF_TRIM(SERIE2);
           END ELSE
             DESCRICAO2 = UDF_TRIM(DESCRICAO1);
        END

       PESO = PESO * QUANTIDADE;

       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       CLASSFISCAL = NULL;

       SUSPEND;

     END

   END ELSE
   BEGIN

     /* PRODUTOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       UNIDADE,
       VALOR_ITEM,
       IPI,
       LINHA,
       OPERADORA,
       PLANO,
       'N',
       CONTRATO,
       VOUCHER,
       TIPOATIVACAO,
       DESCONTO_ADM,
       CLASSFISCAL,
       PESO,
       NCM
     FROM
       REL_NOTAPRO(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :LINHA,
       :OPERADORA,
       :PLANO,
       :ATIVACAO,
       :CONTRATO,
       :VOUCHER,
       :TIPOATIVACAO,
       :DESCONTO_ADM,
       :CLASSFISCAL,
       :PESO,
       :NCM
     DO
     BEGIN

       VALOR_CUSTO = 0;
       SUSPEND;

     END

     /* SERVIÇOS */
     FOR
     SELECT
       CODIGO,
       BARRA,
       DESCRICAO1,
       DESCRICAO2,
       SERIE,
       SERIE2,
       VALOR_VENDA,
       ICMS_VENDA,
       DESCONTO,
       QUANTIDADE,
       VALOR_PAGO,
       VALOR_ICMS,
       SITTRIBU,
       'SE',
       VALOR_ITEM,
       0 AS IPI,
       ATIVACAO
     FROM
       REL_NOTASER(:CODMOVIMENTO)
     INTO
       :CODIGO,
       :BARRA,
       :DESCRICAO1,
       :DESCRICAO2,
       :SERIE,
       :SERIE2,
       :VALOR_VENDA,
       :ICMS_VENDA,
       :DESCONTO,
       :QUANTIDADE,
       :VALOR_PAGO,
       :VALOR_ICMS,
       :SITTRIBU,
       :UNIDADE,
       :VALOR_ITEM,
       :IPI,
       :ATIVACAO
     DO
     BEGIN

       PESO = 0;
       LINHA = NULL;
       OPERADORA = NULL;
       PLANO = NULL;
       CONTRATO = NULL;
       VOUCHER = NULL;
       TIPOATIVACAO = NULL;
       DESCONTO_ADM = 0;
       VALOR_CUSTO = 0;
       CLASSFISCAL = NULL;
       NCM = NULL;
       SUSPEND;

     END

   END
END
^

SET TERM ; ^

INSERT INTO SCRIPTVER(NUMERO, DATA) VALUES (454, CURRENT_TIMESTAMP);
COMMIT;
